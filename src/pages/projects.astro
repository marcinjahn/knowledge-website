---
import ProjectTile from "../components/projects/ProjectTile.astro";
import BaseLayout from "../layouts/BaseLayout.astro";
import { executeDownloadCounters } from "../services/projects/execute-download-counters";
import { getGithubProjects } from "../services/projects/github-client";
import { getMockProjects } from "../services/projects/mock-projects";
import { Project, createProject } from "../services/projects/project-factory";
import { projectDefinitions } from '../static/projects';

const pageTitle = "Projects";
const description = "Open-source projects that I've worked on";
const tags = ['open source', 'github', 'projects']

const githubProjects = import.meta.env.FETCH_GITHUB_PROJECTS ?
  await getGithubProjects('marcinjahn') :
  getMockProjects();

const projects = await Promise.all(
  githubProjects
    .map(githubProject => ({
      projectDefinition: projectDefinitions.find(p => p.githubName === githubProject.name),
      githubResponse: githubProject
    }))
    .filter(project => !!(project.projectDefinition))
    .map(async project => {
      return {
        projectDefinition: project.projectDefinition!,
        githubResponse: project.githubResponse,
        downloads: await executeDownloadCounters(project.projectDefinition!)
      }
    })
    .map((promise) => promise.then(({projectDefinition, githubResponse, downloads}) => 
      createProject(projectDefinition, githubResponse, downloads))));

// Sort by newest by default
projects.sort((a, b) => b.createdAt - a.createdAt);
---

<BaseLayout pageTitle={pageTitle} description={description} tags={tags}>
  <div class="container">
    <h1>Projects</h1>
    <h2>Below is a listing of some of the open source projects that I've created.</h2>

    <section class="sorting">
      <span>Sort by</span>
      <select id="sort-select">
        <option value="newest" selected>Newest</option>
        <option value="oldest">Oldest</option>
        <option value="stars">GitHub Stars</option>
        <option value="downloads">Downloads</option>
      </select>
    </section>


    <ul class="projects-list">
      {
        projects.map(project => (
          <li data-project={JSON.stringify(project)} class="project">
            <ProjectTile project={project}>
          </li>
        ))
      }
    </ul>
  </div>
</BaseLayout>

<script>
  const selectElement = document.getElementById('sort-select') as HTMLSelectElement;
  selectElement!.value = "newest";

  selectElement?.addEventListener('change', function() {
    const that = this as HTMLSelectElement;
    const selectedOption = that.options[that.selectedIndex].value;
    
    const ul = document.querySelector('.projects-list');
    const projects = document.querySelectorAll(".project");

    ul!.innerHTML = '';

    const sortedProjects = Array.from(projects).sort((a, b) => {
      const projectA = JSON.parse((a as HTMLElement).dataset.project!);
      const projectB = JSON.parse((b as HTMLElement).dataset.project!);

      if (selectedOption === 'newest') {
        return new Date(projectB.createdAt).getTime() - new Date(projectA.createdAt).getTime();
      } else if (selectedOption === 'oldest') {
        return new Date(projectA.createdAt).getTime() - new Date(projectB.createdAt).getTime();
      } else if(selectedOption === 'downloads') {
        return (projectB.downloads?.downloads ?? 0) - (projectA.downloads?.downloads ?? 0);
      }

      return projectB[selectedOption] - projectA[selectedOption];
    });

    sortedProjects.forEach(project => {
      ul?.appendChild(project);
    })
  });
</script>

<style>
.container {
  padding: 1rem;
  width: 900px;
  margin: 2rem auto;
}

h1 {
  color: black;
  margin-bottom: 1rem !important;
}

h2 {
  font-size: 1.1rem;
  margin-top: 0 !important;
  margin-bottom: 2rem !important;
  color: #3d3d3d;
}

ul {
  list-style: none;
  padding: 0;

  display: grid;
  gap: 1.5rem;
  grid-template-columns: repeat(3, 1fr);
}

li {
  justify-self: justify-self;
}

.sorting {
  display: flex;
  gap: 0.5rem;
  justify-content: flex-end;
  margin-bottom: 2rem;
}

@media only screen and (max-width: 920px) {
  .container {
    width: 100%;
    margin: 1rem 0;
  }

  ul {
    grid-template-columns: 1fr;
  }
}
</style>