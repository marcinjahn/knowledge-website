---
import sidebarStructure from "../../static/sidebar";
import { getCollection } from "astro:content";
import Arrow from "./arrow.astro";

function getSectionItems(path: string) {
    const section = Object.keys(sidebarStructure).find((key) =>
        path.startsWith(key)
    ) as string;
    return { items: sidebarStructure[section] || [], basePath: section };
}

const { items, basePath } = getSectionItems(Astro.url.pathname);
const allArticles = await getCollection("articles");

function slug(endOfPath: string) {
    return `${basePath}${endOfPath}`
}

function getArticleTitle(endOfPath: string) {
    const articleSlug = slug(endOfPath).substring(1);
    const title = allArticles
        .find(a => a.slug === articleSlug || a.slug + '/' === articleSlug)
        ?.data.title;

    return title ?? "UNKNOWN"
}
---

<ul class="sidebar-container">
    {
        items.map((item) =>
            typeof item === "string" ? (
                <li data-path={slug(item)}>
                    <a href={slug(item)}>{getArticleTitle(item)}</a>
                </li>
            ) : (
                <li>
                    <div class="section-title">
                        <span>{item.title}</span>
                        <div class="arrow"><Arrow /></div>
                    </div>

                    <ul class="hidden">
                        {item.children.map((item) =>
                            typeof item === "string" ? (
                                <li data-path={slug(item)}>
                                    <a href={slug(item)}>{getArticleTitle(item)}</a>
                                </li>
                            ) : (
                                <li>
                                    <span>{item.title}</span>
                                    <ul class="hidden">
                                        {item.children.map((item) =>
                                            typeof item === "string" ? (
                                                <li
                                                    data-path={slug(item)}
                                                >
                                                    <a
                                                        href={slug(item)}
                                                    >
                                                        {getArticleTitle(item)}
                                                    </a>
                                                </li>
                                            ) : (
                                                <li>
                                                    <span>{item.title}</span>
                                                    <ul class="hidden">
                                                        {item.children.map(
                                                            (item) => (
                                                                typeof item === "string" ? (
                                                                    <li
                                                                        data-path={slug(item)}
                                                                    >
                                                                        <a
                                                                            href={slug(item)}
                                                                        >
                                                                            {getArticleTitle(item)}
                                                                        </a>
                                                                    </li>
                                                                ) : (<></>)
                                                            )
                                                        )}
                                                    </ul>
                                                </li>
                                            )
                                        )}
                                    </ul>
                                </li>
                            )
                        )}
                    </ul>
                </li>
            )
        )
    }
</ul>

<script>
    revealCurrentArticle();
    addClickHandlerToUls();

    function revealCurrentArticle() {
        const path = window.location.pathname;
        const currentLi = document.querySelector(`[data-path="${path}"]`);

        if (currentLi === null) {
            return;
        }

        let parent: HTMLElement | null | undefined = currentLi.parentElement;
        while(parent) {
            parent.classList.remove('hidden');
            parent = parent.parentElement?.parentElement;
        }
    }

    function addClickHandlerToUls() {
        const allSpans = document.getElementsByTagName('span');
        for (let span of allSpans) {
            span.addEventListener('click', () => {
                const ul = span.parentElement?.parentElement?.getElementsByTagName('ul')[0];
                ul?.classList.toggle('hidden');
            });
        }
    }
</script>

<style>
    ul {
        list-style: none;
        padding-left: 1.8rem;
    }

    a,
    span {
        color: rgb(48, 48, 48) !important;
        user-select: none;
        line-height: 2rem;
    }

    a:hover,
    span:hover {
        cursor: pointer;
        color: var(--accent-color) !important;
    }

    .active {
        font-weight: bold;
        color: var(--accent-color) !important;
    }

    ul.hidden {
        display: none;
    }

    .section-title {
        display: flex;
    }

    .arrow {
        height: 1rem;
    }
</style>
