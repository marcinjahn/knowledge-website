---
import "./style.css";
import Arrow from "./Arrow.astro";
import type { SidebarItem } from "../../static/sidebar";

interface Props {
    item: SidebarItem;
    isTopLevel?: boolean;
}

const { item, isTopLevel } = Astro.props;
---

<li class:list={[{ top: isTopLevel }]}>
    <div class="section-title">
        { item.icon ? <img class="icon" src={`/sidebar-icons/${item.icon}`} alt={`An icon of the ${item.title} section`}/> : <></> }
        <span>{item.title}</span>
        <div class="arrow"><Arrow /></div>
    </div>
    <ul class="sidebar-list hidden">
        <slot />
    </ul>
</li>

<script>
    addClickHandlerToUls();

    function addClickHandlerToUls() {
        const allTitles = document.getElementsByClassName("section-title");
        for (let title of allTitles) {
            title.addEventListener("click", () => {
                const ul = title.parentElement?.getElementsByTagName("ul")[0];
                const arrow = title.parentElement?.getElementsByClassName("arrow")[0];
                
                const clickedOnClosedNode = ul?.classList.contains("hidden");

                collapseAllTitles(title);

                if (clickedOnClosedNode) {
                    ul?.classList.remove("hidden");
                    arrow?.classList.add("rotated");
                }
            });
        }
    }

    function collapseAllTitles(clickedElement: Element) {
        const allTitles =
            clickedElement.parentElement?.parentElement?.getElementsByClassName(
                "section-title"
            );

        if (!allTitles) {
            return;
        }

        for (let title of allTitles) {
            const ul = title.parentElement?.getElementsByTagName("ul")[0];
            ul?.classList.add("hidden");

            const arrow = title.parentElement?.getElementsByClassName("arrow")[0];
            arrow?.classList.remove("rotated");
        }
    }
</script>

<style>
    span {
        color: var(--text-color);
        filter: brightness(70%);
        user-select: none;
        line-height: 2rem;
    }

    li:not(.top) span:hover {
        color: var(--accent-color) !important;
    }

    .section-title {
        display: flex;
        gap: 0.1rem;
        align-items: center;
        cursor: pointer;
        opacity: 0.8;
        transition: opacity 200ms linear;
    }

    .section-title:hover {
        opacity: 1;
    }

    .sidebar-list.hidden {
        display: none;
    }

    .icon {
        height: 1.2rem;
        margin-right: 0.5rem;
    }

    .arrow {
        transition: transform 0.2s ease-in-out;
    }

    .rotated {
        transform: rotate(90deg);
    }

    @media only screen and (max-width: 920px) {
        .section-title {
            opacity: 0.8;
        }
    }
</style>
