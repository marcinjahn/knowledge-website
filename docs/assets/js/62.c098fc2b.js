(window.webpackJsonp=window.webpackJsonp||[]).push([[62],{491:function(t,e,n){"use strict";n.r(e);var s=n(31),i=Object(s.a)({},(function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("h1",{attrs:{id:"fundamentals-of-fp"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#fundamentals-of-fp"}},[t._v("#")]),t._v(" Fundamentals of FP")]),t._v(" "),n("p",[t._v("One of the most significant issues in programming nowadays is how to deal with\nthe increasing complexity of the software. Functional Programming is a way to\nsimplify programs.")]),t._v(" "),n("p",[t._v("In FP (opposed to OOP), separating functions from data is natural. Functions\nencode logic, and data represent inputs and outputs of functions.")]),t._v(" "),n("h2",{attrs:{id:"higher-order-functions"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#higher-order-functions"}},[t._v("#")]),t._v(" Higher-Order Functions")]),t._v(" "),n("p",[t._v("These are functions that either:")]),t._v(" "),n("ul",[n("li",[t._v("accept other functions as inputs")]),t._v(" "),n("li",[t._v("return functions as outputs")]),t._v(" "),n("li",[t._v("both of the above")])]),t._v(" "),n("h2",{attrs:{id:"purity"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#purity"}},[t._v("#")]),t._v(" Purity")]),t._v(" "),n("p",[t._v("In mathematics, functions don't have side effects. Based on some inputs, some\noutput is returned. In programming, that's not always the case. Programs change\nstate.")]),t._v(" "),n("p",[t._v("Functions might be "),n("strong",[t._v("pure")]),t._v(" or "),n("strong",[t._v("impure")]),t._v(". Pure functions are similar to the\nmathematical functions. They do not rely on or modify any state. Their outputs\ndepend solely on the inputs.")]),t._v(" "),n("div",{staticClass:"custom-block tip"},[n("p",{staticClass:"custom-block-title"},[t._v("Impurity will always be there")]),t._v(" "),n("p",[t._v("Some of the code has to be impure. Otherwise, the program wouldn't be able to\ncommunicate the result to the outside world (communicating outside world implies\nimpurity).")])]),t._v(" "),n("p",[t._v("Impure functions can modify (or just read) an external state, and their outputs\ncan depend on some external state as well. They are much harder to reason about,\ntest and they might now work as expected in concurrent scenarios.")]),t._v(" "),n("div",{staticClass:"custom-block tip"},[n("p",{staticClass:"custom-block-title"},[t._v("Impurity cases")]),t._v(" "),n("p",[t._v("If a function modifies its inputs (and the modification is visible\noutside of the function), it's an impure function.")]),t._v(" "),n("p",[t._v("If a function may throw exceptions, it's impure. The outcome might change\ndepending on having a try-catch or not. (so what?)")]),t._v(" "),n("p",[t._v("If the function does any I/O operations (even writing to the console), it's\nimpure. The result might differ depending on the availability and state of\nthe external I/O resource.")])]),t._v(" "),n("p",[t._v("Pure functions ALWAYS return the same output for the same input. Functional\nprograms may be optimized with:")]),t._v(" "),n("ul",[n("li",[t._v("parallelization - different threads can run functions, and no conflicts will\nappear.")]),t._v(" "),n("li",[t._v("lazy evaluation - only evaluates outputs when needed")]),t._v(" "),n("li",[t._v("memoization - caching of results for performance gains")])]),t._v(" "),n("p",[t._v("These techniques are not straightforward with impure functions.")]),t._v(" "),n("div",{staticClass:"custom-block tip"},[n("p",{staticClass:"custom-block-title"},[t._v("Static Methods")]),t._v(" "),n("p",[t._v("Pure functions should be implemented as static methods.")])])])}),[],!1,null,null,null);e.default=i.exports}}]);