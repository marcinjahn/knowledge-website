(window.webpackJsonp=window.webpackJsonp||[]).push([[97],{590:function(t,e,a){"use strict";a.r(e);var n=a(22),r=Object(n.a)({},(function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"frontmatter-title"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#frontmatter-title"}},[t._v("#")]),t._v(" "+t._s(t.$frontmatter.title))]),t._v(" "),a("p",[t._v("C and C++ are/were often used for providing various code libraries. Examples include:")]),t._v(" "),a("ul",[a("li",[t._v("GTK")]),t._v(" "),a("li",[t._v("Cairo")]),t._v(" "),a("li",[t._v("SVN")])]),t._v(" "),a("p",[t._v('Sometimes we might want to use these libraries in our projects, but we don\'t\nwant to code in C/C++. This is where a technique called "Language Bindings"\ncomes into play. Many languages/runtimes offer a way to run dynamic libraries\neven if they were compiled from different source languages. For example, in\n.NET, we can use '),a("strong",[t._v("Platform Invoke")]),t._v(". Here's an example:")]),t._v(" "),a("div",{staticClass:"language-cs extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cs"}},[a("code",[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token attribute"}},[a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("DllImport")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token attribute-arguments"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("cairo"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" CallingConvention"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("CallingConvention"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Cdecl"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")])])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("internal")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("extern")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token return-type class-name"}},[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")])]),t._v(" cairo_append_path "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("IntPtr")]),t._v(" cr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("IntPtr")]),t._v(" path"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v("What Platform Invoke does is:")]),t._v(" "),a("ol",[a("li",[t._v("It loads the dynamic library (DLL on Windows) into the memory")]),t._v(" "),a("li",[t._v("It looks for the specified function")]),t._v(" "),a("li",[t._v("It arranges arguments of that function on the stack and executes it")]),t._v(" "),a("li",[t._v("It returns the result")])]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("Unmanaged Code")]),t._v(" "),a("p",[t._v("In the .NET world, it would be an example of Unmanaged Code, which is code\nthat runs outside the runtime.")])]),t._v(" "),a("h2",{attrs:{id:"examples"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#examples"}},[t._v("#")]),t._v(" Examples")]),t._v(" "),a("p",[t._v("Cairo is a good example of a library that is available only in C.\n"),a("a",{attrs:{href:"https://github.com/zwcloud/CairoSharp",target:"_blank",rel:"noopener noreferrer"}},[t._v("CairoSharp"),a("OutboundLink")],1),t._v(" is a language binding for\n"),a("a",{attrs:{href:"https://www.cairographics.org/bindings/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Cairo"),a("OutboundLink")],1),t._v(" in .NET C#. It allows .NET\nprogrammers to use Cairo in their projects. It has a\n"),a("a",{attrs:{href:"https://github.com/zwcloud/CairoSharp/blob/HEAD/source/CairoSharp/NativeMethods.cs",target:"_blank",rel:"noopener noreferrer"}},[t._v("NativeMethods"),a("OutboundLink")],1),t._v("\nclass that exposes the C functions to the .NET world.")]),t._v(" "),a("p",[t._v("Another good example is "),a("a",{attrs:{href:"https://github.com/GtkSharp/GtkSharp",target:"_blank",rel:"noopener noreferrer"}},[t._v("GtkSharp"),a("OutboundLink")],1),t._v(", which\nis a .NET wrapper for GTK toolkit.")]),t._v(" "),a("h2",{attrs:{id:"hosting-net-in-native-code"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#hosting-net-in-native-code"}},[t._v("#")]),t._v(" Hosting .NET in native code")]),t._v(" "),a("p",[t._v("There is also a way for the reversed operation - running managed .NET code\nwithing a native C/C++ code. It's explained on\n"),a("a",{attrs:{href:"https://docs.microsoft.com/en-us/dotnet/core/tutorials/netcore-hosting",target:"_blank",rel:"noopener noreferrer"}},[t._v("MSDN"),a("OutboundLink")],1),t._v(".")]),t._v(" "),a("h2",{attrs:{id:"references"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#references"}},[t._v("#")]),t._v(" References")]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"https://docs.microsoft.com/en-us/dotnet/framework/interop/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Interoperating with unmanaged code\n(MSDN)"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://docs.microsoft.com/en-us/dotnet/framework/interop/consuming-unmanaged-dll-functions",target:"_blank",rel:"noopener noreferrer"}},[t._v("Consuming Unmanaged DLL Functions\n(MSDN)"),a("OutboundLink")],1)])])])}),[],!1,null,null,null);e.default=r.exports}}]);