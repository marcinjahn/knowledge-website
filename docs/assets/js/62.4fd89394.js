(window.webpackJsonp=window.webpackJsonp||[]).push([[62],{490:function(t,s,a){"use strict";a.r(s);var n=a(31),e=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"fundamentals-of-fp"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#fundamentals-of-fp"}},[t._v("#")]),t._v(" Fundamentals of FP")]),t._v(" "),a("p",[t._v("One of the most significant issues in programming nowadays is how to deal with\nthe increasing complexity of the software. Functional Programming is a way to\nsimplify programs.")]),t._v(" "),a("p",[t._v("In FP (opposed to OOP), separating functions from data is natural. Functions\nencode logic, and data represent inputs and outputs of functions.")]),t._v(" "),a("p",[t._v("In FP, instead of defining steps how to compute something, we define what the\nresult is.")]),t._v(" "),a("h2",{attrs:{id:"higher-order-functions"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#higher-order-functions"}},[t._v("#")]),t._v(" Higher-Order Functions")]),t._v(" "),a("p",[t._v("These are functions that either:")]),t._v(" "),a("ul",[a("li",[t._v("accept other functions as inputs")]),t._v(" "),a("li",[t._v("return functions as outputs")]),t._v(" "),a("li",[t._v("both of the above")])]),t._v(" "),a("h2",{attrs:{id:"purity"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#purity"}},[t._v("#")]),t._v(" Purity")]),t._v(" "),a("p",[t._v("In mathematics, functions don't have side effects. Based on some inputs, some\noutput is returned. In programming, that's not always the case. Programs change\nstate.")]),t._v(" "),a("p",[t._v("Functions might be "),a("strong",[t._v("pure")]),t._v(" or "),a("strong",[t._v("impure")]),t._v(". Pure functions are similar to the\nmathematical functions. They do not rely on or modify any state. Their outputs\ndepend solely on the inputs.")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("Impurity will always be there")]),t._v(" "),a("p",[t._v("Some of the code has to be impure. Otherwise, the program wouldn't be able to\ncommunicate the result to the outside world (communicating outside world implies\nimpurity).")])]),t._v(" "),a("p",[t._v("Impure functions can modify (or just read) an external state, and their outputs\ncan depend on some external state as well. They are much harder to reason about,\ntest and they might now work as expected in concurrent scenarios.")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("Impurity cases")]),t._v(" "),a("p",[t._v("If a function modifies its inputs (and the modification is visible\noutside of the function), it's an impure function.")]),t._v(" "),a("p",[t._v("If a function may throw exceptions, it's impure. The outcome might change\ndepending on having a try-catch or not. (so what?)")]),t._v(" "),a("p",[t._v("If the function does any I/O operations (even writing to the console), it's\nimpure. The result might differ depending on the availability and state of\nthe external I/O resource.")])]),t._v(" "),a("p",[t._v("Pure functions ALWAYS return the same output for the same input. Functional\nprograms may be optimized with:")]),t._v(" "),a("ul",[a("li",[t._v("parallelization - different threads can run functions, and no conflicts will\nappear.")]),t._v(" "),a("li",[t._v("lazy evaluation - only evaluates outputs when needed")]),t._v(" "),a("li",[t._v("memoization - caching of results for performance gains")])]),t._v(" "),a("p",[t._v("These techniques are not straightforward with impure functions.")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("Static Methods")]),t._v(" "),a("p",[t._v("Pure functions should be implemented as static methods.")])]),t._v(" "),a("h2",{attrs:{id:"functors"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#functors"}},[t._v("#")]),t._v(" Functors")]),t._v(" "),a("p",[t._v("When a value is wrapped in some container (like an "),a("code",[t._v("Option")]),t._v(" or "),a("code",[t._v("IEnumerable")]),t._v(") we\ncan't apply functions to it:")]),t._v(" "),a("div",{staticClass:"language-csharp extra-class"},[a("pre",{pre:!0,attrs:{class:"language-csharp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Increment")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Some")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//doesn't work")]),t._v("\n")])])]),a("p",[t._v("This is where "),a("code",[t._v("Map")]),t._v(" comes in. It allows us to extract the value from a container\nand apply a function to it. It returns a functor a well.")]),t._v(" "),a("div",{staticClass:"language-csharp extra-class"},[a("pre",{pre:!0,attrs:{class:"language-csharp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Some")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Map")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Increment"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//Some(4)")]),t._v("\n")])])]),a("p",[t._v("A type for which a "),a("code",[t._v("Map")]),t._v(" function ("),a("code",[t._v("Select")]),t._v(" in C#) is defined is called a\n"),a("strong",[t._v("functor")]),t._v(". Functors include:")]),t._v(" "),a("ul",[a("li",[t._v("collections (or in general "),a("code",[t._v("IEnumerable")]),t._v(")")]),t._v(" "),a("li",[a("code",[t._v("Option")])])]),t._v(" "),a("p",[t._v("Functors have some inner values to which a function can be applied.\nA map can be represented as follows:")]),t._v(" "),a("p",[a("code",[t._v("(C<T>, (T -> R)) -> C<R>")])]),t._v(" "),a("p",[a("code",[t._v("C<T>")]),t._v(" is a functor.")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("Functions")]),t._v(" "),a("p",[t._v("Functions are functors as well!")])]),t._v(" "),a("h3",{attrs:{id:"map-vs-foreach"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#map-vs-foreach"}},[t._v("#")]),t._v(" Map vs ForEach")]),t._v(" "),a("p",[a("code",[t._v("Map")]),t._v(" is to be used with functions that have no side-effects, while "),a("code",[t._v("ForEach")]),t._v(" is\nto be used with side-effect function. Example:")]),t._v(" "),a("div",{staticClass:"language-csharp extra-class"},[a("pre",{pre:!0,attrs:{class:"language-csharp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token class-name"}},[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")])]),t._v(" names "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constructor-invocation class-name"}},[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("string")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")])]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Andy"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"John"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Jules"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nnames\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Map")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("n "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token interpolation-string"}},[a("span",{pre:!0,attrs:{class:"token string"}},[t._v('$"Hello ')]),a("span",{pre:!0,attrs:{class:"token interpolation"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token expression language-csharp"}},[t._v("n")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")])]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"')])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// pure function")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("ForEach")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("WriteLine"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// impure function")]),t._v("\n")])])]),a("p",[a("code",[t._v("Map")]),t._v(" takes a "),a("code",[t._v("Func")]),t._v(", while "),a("code",[t._v("ForEach")]),t._v(" takes an "),a("code",[t._v("Action")]),t._v(".")]),t._v(" "),a("h2",{attrs:{id:"monads"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#monads"}},[t._v("#")]),t._v(" Monads")]),t._v(" "),a("h3",{attrs:{id:"bind"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#bind"}},[t._v("#")]),t._v(" Bind")]),t._v(" "),a("p",[t._v("A "),a("code",[t._v("Bind")]),t._v(" function ("),a("code",[t._v("SelectMany")]),t._v(" in C#) is useful to flatten lists of lists.")]),t._v(" "),a("p",[a("code",[t._v("Bind")]),t._v(" can be represented as follows:")]),t._v(" "),a("p",[a("code",[t._v("(C<T>, (T -> C<R>)) -> C<R>")])]),t._v(" "),a("p",[t._v("A type that has a "),a("code",[t._v("Bind")]),t._v(" method is a "),a("strong",[t._v("monad")]),t._v(".")]),t._v(" "),a("p",[t._v("Example:")]),t._v(" "),a("div",{staticClass:"language-csharp extra-class"},[a("pre",{pre:!0,attrs:{class:"language-csharp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("record")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Pet")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("string")])]),t._v(" Name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("record")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Person")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("string")])]),t._v(" Name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("IEnumerable"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("Pet"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" Pets"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")])]),t._v(" people "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constructor-invocation class-name"}},[t._v("Person")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"George"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constructor-invocation class-name"}},[t._v("List"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("Pet"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constructor-invocation class-name"}},[t._v("Pet")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"dog"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constructor-invocation class-name"}},[t._v("Pet")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"cat"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constructor-invocation class-name"}},[t._v("Person")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Peter"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constructor-invocation class-name"}},[t._v("List"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("Pet"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constructor-invocation class-name"}},[t._v("Pet")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"hamster"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constructor-invocation class-name"}},[t._v("Person")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Jady"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constructor-invocation class-name"}},[t._v("List"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("Pet"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")])]),t._v(" animals "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" people"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Bind")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("p "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" p"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Pets"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// ["dog", "cat", "hamster"]')]),t._v("\n")])])]),a("p",[t._v("A "),a("code",[t._v("Map")]),t._v(" would return a list of lists. "),a("code",[t._v("Bind")]),t._v(" is much more suitable here.\nThe "),a("code",[t._v("Person[]")]),t._v(" type is a monad.")]),t._v(" "),a("h3",{attrs:{id:"return"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#return"}},[t._v("#")]),t._v(" Return")]),t._v(" "),a("p",[t._v("A monad must also have a "),a("code",[t._v("Return")]),t._v(' function defined. It\'s a function that wraps a\n"normal" value '),a("code",[t._v("T")]),t._v(" into a monadic value "),a("code",[t._v("C<T>")]),t._v(".")]),t._v(" "),a("p",[a("code",[t._v("Return")]),t._v(" can be represented as follows:")]),t._v(" "),a("p",[a("code",[t._v("T -> C<T>")])]),t._v(" "),a("p",[t._v("An example of a "),a("code",[t._v("Return")]),t._v(" function could be a function that turns items into a\nlist, or a "),a("code",[t._v("Some")]),t._v(" method of "),a("code",[t._v("Option")]),t._v(".")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[a("code",[t._v("IEnumerable")]),t._v(" and "),a("code",[t._v("Option")]),t._v(" are both "),a("strong",[t._v("functors")]),t._v(" and "),a("strong",[t._v("monads")]),t._v(".")]),t._v(" "),a("p",[t._v("Every monad is also a functor.\nNot every functor is a monad.")])]),t._v(" "),a("h2",{attrs:{id:"references"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#references"}},[t._v("#")]),t._v(" References")]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"https://adit.io/posts/2013-04-17-functors,_applicatives,_and_monads_in_pictures.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://adit.io/posts/2013-04-17-functors,_applicatives,_and_monads_in_pictures.html"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"http://learnyouahaskell.com/chapters",target:"_blank",rel:"noopener noreferrer"}},[t._v("http://learnyouahaskell.com/chapters"),a("OutboundLink")],1)])])])}),[],!1,null,null,null);s.default=e.exports}}]);