(window.webpackJsonp=window.webpackJsonp||[]).push([[31],{488:function(e,t,a){e.exports=a.p+"assets/img/deployment-replicaset-selector.249cfc6d.png"},515:function(e,t,a){"use strict";a.r(t);var s=a(22),o=function(e){e.options.__data__block__={mermaid_382ee1e4:"flowchart LR\n    A[Deployment] --\x3e |manages| B[ReplicaSet] --\x3e |manages| C[Pod]\n    B --\x3e |manages| D[Pod]\n"}},n=Object(s.a)({},(function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[s("h1",{attrs:{id:"scaling"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#scaling"}},[e._v("#")]),e._v(" Scaling")]),e._v(" "),s("p",[e._v("It's not very convenient to manage pods individually. We need ways to deploy\npods in multiple replicas, which is a base for high availability of the service.\nAdditionally, we need a way to keep pods running in case some node fails.")]),e._v(" "),s("h2",{attrs:{id:"replicaset"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#replicaset"}},[e._v("#")]),e._v(" ReplicaSet")]),e._v(" "),s("p",[e._v("ReplicaSet allows us to create a group of pod replicas, instead of just one pod.\nThe pods managed by the ReplicaSet are selected using an immutable label\n"),s("code",[e._v("selector")]),e._v(" (similarly to "),s("RouterLink",{attrs:{to:"/technologies/kubernetes/services.html"}},[e._v("Services")]),e._v("). There is also a "),s("code",[e._v("template")]),e._v(",\nwhich defines the pod(s) that will be created under ReplicaSet. Such a pod has\nto conform to the "),s("em",[e._v("selector")]),e._v(" specified by the ReplicaSet.")],1),e._v(" "),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[e._v("Existing Pods")]),e._v(" "),s("p",[e._v("If some pods matching the selector already existed prior to the creation of the\nReplicaSet, they're counted as part of the ReplicaSet.")]),e._v(" "),s("p",[e._v("If we manually create some pod(s) that conform to ReplicaSet's selector, the\ncontroller will delete some pods to reach the "),s("em",[e._v("replicas")]),e._v(" count.")])]),e._v(" "),s("p",[e._v("Pod names are generated based on the ReplicaSet's name, but it can be changed\nwith the "),s("code",[e._v("generateName")]),e._v(" setting.")]),e._v(" "),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[e._v("ReplicationController")]),e._v(" "),s("p",[e._v("In the past, ReplicationController was used instead of ReplicaSet. It behaved\nthe same as ReplicaSet does. It is now deprecated.")])]),e._v(" "),s("p",[e._v("ReplicaSets are rarely used directly due to their lacking pods updates\npossibilities.")]),e._v(" "),s("h3",{attrs:{id:"updates"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#updates"}},[e._v("#")]),e._v(" Updates")]),e._v(" "),s("p",[e._v("We're free to change "),s("code",[e._v("replicas")]),e._v(" count and the number of pods will reflect the\nsetting.")]),e._v(" "),s("p",[e._v("If we modify the "),s("code",[e._v("template")]),e._v(" of some existing ReplicaSet, the existing pods will\nnot be updated. Instead, just the pods created by ReplicaSet in the future will\nhave the new settings applied.")]),e._v(" "),s("h3",{attrs:{id:"replacing-a-pod"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#replacing-a-pod"}},[e._v("#")]),e._v(" Replacing a Pod")]),e._v(" "),s("p",[e._v("Sometimes we might want to investigate some issue in one of the pods, while\nkeeping ReplicaSet running with proper scaling. We could temporarily increment\nthe "),s("em",[e._v("replicas")]),e._v(" config, but we'd have to rememeber to decrement it back later on.\nInstead, we can just change the labels of the faulty pod so that it does not\nconform to ReplicaSet's selector. The ReplicaSet's controller will create a new\npod for its needs while we can start investigating the faulty pod.")]),e._v(" "),s("h3",{attrs:{id:"ownership"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#ownership"}},[e._v("#")]),e._v(" Ownership")]),e._v(" "),s("p",[e._v('Pods managed by a ReplicaSet have a special\n"ownerReference" section in their "metadata". A pod can have multiple owners.')]),e._v(" "),s("p",[e._v("Pods are auto-deleted when the owners are deleted (unless the "),s("code",[e._v("--cascade=orphan")]),e._v("\nparameter is applied while removing the owner).")]),e._v(" "),s("p",[e._v("If a pod is taken out of the ReplicaSet (like "),s("a",{attrs:{href:"#replacing-a-pod"}},[e._v("this")]),e._v(') the\n"ownerReference" metadata is deleted from it automatically.')]),e._v(" "),s("h2",{attrs:{id:"deployment"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#deployment"}},[e._v("#")]),e._v(" Deployment")]),e._v(" "),s("p",[e._v("Deployments manage Pods via a ReplicaSet. They are mostly used for stateless\nworkloads. Labels applied in the "),s("code",[e._v("template")]),e._v(" for Pods are also applied to the\nReplicaSet that manages these pods.")]),e._v(" "),s("Mermaid",{attrs:{id:"mermaid_382ee1e4",graph:e.$dataBlock.mermaid_382ee1e4}}),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[e._v("ReplicaSet Updates")]),e._v(" "),s("p",[e._v("If we try to edit ReplicaSet managed by a Deployment, our updates will be\nreplaced with Deployment's config soon after. ReplicaSet is controlled by the\nDeployment and we should modify its settings throught the Deployment.")])]),e._v(" "),s("p",[e._v("In addition to settings available to ReplicaSets, Deployments also contain the\n"),s("code",[e._v("strategy")]),e._v(" configuration. It dictates how Pods are replaced during updates.")]),e._v(" "),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[e._v("Existing Pods")]),e._v(" "),s("p",[e._v("If some pods already exist that match the Deployment's selector, most likely\nthey will not be reused in the Deployment's replicas. The ReplicaSet managed by\nthe Deployment adds additional (based on "),s("code",[e._v("template")]),e._v(" hash) label selector to\nthe pods it manages.")]),e._v(" "),s("p",[s("img",{attrs:{src:a(488),alt:""}})])]),e._v(" "),s("h3",{attrs:{id:"updates-2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#updates-2"}},[e._v("#")]),e._v(" Updates")]),e._v(" "),s("p",[e._v("Compared to ReplicaSets, updating Pod template causes all the existing Pods to\nbe redeployed to meet the new requirements. Anytime we update Pod's template a\nhash of it is calculated, and a new ReplicaSet is created with that hash being\nused for one of the selectors.")]),e._v(" "),s("h4",{attrs:{id:"strategies"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#strategies"}},[e._v("#")]),e._v(" Strategies")]),e._v(" "),s("p",[e._v("There are two update strategies supported by the Deployment:")]),e._v(" "),s("ul",[s("li",[s("p",[s("strong",[e._v("Recreate")]),e._v(" - all pods deleted at the same time. There is some downtime until\nthe new pods get created. It should be used when downtime is acceptable or\nwhen apps should not run in mixed versions")])]),e._v(" "),s("li",[s("p",[s("strong",[e._v("RollingUpdate")]),e._v(" - old pods are gradually replaced with new ones. It's the\n"),s("strong",[e._v("default")]),e._v(". The number of pods to be replaced at a time is configurable:")]),e._v(" "),s("ul",[s("li",[s("strong",[e._v("maxSurge")]),e._v(" - the maximum number of pods above the configured "),s("code",[e._v("replicas")]),e._v("\nto be run during the update. The deployment may run more pods than desired\nreplicas to keep the app available during the update. It's an absolute\nnumber or percentage. The default is "),s("strong",[e._v("25%")]),e._v(".")]),e._v(" "),s("li",[s("strong",[e._v("maxUnavailable")]),e._v(" - the max number of Pods (realtive to "),s("code",[e._v("replicas")]),e._v(") that\nmay be unavailable during the update.It's an absolute number or\npercentage. The default is "),s("strong",[e._v("25%")]),e._v(".")])]),e._v(" "),s("div",{staticClass:"custom-block warning"},[s("p",{staticClass:"custom-block-title"},[e._v("WARNING")]),e._v(" "),s("p",[e._v("We can't set both "),s("strong",[e._v("maxSurge")]),e._v(" and "),s("strong",[e._v("maxUnavailable")]),e._v(" to 0.")])])])]),e._v(" "),s("h4",{attrs:{id:"pausing"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#pausing"}},[e._v("#")]),e._v(" Pausing")]),e._v(" "),s("p",[e._v("Pausing might be useful for:")]),e._v(" "),s("ul",[s("li",[e._v("checking the state of the app in-between the update to see how mixed versions\nwork.")]),e._v(" "),s("li",[e._v("applying multiple update operations without immediate action from the\ndeployment-controller.")])]),e._v(" "),s("div",{staticClass:"language-sh extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sh"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Pause")]),e._v("\nk rollout pause deployment my-deployment\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Resume")]),e._v("\nk rollout resume deployment my-deployment\n")])])]),s("h4",{attrs:{id:"rollback"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#rollback"}},[e._v("#")]),e._v(" Rollback")]),e._v(" "),s("p",[e._v("If deployment update rollout is failing, we can rollback with:")]),e._v(" "),s("div",{staticClass:"language-sh extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sh"}},[s("code",[e._v("k rollout undo deployment my-deployment\n")])])]),s("p",[e._v("If the deployment is paused, rollback will also be paused.")]),e._v(" "),s("div",{staticClass:"custom-block warning"},[s("p",{staticClass:"custom-block-title"},[e._v("Only template")]),e._v(" "),s("p",[e._v("Rollback reverts only changes made to the "),s("code",[e._v("template")]),e._v(" section of the Deployment.\nAll other changes, such as "),s("code",[e._v("strategy")]),e._v(" or "),s("code",[e._v("replicas")]),e._v(" are preserved.")]),e._v(" "),s("p",[e._v("A "),s("code",[e._v("k apply")]),e._v(" command would overwrite everything.")])]),e._v(" "),s("h5",{attrs:{id:"history"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#history"}},[e._v("#")]),e._v(" History")]),e._v(" "),s("p",[e._v("We can rollback to older versions as well.")]),e._v(" "),s("div",{staticClass:"language-sh extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sh"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# To see a list of revisions")]),e._v("\nk rollout "),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("history")]),e._v(" deploy my-deployment\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# To see details of some revision")]),e._v("\nk rollout "),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("history")]),e._v(" deploy my-deployment --revision "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("2")]),e._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# To rollback to some revision")]),e._v("\nk rollout undo deploy my-deployment --to-revision"),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("2")]),e._v("\n")])])]),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[e._v("ReplicaSet")]),e._v(" "),s("p",[e._v("The history of deployments is persisted thanks to the fact that ReplicaSets of\nthe Deployment are preserved after updates. The amount of old ReplicaSets to\nkeep is configable with the "),s("code",[e._v("spec.revisionHistoryLimit")]),e._v(" setting of the\nDeployment.")])]),e._v(" "),s("h3",{attrs:{id:"restart"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#restart"}},[e._v("#")]),e._v(" Restart")]),e._v(" "),s("p",[e._v("We can restart all pods of a deployment with:")]),e._v(" "),s("div",{staticClass:"language-sh extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sh"}},[s("code",[e._v("k rollout restart deploy my-deployment\n")])])]),s("p",[e._v("All the pods are deleted and replaced with new ones. The "),s("code",[e._v("strategy")]),e._v(" setting is\nrespected.")]),e._v(" "),s("h3",{attrs:{id:"example"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#example"}},[e._v("#")]),e._v(" Example")]),e._v(" "),s("p",[e._v("Creating a simple deployment: "),s("code",[e._v("kubectl create deployment kiada --image=luksa/kiada:0.1")])]),e._v(" "),s("p",[e._v("Kubectl sends a POST request to "),s("code",[e._v("/deployments")]),e._v(" of K8s API to create a\n"),s("em",[e._v("Deployment")]),e._v(" object. Kubernetes creates a "),s("em",[e._v("Pod")]),e._v(" object based on Deployment. The\npod is assigned to a Worker Node. Kubelet on a worker node pulls the image and\nruns the container.")]),e._v(" "),s("p",[e._v("We can track a deployment with "),s("code",[e._v("k rollout status deployment my-deployment")]),e._v(".")]),e._v(" "),s("h3",{attrs:{id:"scaling-2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#scaling-2"}},[e._v("#")]),e._v(" Scaling")]),e._v(" "),s("p",[s("code",[e._v("kubectl scale deployment kiada --replicas=3")])]),e._v(" "),s("p",[e._v("It makes sense to skip "),s("code",[e._v("replicas")]),e._v(" setting from the manifest file of the\ndeploment. This way, when we reapply the manifest in the future, the "),s("code",[e._v("replicas")]),e._v("\nsetting will not be overwritten to the default again.")]),e._v(" "),s("h3",{attrs:{id:"ownership-2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#ownership-2"}},[e._v("#")]),e._v(" Ownership")]),e._v(" "),s("p",[e._v("Similarly to ReplicaSet, deletion of the Deploymeny auto-removes the ReplicaSet\nand the Pods. To circumvent that, we can use the "),s("code",[e._v("--cascade=orphan")]),e._v(" parameter -\nit will preserve both the Pods and ReplicaSet. In such a case, when we recreate\nthe deployment, the existing ReplicaSet/Pods are reused.")]),e._v(" "),s("h2",{attrs:{id:"pods-deletion"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#pods-deletion"}},[e._v("#")]),e._v(" Pods Deletion")]),e._v(" "),s("p",[e._v("When scaling down, K8s selects pods to delete based on some priorities:")]),e._v(" "),s("ul",[s("li",[e._v("pods that are not started")]),e._v(" "),s("li",[e._v("pods collocated on the same node with greater number of replicas")]),e._v(" "),s("li",[e._v("pods that lived shorter")]),e._v(" "),s("li",[e._v("pods with a greater number of restarts")])]),e._v(" "),s("p",[e._v("We can also influence the priority by applying "),s("code",[e._v("pod-deletion-cost")]),e._v(" annotation to\nspecific pods.")]),e._v(" "),s("h2",{attrs:{id:"logs"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#logs"}},[e._v("#")]),e._v(" Logs")]),e._v(" "),s("p",[e._v("There is no easy way to display logs from all the pods in a ReplicaSet/Deployment.\nInstead, we have to use label selector:")]),e._v(" "),s("div",{staticClass:"language-sh extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sh"}},[s("code",[e._v("k logs -l "),s("span",{pre:!0,attrs:{class:"token assign-left variable"}},[e._v("app")]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("myapp --prefix --all-containers\n")])])]),s("ul",[s("li",[s("code",[e._v("--prefix")]),e._v(" prefixes each log with the container that it came from")]),e._v(" "),s("li",[s("code",[e._v("--all-containers")]),e._v(" displays logs from all containers of the pods")])]),e._v(" "),s("h2",{attrs:{id:"strategies-of-deployment"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#strategies-of-deployment"}},[e._v("#")]),e._v(" Strategies of deployment")]),e._v(" "),s("p",[e._v("Here're the popular deployment strategies. Some of them are supported by K8s\nout-of-the-box, some are not.")]),e._v(" "),s("ul",[s("li",[s("strong",[e._v("Recreate")]),e._v(" - remove all pods, create all new pods")]),e._v(" "),s("li",[s("strong",[e._v("Rolling update")]),e._v(" - gradually replace pods")]),e._v(" "),s("li",[s("strong",[e._v("Canary")]),e._v(" - replace a small number of pods, if the new ones work well, replace the rest")]),e._v(" "),s("li",[s("strong",[e._v("A/B testing")]),e._v(" - create a small number of new pods, redirect some users\n(based on some condition) to the new pods.")]),e._v(" "),s("li",[s("strong",[e._v("Blue/Green")]),e._v(" - deploy new pods in parallel with the old ones. When the new\nones are ready, switch all the traffic to the new ones. Then delete the old\nPods.")]),e._v(" "),s("li",[s("strong",[e._v("Shadowing")]),e._v(" - deploy new pods in parallel with the old ones. Route all user\ntraffic to both versions, but return to the users just the responses from the\nold version. In the meanitme, observe the responses from the new ones to make\nsure that they work as expected.")])]),e._v(" "),s("p",[e._v("Only the first two strategies are supported by K8s. The other strategies require\nsome manual work.")]),e._v(" "),s("h3",{attrs:{id:"canary"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#canary"}},[e._v("#")]),e._v(" Canary")]),e._v(" "),s("p",[e._v("We can create a separate deployment with the new version and scale it to low\nnumber of replicas. The labels of the new pods should match the "),s("code",[e._v("selector")]),e._v(" of\nthe Service that was used for the old version. This way, the new pods are added\nto the pool ofw pods behind the service. If we see that the new version works, we\ncan go ahead and update the old deployment and delete the canary one.")]),e._v(" "),s("h3",{attrs:{id:"a-b-testing"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#a-b-testing"}},[e._v("#")]),e._v(" A/B Testing")]),e._v(" "),s("p",[e._v("Some Ingress controllers have this capability.")]),e._v(" "),s("h3",{attrs:{id:"blue-green"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#blue-green"}},[e._v("#")]),e._v(" Blue/Green")]),e._v(" "),s("p",[e._v("We create a separate deployment with the new versions (Green). We do not route\nany traffic at these. All the traffic still hits the old deployment (Blue). When\nwe're ready, we'd change the "),s("code",[e._v("selector")]),e._v(" of the Service to match the label\nconfigured in the Green deployment. Then, we delete the Blue deployment.")]),e._v(" "),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[e._v("TIP")]),e._v(" "),s("p",[e._v('We could use label values "green" and "blue" and switch from one to another in\nconsecutive updates. So, first we\'d start with "blue" and swith to "green". With\nsome next update we\'d switch from "green" to "blue". And so on.')])])],1)}),[],!1,null,null,null);"function"==typeof o&&o(n);t.default=n.exports}}]);