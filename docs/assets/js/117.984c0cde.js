(window.webpackJsonp=window.webpackJsonp||[]).push([[117],{570:function(e,t,s){"use strict";s.r(t);var n=s(31),a=Object(n.a)({},(function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[s("h1",{attrs:{id:"transport-control-protocol-tcp"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#transport-control-protocol-tcp"}},[e._v("#")]),e._v(" Transport Control Protocol (TCP)")]),e._v(" "),s("p",[e._v("Allows 2 endpoints to exchange data reliably ovet the network. It is a Transport\n(4th) layer of OSI.")]),e._v(" "),s("h2",{attrs:{id:"pros"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#pros"}},[e._v("#")]),e._v(" Pros")]),e._v(" "),s("ul",[s("li",[s("strong",[e._v("acknowledgment")]),e._v(" - parties have to confirm that the data got received.\nThanks to it, there is a guarantee of delivery")]),e._v(" "),s("li",[s("strong",[e._v("congestion control")]),e._v(" -")]),e._v(" "),s("li",[s("strong",[e._v("ordered packets")]),e._v(" - TCP will put all packets in order when they get received")])]),e._v(" "),s("h2",{attrs:{id:"cons"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#cons"}},[e._v("#")]),e._v(" Cons")]),e._v(" "),s("ul",[s("li",[s("strong",[e._v("larger packets")]),e._v(" - all of the control requires a lot of information to be\nsent over the wire. Because of that, it takes more bandwidth and it is slower\nthan UDP")]),e._v(" "),s("li",[s("strong",[e._v("stateful")]),e._v(" - restarting a server in the middle of some information\ntransmission will require the transmission to be started again.")]),e._v(" "),s("li",[s("strong",[e._v("server memory")]),e._v(" - because of connection being stateful, the server's memory\nget filled up with all the connections.")])]),e._v(" "),s("h2",{attrs:{id:"connection"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#connection"}},[e._v("#")]),e._v(" Connection")]),e._v(" "),s("p",[e._v("Connection between two computers is identified by:")]),e._v(" "),s("ul",[s("li",[e._v("source IP")]),e._v(" "),s("li",[e._v("source port")]),e._v(" "),s("li",[e._v("destination IP")]),e._v(" "),s("li",[e._v("destination port")])]),e._v(" "),s("p",[e._v("Both machines (clisent and server) stores information about the established\nconnection.")]),e._v(" "),s("h2",{attrs:{id:"connection-states"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#connection-states"}},[e._v("#")]),e._v(" Connection States")]),e._v(" "),s("p",[e._v("TCP has 11 possible connection states:")]),e._v(" "),s("ul",[s("li",[s("strong",[e._v("Closed")]),e._v(" - there's no connection yet")]),e._v(" "),s("li",[s("strong",[e._v("Established")]),e._v(" - connection open with 3-way handshake. We can begin to use it")]),e._v(" "),s("li",[s("strong",[e._v("Time Wait")]),e._v(" - We shut down the connection and we need to wait until we can\nuse it again (?)")]),e._v(" "),s("li",[e._v("...")])]),e._v(" "),s("h2",{attrs:{id:"tcp-handshake"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#tcp-handshake"}},[e._v("#")]),e._v(" TCP Handshake")]),e._v(" "),s("ol",[s("li",[s("p",[s("em",[e._v("Client")]),e._v(" sends "),s("strong",[e._v("SYN")]),e._v(" to the "),s("em",[e._v("Server")]),e._v(". the values being sent:")]),e._v(" "),s("ul",[s("li",[s("strong",[e._v("Initial Sequence Number")])]),e._v(" "),s("li",[e._v("Flags: SYN")]),e._v(" "),s("li",[e._v("Window size - max buffer size that the client can receive at once")]),e._v(" "),s("li",[e._v("TCP Options:\n"),s("ul",[s("li",[e._v("max segment size - MSS - (1460)")]),e._v(" "),s("li",[e._v('windows scale - 2^number to multiply the "window size" to get the\nactual size (0-14)')]),e._v(" "),s("li",[e._v("timestamps")]),e._v(" "),s("li",[e._v("SACK permitted (Selective ACKnowledgments)")])])])])]),e._v(" "),s("li",[s("p",[s("em",[e._v("Server")]),e._v(" sends "),s("strong",[e._v("SYN/ACK")]),e._v(" back to the "),s("em",[e._v("Client")]),e._v(". Values sent:")]),e._v(" "),s("ul",[s("li",[e._v("Flag: SYN and ACK (acknowledgement of Client's SYN)")]),e._v(" "),s("li",[e._v("Windows Size - max buffer size that the Server can receive at once")]),e._v(" "),s("li",[e._v("TCP Options:\n"),s("ul",[s("li",[e._v("max segment size - MSS - (1460)")]),e._v(" "),s("li",[e._v("SACK permitted")]),e._v(" "),s("li",[e._v('window scale - 2^number to multiply the "window size" to get the\nactual size (0-14)')])])])]),e._v(" "),s("p",[e._v("Based on the comparison of TCP Options of Client and Server, the actual\noptions are chosen (support for timestamps, SACK, etc.) so that both parties\ncan handle the communication. Some values can vary, like max segment size.")]),e._v(" "),s("p",[e._v("Sometimes the network might have further restrictions and, i.e. a router\nmight change the MSS to some lower value.")])]),e._v(" "),s("li",[s("p",[s("em",[e._v("Client")]),e._v(" sends "),s("strong",[e._v("ACK")]),e._v(" to the "),s("em",[e._v("Server")]),e._v(".")])])]),e._v(" "),s("h2",{attrs:{id:"receive-window-size"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#receive-window-size"}},[e._v("#")]),e._v(" Receive Window Size")]),e._v(" "),s("p",[e._v("Both the client and the server send their window sizes, which is an amount of\nspace in the buffer. Based on that the other side might decide how much data to\nsend in a packet. It's not uncommon to see client-side receive window size to be\nbigger than the server's receive window size. That's because usually clients\nreceive most of the data.")]),e._v(" "),s("p",[e._v("Every TCP connection has a separate receive window buffer. That's why the amount\nof connections is limited.")]),e._v(" "),s("p",[e._v("Client and server communciate their window sizes in every packet. This number\nmight descrease and increase as the buffer gets smaller or bigger.")]),e._v(" "),s("p",[e._v("Maximum window size is around 1GB.")]),e._v(" "),s("h3",{attrs:{id:"zero-window-size"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#zero-window-size"}},[e._v("#")]),e._v(" Zero Window Size")]),e._v(" "),s("p",[e._v('If the receiver of data is not able to keep up with the amount of data it\nreceives, the buffer might be filled up completely. In such case, the receiver\nwould send "0" as its receive window size. The server would wait for the client\nto report that there is some space. If client doesn\'t send anything like that,\nthe server can ask about it.')]),e._v(" "),s("p",[e._v("Such situation can happen when the receiver runs out of resources and it cannot\nefficiently handle the receive buffer.")]),e._v(" "),s("p",[e._v("Ideally, the window size should be set so that the communication does not stop\ndue to lack of buffer space and the client should send ACKs before the server\nstops transmitting bytes.")]),e._v(" "),s("h2",{attrs:{id:"retransmissions"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#retransmissions"}},[e._v("#")]),e._v(" Retransmissions")]),e._v(" "),s("h3",{attrs:{id:"time-based-standard-retransmission"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#time-based-standard-retransmission"}},[e._v("#")]),e._v(" Time-based (Standard Retransmission)")]),e._v(" "),s("p",[e._v("WHen a server transmits a packet of data, it sets a timer. If there is no ACK\nfrom the client by the time the timer runs out, the server will retransmit the\ndata.")]),e._v(" "),s("h3",{attrs:{id:"fast-retransmission"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#fast-retransmission"}},[e._v("#")]),e._v(" Fast Retransmission")]),e._v(" "),s("p",[e._v("It requires the SACK option. If the server sees 2-3 duplicate ACKa, it'll do a\nretransmission. This is caused by the network delay, when packets travel slow.")]),e._v(" "),s("h3",{attrs:{id:"spurious-retransmission"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#spurious-retransmission"}},[e._v("#")]),e._v(" Spurious Retransmission")]),e._v(" "),s("p",[e._v("Server resends a packet that has already been received. It might happen due to\nundelivered ACK, so that server thinks that the packed was not acknowledged.")])])}),[],!1,null,null,null);t.default=a.exports}}]);