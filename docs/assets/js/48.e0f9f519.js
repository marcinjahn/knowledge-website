(window.webpackJsonp=window.webpackJsonp||[]).push([[48],{519:function(t,s,e){"use strict";e.r(s);var a=e(22),n=Object(a.a)({},(function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"http-requests-in-angular"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#http-requests-in-angular"}},[t._v("#")]),t._v(" HTTP Requests in Angular")]),t._v(" "),e("p",[t._v("Angular comes with a built-in HTTP client. That's a difference compared to\nVue.js or React, which do not provide such tooling.")]),t._v(" "),e("p",[t._v("In order to use the built-in client, it needs to be imported into your module.\nYou need to import the "),e("code",[t._v("HttpClientModule")]),t._v(". With that in place, we can inject the\nHTTP client into our classes, kind of similar to how we'd do in\n"),e("RouterLink",{attrs:{to:"/programming/dotnet/http-client.html"}},[t._v(".NET")]),t._v(".")],1),t._v(" "),e("div",{staticClass:"language-ts extra-class"},[e("pre",{pre:!0,attrs:{class:"language-ts"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("export")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("MyComponent")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("constructor")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" httpClient"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" HttpClient"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),e("p",[t._v("The "),e("code",[t._v("HttpClient")]),t._v(" has methods corresponding to actual HTTP methods, e.g.:")]),t._v(" "),e("div",{staticClass:"language-ts extra-class"},[e("div",{staticClass:"highlight-lines"},[e("div",{staticClass:"highlighted"},[t._v(" ")]),e("br"),e("br"),e("br"),e("br"),e("div",{staticClass:"highlighted"},[t._v(" ")]),e("br"),e("br"),e("br"),e("br")]),e("pre",{pre:!0,attrs:{class:"language-ts"}},[e("code",[t._v("httpClient"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token generic-function"}},[e("span",{pre:!0,attrs:{class:"token function"}},[t._v("get")]),e("span",{pre:!0,attrs:{class:"token generic class-name"}},[e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("Person"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")])])]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'api.com'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("subscribe")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("response "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// read response...")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\nhttpClient"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token generic-function"}},[e("span",{pre:!0,attrs:{class:"token function"}},[t._v("post")]),e("span",{pre:!0,attrs:{class:"token generic class-name"}},[e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("Person"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")])])]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'api.com'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" name"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Marcin'")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("subsribe")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("response "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// read response...")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),e("p",[t._v("By default, all these methods return an "),e("code",[t._v("Observable")]),t._v(". We can use\n"),e("RouterLink",{attrs:{to:"/programming/angular/observables.html#operators"}},[t._v("operators")]),t._v(" on them. "),e("RouterLink",{attrs:{to:"/programming/angular/observables.html#error-handling"}},[t._v("Error\nhandling")]),t._v(" is also the same as in "),e("code",[t._v("Observables")]),t._v(".")],1),t._v(" "),e("div",{staticClass:"custom-block warning"},[e("p",{staticClass:"custom-block-title"},[t._v("WARNING")]),t._v(" "),e("p",[t._v("The requests will actually NOT be sent out if nothing subscribes to\nthe returned "),e("code",[t._v("Observable")]),t._v("!")]),t._v(" "),e("p",[t._v("We do not have to "),e("code",[t._v("unsubscribe()")]),t._v(" from the observable, it's managed\nby Angular.")])]),t._v(" "),e("div",{staticClass:"custom-block tip"},[e("p",{staticClass:"custom-block-title"},[t._v("Body")]),t._v(" "),e("p",[t._v("Angular will serialize objects that should be sent as a body of the request\nbehind the scenes.")])]),t._v(" "),e("p",[t._v("Each method accepts an options object, which is the last parameter. There, we\ncan set things such as headers, query parameters, etc.")]),t._v(" "),e("h2",{attrs:{id:"raw-response"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#raw-response"}},[t._v("#")]),t._v(" Raw Response")]),t._v(" "),e("p",[t._v("By default, the subscrition returned when inoking an HTTP request, resolves to\nan object representing the body of the response. In some cases, we might need\nmore data, like response headers or the status code. It can be configured via\nthe options object. Here's an example:")]),t._v(" "),e("div",{staticClass:"language-ts extra-class"},[e("pre",{pre:!0,attrs:{class:"language-ts"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" sub "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" httpClient"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("get")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"api.com"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    observe"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'response'")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 'body' by default")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),e("div",{staticClass:"custom-block tip"},[e("p",{staticClass:"custom-block-title"},[t._v("Events")]),t._v(" "),e("p",[t._v("We can also observe "),e("code",[t._v("'events'")]),t._v(" This one will bring multiple events informing\nabout the stage that the request is at (e.g. "),e("code",[t._v("Sent")]),t._v(", "),e("code",[t._v("Response")]),t._v(").")])]),t._v(" "),e("h2",{attrs:{id:"best-practices"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#best-practices"}},[t._v("#")]),t._v(" Best Practices")]),t._v(" "),e("h3",{attrs:{id:"services"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#services"}},[t._v("#")]),t._v(" Services")]),t._v(" "),e("p",[t._v("Instead of using "),e("code",[t._v("HttpClient")]),t._v(" in our components directly, it makes more sense to\nput that logic into some service. Such a service would work like a kind of\nrepository for a specific kind of data being fetched.")])])}),[],!1,null,null,null);s.default=n.exports}}]);