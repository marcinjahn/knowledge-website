(window.webpackJsonp=window.webpackJsonp||[]).push([[159],{661:function(e,s,t){"use strict";t.r(s);var n=t(22),a=Object(n.a)({},(function(){var e=this,s=e.$createElement,t=e._self._c||s;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h1",{attrs:{id:"selinux"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#selinux"}},[e._v("#")]),e._v(" SELinux")]),e._v(" "),t("p",[e._v("SELinux is an implementation of a MAC (Mandatory Access Control) mechanism. It\nextends the default DAC (Discretionary Access Control).")]),e._v(" "),t("p",[e._v("SELinux, fundamentally answers questions in a form")]),e._v(" "),t("blockquote",[t("p",[e._v("May {subject} do {action} to {object}?")])]),e._v(" "),t("p",[e._v("SELinux disallows access by default. Access will be granted only if it was\nexplicitly allowed. SELinux intercepts system calls and invokes configured\npolicies to answer the question as it was defined above.")]),e._v(" "),t("h2",{attrs:{id:"modes"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#modes"}},[e._v("#")]),e._v(" Modes")]),e._v(" "),t("p",[t("code",[e._v("sestatus")]),e._v(" command displays an overview of SELinux state.")]),e._v(" "),t("p",[e._v("SELinux can be in one of the modes:")]),e._v(" "),t("ul",[t("li",[e._v("disabled - SELinux is not enabled")]),e._v(" "),t("li",[e._v("enforcing - SELinux is enabled and actively allows/disallows access")]),e._v(" "),t("li",[e._v("permissive - SELinux is enabled, but allows all access. If some access is\ndeclined by policies, it will be logged, but access will still be granted.\nIt's good for troubleshooting.")])]),e._v(" "),t("div",{staticClass:"custom-block tip"},[t("p",{staticClass:"custom-block-title"},[e._v("Types")]),e._v(" "),t("p",[e._v("We can also mark some "),t("a",{attrs:{href:"#types"}},[e._v("types")]),e._v(" to use permissive mode, while the rest\nof the system will stick with the enforcing mode.")])]),e._v(" "),t("h2",{attrs:{id:"dac-vs-mac"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#dac-vs-mac"}},[e._v("#")]),e._v(" DAC vs MAC")]),e._v(" "),t("p",[e._v("DAC specifies access for users, group, and others for each file using READ,\nWRITE, EXECUTE flags ("),t("code",[e._v("rwxrwxrwx")]),e._v("). It's too simple for more complex scenarios.\nAdditionally, it allows a single user to modify access control rules of their\nfiles however they want. It might not be desired from the administration\nperspective.")]),e._v(" "),t("p",[e._v("SELinux uses contexts/labels and policies that act on them to define access\nrules for apps/users. An app cannot change its label (unless it has special\npermission to do so). This is why SELinux is called a "),t("strong",[e._v("mandatory")]),e._v(" access\ncontrol system.")]),e._v(" "),t("p",[e._v("DAC and MAC are used together in modern Linux distributions. First, DAC is\nchecked. If it allows access, MAC goes next. However, if DAC disallows access to\nsome resource, MAC is not being used, and the user/process is denied access\nupfront.")]),e._v(" "),t("h2",{attrs:{id:"labels"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#labels"}},[e._v("#")]),e._v(" Labels")]),e._v(" "),t("p",[e._v("In SELinux, every entity (application, user, file) has its own set of metadata -\na "),t("strong",[e._v("label")]),e._v(" (just one!). A label defines a security context. SELinux contexts\nhave the following fields:")]),e._v(" "),t("ul",[t("li",[t("strong",[e._v("user")]),e._v(" - ends with "),t("code",[e._v("_u")]),e._v(', e.g. "unconfined_u"')]),e._v(" "),t("li",[t("strong",[e._v("role")]),e._v(" - ends with "),t("code",[e._v("_r")]),e._v(', e.g. "user_r"')]),e._v(" "),t("li",[t("strong",[e._v("type")]),e._v(" - ends with "),t("code",[e._v("_t")]),e._v(', e.g. "httpd_t"')]),e._v(" "),t("li",[t("strong",[e._v("sensitivity")]),e._v(":\n"),t("ul",[t("li",[t("strong",[e._v("security level")]),e._v(" - s0 up to s16 (optional)")]),e._v(" "),t("li",[t("strong",[e._v("category set")]),e._v(" - cx - many categories can be applied on a resource")])])])]),e._v(" "),t("p",[e._v('The "ends with..." part above is just a convention. SELinux does not require\nsuch naming convention to be applied.')]),e._v(" "),t("div",{staticClass:"custom-block tip"},[t("p",{staticClass:"custom-block-title"},[e._v("ls")]),e._v(" "),t("p",[e._v("We can see labels on files with the "),t("code",[e._v("-Z")]),e._v(" flag of "),t("code",[e._v("ls")]),e._v(". Here's an example of an\noutput of "),t("code",[e._v("ls -laZ")]),e._v(" in "),t("code",[e._v("$HOME")]),e._v(":")]),e._v(" "),t("div",{staticClass:"language-sh extra-class"},[t("pre",{pre:!0,attrs:{class:"language-sh"}},[t("code",[e._v("‚ùØ "),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("ls")]),e._v(" -laZ\ntotal "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("64")]),e._v("\ndrwx------. "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("1")]),e._v(" mnj  mnj  unconfined_u:object_r:user_home_dir_t:s0   "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("780")]),e._v(" Dec "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("17")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("10")]),e._v(":58 "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v(".")]),e._v("\ndrwxr-xr-x. "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("1")]),e._v(" root root system_u:object_r:home_root_t:s0             "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("6")]),e._v(" Dec "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("15")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("15")]),e._v(":30 "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("..")]),e._v("\ndrwxr-xr-x. "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("1")]),e._v(" mnj  mnj  unconfined_u:object_r:user_home_t:s0       "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("216")]),e._v(" Dec "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("15")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("18")]),e._v(":16 .antidote\ndrwxr-xr-x. "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("1")]),e._v(" mnj  mnj  unconfined_u:object_r:user_home_t:s0       "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("414")]),e._v(" Dec "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("15")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("19")]),e._v(":02 Applications\n-rw-------. "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("1")]),e._v(" mnj  mnj  unconfined_u:object_r:user_home_t:s0     "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("10810")]),e._v(" Dec "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("15")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("19")]),e._v(":27 .bash_history\n-rw-r--r--. "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("1")]),e._v(" mnj  mnj  unconfined_u:object_r:user_home_t:s0        "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("18")]),e._v(" Sep "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("27")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("16")]),e._v(":25 .bash_logout\n-rw-r--r--. "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("1")]),e._v(" mnj  mnj  unconfined_u:object_r:user_home_t:s0       "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("141")]),e._v(" Sep "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("27")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("16")]),e._v(":25 .bash_profile\n-rw-r--r--. "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("1")]),e._v(" mnj  mnj  unconfined_u:object_r:user_home_t:s0       "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("689")]),e._v(" Dec "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("15")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("19")]),e._v(":33 .bashrc\ndrwx------. "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("1")]),e._v(" mnj  mnj  system_u:object_r:cache_home_t:s0          "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("856")]),e._v(" Dec "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("17")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("10")]),e._v(":48 .cache\ndrwxr-xr-x. "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("1")]),e._v(" mnj  mnj  unconfined_u:object_r:home_cert_t:s0        "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("20")]),e._v(" Dec "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("15")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("20")]),e._v(":43 .cert\n")])])]),t("p",[e._v("Similarly, users labels can be viewed with "),t("code",[e._v("id -Z")]),e._v(".")])]),e._v(" "),t("div",{staticClass:"custom-block tip"},[t("p",{staticClass:"custom-block-title"},[e._v("Domain")]),e._v(" "),t("p",[e._v("A security context's type attached to a process is sometimes called a\n"),t("strong",[e._v("domain")]),e._v(".")])]),e._v(" "),t("h3",{attrs:{id:"inheritance"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#inheritance"}},[e._v("#")]),e._v(" Inheritance")]),e._v(" "),t("p",[e._v("Process that was forked from another process inherits its parent's context. This\ndefault behavior can be changed via a special "),t("code",[e._v("type_transition")]),e._v(" policy. Such a\npolicy says what domain a new process should have when its parent process with\ntype "),t("em",[e._v("X")]),e._v(" executes a file with type "),t("em",[e._v("Y")])]),e._v(" "),t("p",[e._v("A file created within a directory with some context will inherit that context\n(again, unless there is some other rule defined).")]),e._v(" "),t("h3",{attrs:{id:"classes"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#classes"}},[e._v("#")]),e._v(" Classes")]),e._v(" "),t("p",[e._v("Labels can be put on different kinds of resources, and policies can also\ndifferentiate betweeen them. A type "),t("code",[e._v("sometype_t")]),e._v(" placed on a regular file and\nthe same type on a socket might result in different access decision.")]),e._v(" "),t("p",[e._v("Classes of resources that SELinux understands can be found in\n"),t("code",[e._v("/sys/fs/selinux/class")]),e._v(". Each class will have its own set of actions that they\nsupport. Eg. a regular file supports, among others:")]),e._v(" "),t("ul",[t("li",[e._v("read")]),e._v(" "),t("li",[e._v("rename")]),e._v(" "),t("li",[e._v("write")])]),e._v(" "),t("p",[e._v("(defined in "),t("code",[e._v("/sys/fs/selinux/class/file/perms/")]),e._v(")")]),e._v(" "),t("p",[e._v("Processes and users are just identified by their contexts.")]),e._v(" "),t("h3",{attrs:{id:"context-configuration-for-files"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#context-configuration-for-files"}},[e._v("#")]),e._v(" Context configuration for files")]),e._v(" "),t("p",[e._v("Files are not assigned contexts one-by-one. There are actually regex expressions\nthat control assignmnet of labels to the appropriate sets of files. (Almost) all\nthe file context assignments can be seen with "),t("code",[e._v("semanage fcontext -l")]),e._v(". The\n"),t("code",[e._v("restorecon")]),e._v(" sets contexts based on these configurations. Note that the\nconfigured contexts are not applied unless "),t("code",[e._v("restorecon")]),e._v(" is used! That's why\n"),t("a",{attrs:{href:"#inheritance"}},[e._v("inheritance")]),e._v(" takes precedence when files are being created, even\nif a specific rule is defined for a new file. Only after running "),t("code",[e._v("restorecon")]),e._v(",\nthe proper context is assigned to the new file.")]),e._v(" "),t("p",[e._v("As an example, new files within "),t("code",[e._v("$HOME")]),e._v(" are automatically given the correct\n"),t("code",[e._v("user_home_t")]),e._v(" type.")]),e._v(" "),t("h4",{attrs:{id:"customizable-types"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#customizable-types"}},[e._v("#")]),e._v(" Customizable Types")]),e._v(" "),t("p",[e._v("There's a list of types that, once applied, stay on files, even if\n"),t("code",[e._v("restorecon")]),e._v(" is used (unless you add the "),t("code",[e._v("-F")]),e._v(" flag). The list is at\n"),t("code",[e._v("/etc/selinux/*/contexts/customizable_types")]),e._v('. Customizable types allows us to\nretain some desired context even if the "normal" rules specify otherwise.')]),e._v(" "),t("p",[e._v("This feature is useful for files that do not have fixed locations and defining\nrules for their context would be difficult.")]),e._v(" "),t("p",[e._v("Normally, the list is defined by the Linux distribution and cannot be changed.")]),e._v(" "),t("h3",{attrs:{id:"types"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#types"}},[e._v("#")]),e._v(" Types")]),e._v(" "),t("p",[e._v("Most commonly, SELinux policies are built based on types ("),t("strong",[e._v("type enforcement")]),e._v(').\nA simple policy could define that processes with type "myapp_t" are allowed to\naccess resources typed "somedata_t". In reality, the latter could be applied to\nsome directory, e.g. '),t("code",[e._v("/etc/my_app_config")]),e._v(". This way, the process could access\nonly those files, even if DAC rules are much more permissive. The policies can\nbe much more complex though and they can use all the other information that\nlabels provide.")]),e._v(" "),t("h3",{attrs:{id:"roles"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#roles"}},[e._v("#")]),e._v(" Roles")]),e._v(" "),t("p",[e._v("Apps/users can have various roles. Based on them role-aware poliecies can be\nbuilt. Roles often define types that the role-assigned entity can be in. So, a\nsingle role might give some process a few types that it can be in (domains).\nThat is important during "),t("a",{attrs:{href:"#inheritance"}},[e._v("type transitions")]),e._v(". If a given process\ndoes not have a role with target type assigned to it, it will not be allowed to\ntransition.")]),e._v(" "),t("p",[e._v("We can display the list of allowed types for a given role with "),t("code",[e._v("seinfo -ruser_r -x")]),e._v(" ("),t("code",[e._v("user_r")]),e._v(" is the name of the role in this example).")]),e._v(" "),t("p",[e._v("A user can switch its role with "),t("code",[e._v("newrole -r somerole_r")]),e._v(". The supported roles are defined for each SELinux user.")]),e._v(" "),t("h3",{attrs:{id:"users"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#users"}},[e._v("#")]),e._v(" Users")]),e._v(" "),t("div",{staticClass:"custom-block warning"},[t("p",{staticClass:"custom-block-title"},[e._v("WARNING")]),e._v(" "),t("p",[e._v("SELinux user != Linux user. Instead, Linux users are mapped to SELInux users.\nMany Linux users may use the same SELinux user. That makes SELinux users more\nlike roles that can be assigne to Linux users.")])]),e._v(" "),t("p",[e._v("Users have specific roles assigned to them. A list of users with their roles can be\nseen with "),t("code",[e._v("semanage user -l")]),e._v(".")]),e._v(" "),t("hr"),e._v(" "),t("p",[e._v("Summarizing types, roles and users:")]),e._v(" "),t("ul",[t("li",[e._v("a user definition specifies what roles a user can be in")]),e._v(" "),t("li",[e._v("a role definition specifies what types a user can be in")]),e._v(" "),t("li",[e._v("a type is applied to a policy to get access (or be denied of it)")])]),e._v(" "),t("h2",{attrs:{id:"policies"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#policies"}},[e._v("#")]),e._v(" Policies")]),e._v(" "),t("p",[e._v("Policies are a set of rules that define the desired behavior of the system. They\nexplicitly allow some actions to be invoked by specified actors on specified\nresources. They are compiled into policy packages and are separate from the\nSELinux system itself (which lives in kernel). Therefore, they can be\ndynamically loaded and do not require kernel updates.")]),e._v(" "),t("p",[e._v("Policies are defined as follows:")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("allow {domain} {type}:{class} { {permissions} };\n")])])]),t("p",[e._v("And here's a real example:")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("allow auditd_t auditd_log_t:file { write };\n")])])]),t("h2",{attrs:{id:"unconfined"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#unconfined"}},[e._v("#")]),e._v(" Unconfined")]),e._v(" "),t("p",[e._v("Even though SELinux labels are applied to all processes, users and files, many\nof them are not actually subject to any restrictions. In order for a given user\nor app to be restricted by SELinux MAC, they need to fall under a confined\nlabeling. However, many users and apps are assigned an "),t("em",[e._v("unconfined_")]),e._v("* label.")]),e._v(" "),t("p",[e._v("For example, when I run this very website using Node, I can see the following\noutput of "),t("code",[e._v("ps -eZ | grep node")]),e._v(":")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("unconfined_u:unconfined_r:unconfined_t:s0-s0:c0.c1023 22642 pts/0 00:00:39 node\n")])])]),t("p",[e._v("The node process is running as an "),t("em",[e._v("unconfined_u")]),e._v(" user, it has "),t("em",[e._v("unconfined_r")]),e._v("\nrole, and it runs in an "),t("em",[e._v("unconfined_t")]),e._v(' domain. With all of that, we could\nactually say that node runs (almost) without any restrictions, and it is only\nsubject to "normal" DAC rules.')]),e._v(" "),t("p",[e._v("The idea behind it is that making everything (every app and user) fall under\nsome specific SELinux policy would be rather cumbersome. The assumption was made\nthat local users/apps should be trusted. However, the apps that are exposed to\nthe network (like web servers) should be confined, since vulnerabilities in\nthese apps could lead to the host system getting hijacked.")]),e._v(" "),t("p",[e._v("That's why in a typical Linux distro most entities will be unconfined.")]),e._v(" "),t("div",{staticClass:"custom-block tip"},[t("p",{staticClass:"custom-block-title"},[e._v("Distros")]),e._v(" "),t("p",[e._v("The fact that users are unconfined by default depends from distribution's setup.\nFor example, Fedora does exactly that and places typical users in unconfined\ndomain. Some other, more hardened distros, might do something else.")])]),e._v(" "),t("h2",{attrs:{id:"troubleshooting"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#troubleshooting"}},[e._v("#")]),e._v(" Troubleshooting")]),e._v(" "),t("p",[e._v("When some process is unable to access files due to SELinux, we can make sure that this is the case by:")]),e._v(" "),t("ol",[t("li",[e._v('Setting SELinux in permissive mode. If the access works then, its SELinux "fault"')]),e._v(" "),t("li",[e._v("Checking logs")])]),e._v(" "),t("p",[e._v("The latter can be done with one of the following commands:")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("ausearch -m AVC,USER_AVC,SELINUX_ERR,USER_SELINUX_ERR -ts recent")])]),e._v(" "),t("li",[t("code",[e._v("journalctl -t setroubleshoot")])]),e._v(" "),t("li",[t("code",[e._v("dmesg | grep -i -e type=1300 -e type=1400")])])]),e._v(" "),t("p",[e._v("It might be that we'll not see any log even though it was SELinux that prevented\naccess. It happens, because some events are silenced. To disable that, run\n"),t("code",[e._v("semodule -DB")]),e._v(" (shorthand for "),t("code",[e._v("semodule --disable_dontaudit --build")]),e._v(") and check\nlogs again. To enable silencing again run "),t("code",[e._v("semodule -B")]),e._v(" ("),t("code",[e._v("semodule --build")]),e._v(").")]),e._v(" "),t("p",[e._v("When an SELinux issue is identified, we can see more details with "),t("code",[e._v('sealert -l "*"')]),e._v(".")]),e._v(" "),t("h2",{attrs:{id:"resources"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#resources"}},[e._v("#")]),e._v(" Resources")]),e._v(" "),t("ul",[t("li",[t("a",{attrs:{href:"https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/8/html/using_selinux/getting-started-with-selinux_using-selinux",target:"_blank",rel:"noopener noreferrer"}},[e._v("Getting Started with SELinux (Red\nHat)"),t("OutboundLink")],1)]),e._v(" "),t("li",[t("a",{attrs:{href:"https://wiki.gentoo.org/wiki/SELinux",target:"_blank",rel:"noopener noreferrer"}},[e._v("SELinux in Gentoo Wiki"),t("OutboundLink")],1)])])])}),[],!1,null,null,null);s.default=a.exports}}]);