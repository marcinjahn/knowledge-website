(window.webpackJsonp=window.webpackJsonp||[]).push([[76],{478:function(t,e,a){"use strict";a.r(e);var s=a(31),r=Object(s.a)({},(function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"traits"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#traits"}},[t._v("#")]),t._v(" Traits")]),t._v(" "),a("p",[t._v("A "),a("strong",[t._v("trait")]),t._v(" is analogous to an interface or protocol from other languages. It enables types to advertise that they use some common behaviour.")]),t._v(" "),a("p",[t._v("All of Rust's operations are defined with traits. E.g., aaddition ("),a("code",[t._v("+")]),t._v(") is defined as the "),a("code",[t._v("std::ops::Add")]),t._v(" trait. Operators are just syntactic sugar for traits' methods.")]),t._v(" "),a("p",[a("code",[t._v("a + b")]),t._v(" = "),a("code",[t._v("a.add(b)")])]),t._v(" "),a("h2",{attrs:{id:"debug"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#debug"}},[t._v("#")]),t._v(" Debug")]),t._v(" "),a("p",[a("code",[t._v("#[derive(Debug)]")]),t._v(" before struct's definition makes that struct printable in debug mode ("),a("code",[t._v('print!("{}", instance)')]),t._v(").")]),t._v(" "),a("p",[t._v("Another way to debug print is with the use of "),a("code",[t._v("dbg!(&instance)")]),t._v(".")])])}),[],!1,null,null,null);e.default=r.exports}}]);