(window.webpackJsonp=window.webpackJsonp||[]).push([[8],{413:function(t,a,s){t.exports=s.p+"assets/img/memory.9dd38dce.png"},414:function(t,a,s){t.exports=s.p+"assets/img/pointer-in-memory.9611d464.png"},415:function(t,a,s){t.exports=s.p+"assets/img/multi-dimensional-arrays.65da6dbf.png"},416:function(t,a,s){t.exports=s.p+"assets/img/pointer-to-pointer.7695522c.png"},417:function(t,a,s){t.exports=s.p+"assets/img/array-in-argument.3238d951.png"},508:function(t,a,s){"use strict";s.r(a);var n=s(31),e=Object(n.a)({},(function(){var t=this,a=t.$createElement,n=t._self._c||a;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("h1",{attrs:{id:"pointers"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#pointers"}},[t._v("#")]),t._v(" Pointers")]),t._v(" "),n("p",[t._v("A pointer is a variable whose value is the address of some value.")]),t._v(" "),n("p",[t._v("The declaration looks as follows:")]),t._v(" "),n("div",{staticClass:"language-c extra-class"},[n("pre",{pre:!0,attrs:{class:"language-c"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("float")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("my_pointer\n")])])]),n("p",[t._v("The pointer is defined with the type of the value that it points to. This is\nhelpful, because:")]),t._v(" "),n("ul",[n("li",[t._v("we can do various arithmetic operations on pointers (e.g. "),n("code",[t._v("++")]),t._v(" will result in\nthe correct amount of bytes being added).")]),t._v(" "),n("li",[t._v("we can dereference pointers - the runtime needs to know how many bytes a given\npointer points to and how to interpret them (e.g. "),n("code",[t._v("int")]),t._v(" and "),n("code",[t._v("float")]),t._v(" both take\n4 bytes, but the same contents mean different values)")])]),t._v(" "),n("p",[t._v('The "star" sign may be placed adjacent to the type or to the name, or to both:')]),t._v(" "),n("div",{staticClass:"language-c extra-class"},[n("pre",{pre:!0,attrs:{class:"language-c"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("pointer"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" pointer2"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("pointer3"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),n("div",{staticClass:"custom-block tip"},[n("p",{staticClass:"custom-block-title"},[t._v("Smart Pointers in C++")]),t._v(" "),n("p",[t._v("C++ additionally has "),n("strong",[t._v("Smart Pointers")]),t._v(", which are like pointers with added\nreference counting. When the data pointed to by the pointer goes out of scope,\nthe value gets deleted automatically. Depending who you ask you might hear that\nthis is a form of garbage collection.")]),t._v(" "),n("p",[t._v("Smart pointers might be "),n("em",[t._v("shared")]),t._v(" or "),n("em",[t._v("unique")]),t._v(" - the latter one is a bit similar\nto the concept of "),n("RouterLink",{attrs:{to:"/programming/rust/ownership.html"}},[t._v("Ownership in Rust")]),t._v(" (it even\nhas a "),n("em",[t._v("move")]),t._v(" operation!).")],1)]),t._v(" "),n("h2",{attrs:{id:"use-cases"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#use-cases"}},[t._v("#")]),t._v(" Use-cases")]),t._v(" "),n("p",[t._v("Pointers are useful for:")]),t._v(" "),n("ul",[n("li",[t._v("passing data to functions by reference (e.g. "),n("code",[t._v("void increment(int *number)")]),t._v(")")]),t._v(" "),n("li",[t._v("allocating memory on the heap and keeping reference to it")])]),t._v(" "),n("h2",{attrs:{id:"memory"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#memory"}},[t._v("#")]),t._v(" Memory")]),t._v(" "),n("p",[t._v("Memory is organized as follows:")]),t._v(" "),n("p",[n("img",{attrs:{src:s(413),alt:""}})]),t._v(" "),n("p",[t._v("Each slot is addressed.")]),t._v(" "),n("p",[t._v("A pointer stores an address to some value in memory:")]),t._v(" "),n("p",[n("img",{attrs:{src:s(414),alt:""}})]),t._v(" "),n("p",[t._v("Pointer itself also has an address in memory, it also is some variable.\nIn the case above, "),n("code",[t._v("&p")]),t._v(" is "),n("code",[t._v("64")]),t._v(".")]),t._v(" "),n("h3",{attrs:{id:"variables"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#variables"}},[t._v("#")]),t._v(" Variables")]),t._v(" "),n("p",[t._v('When we define some variable, it will be assigned some address in memory. If we\ntry to print the value under that address, we will find some "random" data:')]),t._v(" "),n("div",{staticClass:"language-c extra-class"},[n("pre",{pre:!0,attrs:{class:"language-c"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" variable"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("pointer "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("variable"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("printf")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"%d"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("pointer"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 0 or some other trash value")]),t._v("\n\n")])])]),n("h2",{attrs:{id:"usage"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#usage"}},[t._v("#")]),t._v(" Usage")]),t._v(" "),n("div",{staticClass:"language-c extra-class"},[n("pre",{pre:!0,attrs:{class:"language-c"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" number "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("pointer"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\npointer "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("number"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// address where value 10 is stored")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Dereferencing")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" number_copy "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("pointer"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// returns value stored under the address that the pointer contains")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("pointer "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("20")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//updates the value of the `number` variable")]),t._v("\n")])])]),n("h3",{attrs:{id:"arrays"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#arrays"}},[t._v("#")]),t._v(" Arrays")]),t._v(" "),n("p",[t._v("Array can be treated as a pointer to "),n("strong",[t._v("the first element")]),t._v(" that it contains.")]),t._v(" "),n("div",{staticClass:"language-c extra-class"},[n("pre",{pre:!0,attrs:{class:"language-c"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" array"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("pointer "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" array"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// same as &array[0]")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("printf")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Address of array[0] = %x\\n"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" pointer"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("printf")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Value of array[0] = %x\\n"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("pointer"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\npointer"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("printf")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Address of array[1] = %x\\n"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" pointer"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("printf")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Value of array[1] = %x\\n"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("pointer"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),n("p",[t._v("Simply:")]),t._v(" "),n("ul",[n("li",[t._v("address: "),n("code",[t._v("&array[i]")]),t._v(" = "),n("code",[t._v("array + i")]),t._v(" = "),n("code",[t._v("pointer + i")]),t._v(";")]),t._v(" "),n("li",[t._v("value: "),n("code",[t._v("array[i]")]),t._v(" = "),n("code",[t._v("*(array + i)")]),t._v(" = "),n("code",[t._v("*(pointer + i)")])])]),t._v(" "),n("div",{staticClass:"custom-block danger"},[n("p",{staticClass:"custom-block-title"},[t._v("Array and pointer are not the same thing")]),t._v(" "),n("p",[t._v("An array variable cannot have its value set to some pointer!")]),t._v(" "),n("div",{staticClass:"language-c extra-class"},[n("pre",{pre:!0,attrs:{class:"language-c"}},[n("code",[t._v("array "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" pointer"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//wrong!")]),t._v("\n")])])]),n("p",[t._v("Therefore array variable is not the same as pointer.")])]),t._v(" "),n("h4",{attrs:{id:"multi-dimensional-arrays"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#multi-dimensional-arrays"}},[t._v("#")]),t._v(" Multi-dimensional Arrays")]),t._v(" "),n("div",{staticClass:"language-c extra-class"},[n("pre",{pre:!0,attrs:{class:"language-c"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" B"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("p "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" B"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ERROR! B is a pointer to an array, not to an int")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("p"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" B"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// OK; 3 is needed, because pointer arithmetics needs to "know"')]),t._v("\n                 "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// how many bytes to add in operations like p++")]),t._v("\n")])])]),n("p",[n("img",{attrs:{src:s(415),alt:""}})]),t._v(" "),n("p",[t._v("Pointer arithmetic examples:")]),t._v(" "),n("ul",[n("li",[t._v("Printing "),n("code",[t._v("B")]),t._v(" (or "),n("code",[t._v("&B[0]")]),t._v(") would return "),n("code",[t._v("400")]),t._v(" (the address of the first\nsub-array)")]),t._v(" "),n("li",[t._v("Printing "),n("code",[t._v("*B")]),t._v(" (or "),n("code",[t._v("B[0]")]),t._v(" or "),n("code",[t._v("&B[0][0]")]),t._v(") would return "),n("code",[t._v("400")]),t._v(" (the address of the\nfirst element in the first sub-array)")]),t._v(" "),n("li",[t._v("Printing "),n("code",[t._v("B+1")]),t._v(" (or "),n("code",[t._v("&B[1]")]),t._v(") would return "),n("code",[t._v("412")]),t._v(" (the address of the second\nsub-array)")]),t._v(" "),n("li",[t._v("Printing "),n("code",[t._v("*(B+1)")]),t._v(" (or "),n("code",[t._v("B[1]")]),t._v(" or "),n("code",[t._v("&B[1][0]")]),t._v(") would return "),n("code",[t._v("412")]),t._v(" (the address of\nthe first element in the second sub-array)")]),t._v(" "),n("li",[t._v("Printing "),n("code",[t._v("*(*B+1)")]),t._v(" (or "),n("code",[t._v("B[0][1]")]),t._v(") would return "),n("code",[t._v("3")]),t._v(".")]),t._v(" "),n("li",[n("code",[t._v("p++")]),t._v(" would move from "),n("code",[t._v("400")]),t._v(" to "),n("code",[t._v("412")])])]),t._v(" "),n("div",{staticClass:"custom-block tip"},[n("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),n("p",[n("code",[t._v("B")]),t._v(" is an address of the first sub-array.\n"),n("code",[t._v("*B")]),t._v(" is an address of the first element of the first sub-array.\n"),n("code",[t._v("**B")]),t._v(" is the value of the first sub-array.")])]),t._v(" "),n("div",{staticClass:"custom-block tip"},[n("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),n("p",[t._v("In general, "),n("code",[t._v("array + i")]),t._v(" moves us to the next element within the array. That way,\n"),n("code",[t._v("B")]),t._v(" being an array of arrays, "),n("code",[t._v("B + i")]),t._v(" moves us to the next sub-array.")])]),t._v(" "),n("h4",{attrs:{id:"pointer-to-pointer"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#pointer-to-pointer"}},[t._v("#")]),t._v(" Pointer to Pointer")]),t._v(" "),n("div",{staticClass:"language-c extra-class"},[n("pre",{pre:!0,attrs:{class:"language-c"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" x "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("p "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("  "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("a"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("q "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("p"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),n("p",[t._v("A "),n("code",[t._v("p")]),t._v(" points to "),n("code",[t._v("x")]),t._v(". "),n("code",[t._v("q")]),t._v(" points to "),n("code",[t._v("p")]),t._v(".")]),t._v(" "),n("p",[n("img",{attrs:{src:s(416),alt:""}})]),t._v(" "),n("p",[t._v("In this exmple we have even "),n("code",[t._v("int ***")]),t._v(" pointer (a pointer to pointer to pointer).")]),t._v(" "),n("p",[t._v('We can also dereference such "deep" pointers. For example:')]),t._v(" "),n("div",{staticClass:"language-c extra-class"},[n("pre",{pre:!0,attrs:{class:"language-c"}},[n("code",[n("span",{pre:!0,attrs:{class:"token function"}},[t._v("printf")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"%d"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("q"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// prints 6")]),t._v("\n")])])]),n("div",{staticClass:"custom-block tip"},[n("p",{staticClass:"custom-block-title"},[t._v("Arrays")]),t._v(" "),n("p",[t._v("Pointers to pointers are analogical to multi-dimensional arrays. "),n("code",[t._v("int **pointer")]),t._v("\nis analogical to "),n("code",[t._v("int array[][]")]),t._v(". "),n("code",[t._v("pointer")]),t._v(" points to a pointer that points to\nthe first element of the inner array.")]),t._v(" "),n("p",[t._v("In general, replacing "),n("code",[t._v("*")]),t._v(" with "),n("code",[t._v("[]")]),t._v(" is a helpful mental technique in\nunderstanding pointers.")]),t._v(" "),n("p",[n("code",[t._v("int (*p)[];")]),t._v(" - it is analogical to "),n("code",[t._v("int **p;")])])]),t._v(" "),n("h4",{attrs:{id:"arrays-as-arguments"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#arrays-as-arguments"}},[t._v("#")]),t._v(" Arrays as arguments")]),t._v(" "),n("p",[t._v("When a function accepts an array as an argument, a pointer to an array is\npassed:")]),t._v(" "),n("p",[n("img",{attrs:{src:s(417),alt:""}})]),t._v(" "),n("p",[t._v("This means that "),n("code",[t._v("sizeof(A)")]),t._v(" will be different in "),n("code",[t._v("main()")]),t._v(" (20 bytes) and in\n"),n("code",[t._v("SumOfElements()")]),t._v(" (4 bytes - just the size of a pointer to integer!).")]),t._v(" "),n("div",{staticClass:"custom-block tip"},[n("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),n("p",[n("code",[t._v("Function(int[] A)")]),t._v(" is treated the same as "),n("code",[t._v("Function(int *A)")]),t._v(". A typical C\n"),n("code",[t._v("main")]),t._v(" function has both "),n("code",[t._v("char *argv")]),t._v(" and "),n("code",[t._v("int argc")]),t._v(" as arguments - a pointer to\narguments and a count of arguments.")])]),t._v(" "),n("div",{staticClass:"custom-block tip"},[n("p",{staticClass:"custom-block-title"},[t._v("Multi-dimensional Arrays")]),t._v(" "),n("p",[t._v("A function that accepts a multi-dimensional array has to specify the count of\nelements in sub-arrays.")]),t._v(" "),n("p",[t._v("Examples:")]),t._v(" "),n("div",{staticClass:"language-c extra-class"},[n("pre",{pre:!0,attrs:{class:"language-c"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("func")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("a"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// size of int is known")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("func2")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("a"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// an array of arrays that contain 2 elements")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("func3")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("a"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// an array where each item is 3 arrays of 2 items each")]),t._v("\n")])])])]),t._v(" "),n("h3",{attrs:{id:"returning-a-pointer"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#returning-a-pointer"}},[t._v("#")]),t._v(" Returning a pointer")]),t._v(" "),n("p",[t._v("It's wrong to return a pointer to a variable on a stack:")]),t._v(" "),n("div",{staticClass:"language-c extra-class"},[n("pre",{pre:!0,attrs:{class:"language-c"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("Add")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" a"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" b"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" c "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" a "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" b"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("c"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" a "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" b "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("p "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("Add")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" b"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// we got a pointer to a sum")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("SomeOtherFunction")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// the value that p points to could be overwritten by the new stack frame!")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),n("p",[t._v("Instead, we should allocate the result on the "),n("RouterLink",{attrs:{to:"/programming/c/dynamic-memory.html"}},[t._v("heap")]),t._v(" and\nreturn a pointer to it.")],1),t._v(" "),n("h2",{attrs:{id:"function-pointers"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#function-pointers"}},[t._v("#")]),t._v(" Function Pointers")]),t._v(" "),n("div",{staticClass:"language-c extra-class"},[n("pre",{pre:!0,attrs:{class:"language-c"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("Add")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" a"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" b"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" a "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" b"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("p"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Add"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// pointer definition contains return type and a list of parameters")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" c  "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("p")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// executes Add via a pointer - adds 2 and 3")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),n("p",[t._v("A pointer "),n("code",[t._v("p")]),t._v(" points to a function "),n("code",[t._v("Add")]),t._v(".")]),t._v(" "),n("div",{staticClass:"custom-block tip"},[n("p",{staticClass:"custom-block-title"},[t._v("Ampersand and Start")]),t._v(" "),n("p",[t._v("Address of a function can be retrieved just by function's name (e.g. "),n("code",[t._v("Add")]),t._v(") or\nwith "),n("code",[t._v("&")]),t._v(" (e.g. "),n("code",[t._v("&Add")]),t._v(").")]),t._v(" "),n("p",[t._v("We can invoke a function via a pointer just by using the pointer as if it was a\nfunction (e.g. "),n("code",[t._v("p(2,3)")]),t._v(") or with a "),n("code",[t._v("*")]),t._v(" (e.g. "),n("code",[t._v("(*p)(2, 3)")]),t._v(").")])]),t._v(" "),n("h2",{attrs:{id:"references"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#references"}},[t._v("#")]),t._v(" References")]),t._v(" "),n("p",[n("a",{attrs:{href:"https://www.youtube.com/watch?v=zuegQmMdy8M",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://www.youtube.com/watch?v=zuegQmMdy8M"),n("OutboundLink")],1)])])}),[],!1,null,null,null);a.default=e.exports}}]);