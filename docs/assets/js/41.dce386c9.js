(window.webpackJsonp=window.webpackJsonp||[]).push([[41],{513:function(t,e,s){"use strict";s.r(e);var a=s(22),n=Object(a.a)({},(function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"compilation"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#compilation"}},[t._v("#")]),t._v(" Compilation")]),t._v(" "),s("p",[t._v("Our source files go through the following tools that act on them:")]),t._v(" "),s("ol",[s("li",[t._v("Preprocessor")]),t._v(" "),s("li",[t._v("Compiler")]),t._v(" "),s("li",[t._v("Assembler")]),t._v(" "),s("li",[t._v("Linker")])]),t._v(" "),s("p",[t._v("Let's explain the process based on a simple solution:")]),t._v(" "),s("tabs",[s("tab",{attrs:{name:"main.cpp"}},[s("div",{staticClass:"language-cpp extra-class"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[s("span",{pre:!0,attrs:{class:"token macro property"}},[s("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),s("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"source.hpp"')])]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])]),t._v(" "),s("tab",{attrs:{name:"add.cpp"}},[s("div",{staticClass:"language-cpp extra-class"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" b"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" a "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" b"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])]),t._v(" "),s("tab",{attrs:{name:"add.hpp"}},[s("div",{staticClass:"language-cpp extra-class"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" b"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])])])],1),t._v(" "),s("p",[t._v("We can compile the app with:")]),t._v(" "),s("div",{staticClass:"language-sh extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sh"}},[s("code",[t._v("g++ main.cpp add.cpp\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# or to change the binary name")]),t._v("\ng++ main.cpp add.cpp -o program\n")])])]),s("p",[t._v("The result is an executable file "),s("code",[t._v("a.out")]),t._v(".")]),t._v(" "),s("h2",{attrs:{id:"header-files"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#header-files"}},[t._v("#")]),t._v(" Header Files")]),t._v(" "),s("p",[t._v("First, it's good to understand the purpose of the header files. These files\ninclude declarations of various entities (like functions or global variables).\nThe actual implementations (defintitions) of these functions go into the\n"),s("code",[t._v(".cpp")]),t._v("/"),s("code",[t._v(".c")]),t._v(" files (although, the header files also might contain definitions,\nit's not illegal). The implementation might change over time, which requires\nrecompilation. The header files are less likely to change, since they only\ncontain the signatures of functions. In other files, we're not directly relying\non the "),s("code",[t._v(".cpp")]),t._v("/"),s("code",[t._v(".c")]),t._v(" files. Instead, we're relying on the header files.")]),t._v(" "),s("p",[t._v("Header files are then like interfaces that are expected to not change. We are\nsupposed to rely on them instead of on the actual implementations.")]),t._v(" "),s("p",[t._v("In our programs, we cannot refer to symbols that are not defined/declared. The\nsymbol can be defined in the current file, or in some other file that is\nincluded into the current files. Additionally, a given entity can only be\ndefined once. It's called the "),s("strong",[t._v("One Definition Rule")]),t._v(" in the C++ Standard.")]),t._v(" "),s("h2",{attrs:{id:"preprocessor"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#preprocessor"}},[t._v("#")]),t._v(" Preprocessor")]),t._v(" "),s("p",[t._v("The first step when compiling our program is the "),s("strong",[t._v("Preprocessing")]),t._v(". It handles\nall the lines that start with the "),s("code",[t._v("#")]),t._v(" (e.g., "),s("code",[t._v("#include")]),t._v(" or "),s("code",[t._v("#if")]),t._v(", macros\nsubstitution).")]),t._v(" "),s("p",[t._v("To get the output of the preprocessor, we can execute:")]),t._v(" "),s("div",{staticClass:"language-sh extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sh"}},[s("code",[t._v("gcc++ -E main.cpp\n")])])]),s("p",[t._v("Here's what we get on stdout:")]),t._v(" "),s("div",{staticClass:"language-cpp extra-class"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[t._v("# "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"main.cpp"')]),t._v("\n# "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"<built-in>"')]),t._v("\n# "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"<command-line>"')]),t._v("\n# "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"/usr/include/stdc-predef.h"')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),t._v("\n# "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"<command-line>"')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v("\n# "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"main.cpp"')]),t._v("\n# "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"source.hpp"')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" b"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n# "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"main.cpp"')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("If we included some common library like "),s("em",[t._v("iostream")]),t._v(", our file would become huge\nafter the preprocessing stage.")]),t._v(" "),s("p",[t._v("What preprocessor did in this case was just including the content of "),s("code",[t._v("add.hpp")]),t._v("\ndirectly into "),s("code",[t._v("main.cpp")]),t._v(".")]),t._v(" "),s("p",[t._v("The files that preprocessor creates have the "),s("code",[t._v(".i")]),t._v(" extension. They are sometimes\ncalled "),s("strong",[t._v("Translation Units")]),t._v(". These files are not generated by default, we\nrarely need them.")]),t._v(" "),s("h2",{attrs:{id:"compiler"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#compiler"}},[t._v("#")]),t._v(" Compiler")]),t._v(" "),s("p",[t._v("The result of preprocessing is handed over to the "),s("strong",[t._v("Compiler")]),t._v(". Compiler\nanalyzes the text of the code and builds a tree (like AST - Abstract Syntax\nTree).")]),t._v(" "),s("p",[t._v("We can dump out AST with:")]),t._v(" "),s("div",{staticClass:"language-sh extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sh"}},[s("code",[t._v("g++ -fdump-tree-all-graph -g main.cpp add.cpp\n")])])]),s("p",[t._v("The resulting "),s("code",[t._v(".dot")]),t._v(" files can be viewed.")]),t._v(" "),s("hr"),t._v(" "),s("p",[t._v("The next step of the compilation is the generation of the Assemby code.\nHere' how we can generate Assembly code:")]),t._v(" "),s("div",{staticClass:"language-sh extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sh"}},[s("code",[t._v("g++ -S add.cpp\n")])])]),s("p",[t._v("Here's the resulting "),s("code",[t._v("add.s")]),t._v(" file:")]),t._v(" "),s("div",{staticClass:"language-asm extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v('\t.arch armv8-a\n\t.file\t"add.cpp"\n\t.text\n\t.align\t2\n\t.global\t_Z3addii\n\t.type\t_Z3addii, %function\n_Z3addii:\n.LFB0:\n\t.cfi_startproc\n\tsub\tsp, sp, #16\n\t.cfi_def_cfa_offset 16\n\tstr\tw0, [sp, 12]\n\tstr\tw1, [sp, 8]\n\tldr\tw1, [sp, 12]\n\tldr\tw0, [sp, 8]\n\tadd\tw0, w1, w0\n\tadd\tsp, sp, 16\n\t.cfi_def_cfa_offset 0\n\tret\n\t.cfi_endproc\n.LFE0:\n\t.size\t_Z3addii, .-_Z3addii\n\t.ident\t"GCC: (Ubuntu 9.4.0-1ubuntu1~20.04.1) 9.4.0"\n\t.section\t.note.GNU-stack,"",@progbits\n')])])]),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),s("p",[t._v("This code was generated on an ARM64 machine.")])]),t._v(" "),s("h2",{attrs:{id:"assembler"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#assembler"}},[t._v("#")]),t._v(" Assembler")]),t._v(" "),s("p",[t._v("We can generate object files from our source code with:")]),t._v(" "),s("div",{staticClass:"language-sh extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sh"}},[s("code",[t._v("g++ -c main.c\ng++ -c add.c\n")])])]),s("p",[t._v("It will produce "),s("code",[t._v("main.o")]),t._v(" and "),s("code",[t._v("add.o")]),t._v(" files. These are blobs of machine code.\nThey need to be joined together (via the Linker) in a proper way to have the\nfinal executable.")]),t._v(" "),s("p",[t._v("We can explore what's inside of the "),s("code",[t._v(".o")]),t._v(" files with the "),s("strong",[t._v("objdump")]),t._v(" command:")]),t._v(" "),s("div",{staticClass:"language-sh extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sh"}},[s("code",[t._v("objdump -t add.o\n")])])]),s("p",[t._v("The result is:")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("add.o:     file format elf64-littleaarch64\n\nSYMBOL TABLE:\n0000000000000000 l    df *ABS*\t0000000000000000 add.cpp\n0000000000000000 l    d  .text\t0000000000000000 .text\n0000000000000000 l    d  .data\t0000000000000000 .data\n0000000000000000 l    d  .bss\t0000000000000000 .bss\n0000000000000000 l    d  .note.GNU-stack\t0000000000000000 .note.GNU-stack\n0000000000000000 l    d  .eh_frame\t0000000000000000 .eh_frame\n0000000000000000 l    d  .comment\t0000000000000000 .comment\n0000000000000000 g     F .text\t0000000000000020 _Z3addii\n")])])]),s("p",[t._v("The last line lists our function "),s("code",[t._v("add")]),t._v(".")]),t._v(" "),s("p",[t._v("In general, the "),s("code",[t._v(".o")]),t._v(" files contain:")]),t._v(" "),s("ul",[s("li",[t._v("data - the actual machine instructions, parts of our program. We will find\nthere references to entities defined in other translation units, these are\nplaceholders that will be filled by the Linker.")]),t._v(" "),s("li",[t._v('metadata - information needed by Linker to combine the object files into an\nactual executable. An example is the "link" between names of symbols and their\naddresses in memory.')])]),t._v(" "),s("h2",{attrs:{id:"linker"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#linker"}},[t._v("#")]),t._v(" Linker")]),t._v(" "),s("p",[t._v("Here's how to link the object files into an executable:")]),t._v(" "),s("div",{staticClass:"language-sh extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sh"}},[s("code",[t._v("g++ main.o source.o -o program "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# results in a.out")]),t._v("\n")])])]),s("p",[t._v('Linker "glues" together the '),s("code",[t._v(".o")]),t._v(" files. It also can link dynamic libraries\n("),s("code",[t._v(".so")]),t._v(' files) that may come form the "outside" of our solution (like some\nstandard libraries). An example of it could be "iostream".')]),t._v(" "),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[t._v(".so files")]),t._v(" "),s("p",[t._v("The "),s("code",[t._v(".so")]),t._v(" shared library might be generated with "),s("code",[t._v("gcc -shared -fPIC lib.c -o lib.so")]),t._v(".")]),t._v(" "),s("p",[t._v("Here's some information about "),s("a",{attrs:{href:"https://en.wikipedia.org/wiki/Soname",target:"_blank",rel:"noopener noreferrer"}},[t._v("soname"),s("OutboundLink")],1),t._v(".")])]),t._v(" "),s("div",{staticClass:"language-cpp extra-class"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[s("span",{pre:!0,attrs:{class:"token macro property"}},[s("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),s("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"add.hpp"')])]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token macro property"}},[s("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),s("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("<iostream>")])]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    std"),s("span",{pre:!0,attrs:{class:"token double-colon punctuation"}},[t._v("::")]),t._v("cout "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" std"),s("span",{pre:!0,attrs:{class:"token double-colon punctuation"}},[t._v("::")]),t._v("endl"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v('In this program, I\'m including "iostream" to make use of the '),s("code",[t._v("cout")]),t._v(" function.")]),t._v(" "),s("p",[t._v("After compilation, we can have a look at the dynamic libraries being linked to\nour program:")]),t._v(" "),s("div",{staticClass:"language-sh extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sh"}},[s("code",[t._v("ldd a.out\n")])])]),s("p",[t._v("The result is:")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("linux-vdso.so.1 (0x0000ffff8ff98000)\nlibstdc++.so.6 => /lib/aarch64-linux-gnu/libstdc++.so.6 (0x0000ffff8fd71000)\nlibc.so.6 => /lib/aarch64-linux-gnu/libc.so.6 (0x0000ffff8fbfe000)\nlibm.so.6 => /lib/aarch64-linux-gnu/libm.so.6 (0x0000ffff8fb54000)\n/lib/ld-linux-aarch64.so.1 (0x0000ffff8ff68000)\nlibgcc_s.so.1 => /lib/aarch64-linux-gnu/libgcc_s.so.1 (0x0000ffff8fb30000)\n")])])]),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[t._v("Other OSs")]),t._v(" "),s("p",[t._v("The "),s("code",[t._v(".so")]),t._v(" files are Linux dynamic libraries. Windows uses "),s("code",[t._v(".dll")]),t._v(", and macOS uses\n"),s("code",[t._v(".dylib")]),t._v(".")])]),t._v(" "),s("p",[t._v("When compiling programs, we can specify explicitly the dynamic libraries that we\nwant to link, with the "),s("code",[t._v("-l")]),t._v(" flag in g++.")])],1)}),[],!1,null,null,null);e.default=n.exports}}]);