(window.webpackJsonp=window.webpackJsonp||[]).push([[9],{404:function(t,e,s){t.exports=s.p+"assets/img/index-b-tree.b5266b36.png"},405:function(t,e,s){t.exports=s.p+"assets/img/non-clustered-index-columns-order.326977e5.png"},406:function(t,e,s){t.exports=s.p+"assets/img/or-predicate-needs-multiple-indexes.1bd8d7bb.png"},488:function(t,e,s){"use strict";s.r(e);var a=s(31),n=Object(a.a)({},(function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"sql-server-overview"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sql-server-overview"}},[t._v("#")]),t._v(" SQL Server Overview")]),t._v(" "),a("h2",{attrs:{id:"running-in-a-container"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#running-in-a-container"}},[t._v("#")]),t._v(" Running in a Container")]),t._v(" "),a("p",[t._v("On AMD64 PCs just use the sql-server docker image.")]),t._v(" "),a("p",[t._v("On M1 macs, use the following:")]),t._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[t._v("docker run --cap-add SYS_PTRACE -e "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'ACCEPT_EULA=1'")]),t._v(" -e "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'MSSQL_SA_PASSWORD=Qwerty1!'")]),t._v(" -p "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1433")]),t._v(":1433 --name azuresqledge -d mcr.microsoft.com/azure-sql-edge\n")])])]),a("p",[t._v("It's the SQL Server Edge - at this moment it's the only SQL Server variant\ncompiled for ARM64.")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("Password")]),t._v(" "),a("p",[t._v("Password needs to be min 8 chars long, 1 capital letter, 1 digit, 1 symbol.")])]),t._v(" "),a("h2",{attrs:{id:"structure"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#structure"}},[t._v("#")]),t._v(" Structure")]),t._v(" "),a("ul",[a("li",[t._v("RDMS:\n"),a("ul",[a("li",[t._v("Databases\n"),a("ul",[a("li",[t._v("Schemas (the default is "),a("em",[t._v("dbo")]),t._v(") - they act as namespaces, they are\nuseful for managing security\n"),a("ul",[a("li",[t._v("Tables\n"),a("ul",[a("li",[t._v("Columns")])])])])])])])])])]),t._v(" "),a("h2",{attrs:{id:"naming"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#naming"}},[t._v("#")]),t._v(" Naming")]),t._v(" "),a("p",[t._v("Popular Choices:")]),t._v(" "),a("ul",[a("li",[t._v("PascalCase")]),t._v(" "),a("li",[t._v("underscore_separated")]),t._v(" "),a("li",[t._v("Hybrid_Of_Above")])]),t._v(" "),a("h2",{attrs:{id:"types"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#types"}},[t._v("#")]),t._v(" Types")]),t._v(" "),a("ul",[a("li",[t._v("text:\n"),a("ul",[a("li",[a("em",[t._v("char(n)")]),t._v(" - fixed length - good when we know the length or when length is\nless than 3 (more optimized than varchar(n)) (non-Unicode)")]),t._v(" "),a("li",[a("em",[t._v("varchar(n)")]),t._v(" - variable length (up to "),a("em",[t._v("n")]),t._v(") (non-Unicode)")]),t._v(" "),a("li",[a("em",[t._v("nchar(n)")]),t._v(" - fixed length (Unicode)")]),t._v(" "),a("li",[a("em",[t._v("nvarchar(n)")]),t._v(" - variable length (up to "),a("em",[t._v("n")]),t._v(") (Unicode)")])])]),t._v(" "),a("li",[t._v("integers:\n"),a("ul",[a("li",[a("em",[t._v("tinyint")]),t._v(" (1 byte - 0-255)")]),t._v(" "),a("li",[a("em",[t._v("smallint")]),t._v(" (2 bytes)")]),t._v(" "),a("li",[a("em",[t._v("int")]),t._v(" (4 bytes)")]),t._v(" "),a("li",[a("em",[t._v("bigint")]),t._v(" (8 bytes)")])])]),t._v(" "),a("li",[t._v("decimals:\n"),a("ul",[a("li",[a("em",[t._v("decimal/numeric")]),t._v(" (5-17 bytes) - optionally, we can provide precision and\nscale")]),t._v(" "),a("li",[a("em",[t._v("money")]),t._v(" (8 bytes) - 4 decimal places")]),t._v(" "),a("li",[a("em",[t._v("smallmoney")]),t._v(" (4 bytes)")])])]),t._v(" "),a("li",[t._v("date/time:\n"),a("ul",[a("li",[a("em",[t._v("date")]),t._v(" (3 bytes)")]),t._v(" "),a("li",[a("em",[t._v("time")]),t._v(" - time precision might be adjusted")]),t._v(" "),a("li",[a("em",[t._v("datetime")]),t._v(" (8 bytes) - legacy type")]),t._v(" "),a("li",[a("em",[t._v("smalldatetime")]),t._v(" (4 bytes)")]),t._v(" "),a("li",[a("em",[t._v("datetime2")]),t._v(" (6-8 bytes) - adjustable precision, it's a good choice in\ngeneral")]),t._v(" "),a("li",[a("em",[t._v("datetimeoffset")]),t._v(" (10 bytes) - with timezone")])])]),t._v(" "),a("li",[t._v("boolean\n"),a("ul",[a("li",[a("em",[t._v("bit")])])])])]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("money")]),t._v(" "),a("p",[t._v("The "),a("em",[t._v("money")]),t._v(" and "),a("em",[t._v("smallmoney")]),t._v(" sizes are unique to SQL Server, so potentially it's\nnot the best choice.")])]),t._v(" "),a("h2",{attrs:{id:"operations"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#operations"}},[t._v("#")]),t._v(" Operations")]),t._v(" "),a("h3",{attrs:{id:"creating-a-db"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#creating-a-db"}},[t._v("#")]),t._v(" Creating a DB")]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("CREATE")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("DATABASE")]),t._v(" BobsShoes"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nGO\n")])])]),a("h3",{attrs:{id:"creating-a-table"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#creating-a-table"}},[t._v("#")]),t._v(" Creating a table")]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- set the right database context")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("USE")]),t._v(" BobsShoes"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nGO\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- schema (namespace)")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("CREATE")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SCHEMA")]),t._v(" Orders \n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("AUTHORIZATION")]),t._v(" dbo"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nGO\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("CREATE")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("TABLE")]),t._v(" Orders"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Customers "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n    CustID "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("IDENTITY")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("NOT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("NULL")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("CONSTRAINT")]),t._v(" PK_Customers_CustID "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("PRIMARY")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("KEY")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    CustName nvarchar"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("200")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("NOT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("NULL")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    CustStreet nvarchar"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("100")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("NOT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("NULL")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    CustCity nvarchar"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("100")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("NOT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("NULL")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    CustStateProv nvarchar"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("100")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("NOT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("NULL")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    CustCountry nvarchar"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("100")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("NOT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("NULL")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    CustPostalCode nvarchar"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("20")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("NOT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("NULL")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    SalutationID "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("NOT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("NULL")]),t._v(" \n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("CONSTRAINT")]),t._v(" FK_Customers_SaluationID_Salutations_SalutationID \n            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("REFERENCES")]),t._v(" Orders"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Salutations "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("SalutationID"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("CREATE")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("TABLE")]),t._v(" Orders"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Stock "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n    StockID "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("IDENTITY")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("NOT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("NULL")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("CONSTRAINT")]),t._v(" PK_Stock_StockID "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("PRIMARY")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("KEY")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("    \n    StockSKU "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("8")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("NOT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("NULL")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    StockSize "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("varchar")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("NOT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("NULL")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    StockName "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("varchar")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("100")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("NOT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("NULL")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    StockPrice "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("numeric")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("7")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("NOT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("NULL")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("CREATE")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("TABLE")]),t._v(" Orders"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Orders "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("  \n    OrderID "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("IDENTITY")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("NOT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("NULL")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("CONSTRAINT")]),t._v(" PK_Orders_OrderID "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("PRIMARY")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("KEY")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    OrderDate "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("date")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("NOT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("NULL")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    OrderRequestedDate "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("date")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("NOT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("NULL")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    OrderDeliveryDate datetime2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("NULL")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    CustID "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("NOT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("NULL")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("--,")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("CONSTRAINT")]),t._v(" FK_Orders_CustID_Customers_CustID \n            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FOREIGN")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("KEY")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("REFERENCES")]),t._v(" Orders"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Customers "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("CustID"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    OrderIsExpedited "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("bit")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("NOT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("NULL")]),t._v("\n "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("CREATE")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("TABLE")]),t._v(" Orders"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("OrderItems "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n    OrderItemID "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("IDENTITY")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("NOT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("NULL")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("CONSTRAINT")]),t._v(" PK_OrderItems_OrderItemID "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("PRIMARY")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("KEY")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    OrderID "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("NOT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("NULL")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("--,")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("CONSTRAINT")]),t._v(" FK_OrderItems_OrderID_Orders_OrderID\n            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FOREIGN")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("KEY")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("REFERENCES")]),t._v(" Orders"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Orders "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("OrderID"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    StockID "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("NOT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("NULL")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("--,")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("CONSTRAINT")]),t._v(" FK_OrderItems_StockID_Stock_StockID\n            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FOREIGN")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("KEY")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("REFERENCES")]),t._v(" Orders"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Stock "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("StockID"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    Quantity "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("smallint")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("NOT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("NULL")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    Discount "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("numeric")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("NOT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("NULL")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("ul",[a("li",[a("code",[t._v("TotalPrice")]),t._v(" is a calculated colum (the values can be persisted with the\n"),a("code",[t._v("PERSISTED")]),t._v(" keyword")]),t._v(" "),a("li",[a("code",[t._v("Orders.OrderTracking")]),t._v(" - "),a("code",[t._v("Orders")]),t._v(" is the schema, "),a("code",[t._v("OrdreTracking")]),t._v(" is table's\nname")])]),t._v(" "),a("h3",{attrs:{id:"inserting-rows"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#inserting-rows"}},[t._v("#")]),t._v(" Inserting rows")]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("INSERT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("INTO")]),t._v(" Orders"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Stock "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n        StockSKU"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" \n        StockName"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" \n        StockSize"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" \n        StockPrice"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("VALUES")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'OXFORD01'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Oxford'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'10_D'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("50.")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'BABYSHO1'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'BabySneakers'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'3'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("20.")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'HEELS001'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Killer Heels'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'7'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("75.")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("h2",{attrs:{id:"best-practices"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#best-practices"}},[t._v("#")]),t._v(" Best Practices")]),t._v(" "),a("h3",{attrs:{id:"normal-forms"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#normal-forms"}},[t._v("#")]),t._v(" Normal Forms")]),t._v(" "),a("p",[t._v("Normalization defines a set of rules that help to achieve a good design of a\ndatabase, reducing duplication and data anomalies.")]),t._v(" "),a("ol",[a("li",[t._v("1NF\n"),a("ul",[a("li",[t._v("one value per table cell (e.g. first and last names)")]),t._v(" "),a("li",[t._v("rows should be unique - primary key should be there")])])]),t._v(" "),a("li",[t._v("2NF\n"),a("ul",[a("li",[t._v("single-column primary keys")])])]),t._v(" "),a("li",[t._v("3NF\n"),a("ul",[a("li",[t._v("Column values should only depend upon the key - if any non-key column\ndepends on column(s) other than the key one, this data does not belong in\nthat table. For example, keeping patient's doctor phone in the Patients\ndatabase is not a good idea. There should be a separate table - Doctors -\nand patients should be linked ot appropriate doctors.")])])])]),t._v(" "),a("p",[t._v("There also other Normal Forms.")]),t._v(" "),a("h2",{attrs:{id:"constraints"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#constraints"}},[t._v("#")]),t._v(" Constraints")]),t._v(" "),a("p",[t._v("Constraints specify additional rules for the columns in our tables.")]),t._v(" "),a("div",{staticClass:"custom-block warning"},[a("p",{staticClass:"custom-block-title"},[t._v("Overwriting")]),t._v(" "),a("p",[t._v("We can't just overwrite existing constraint. First, we need to remove existing\nconstraint, and then we can create a new one.")])]),t._v(" "),a("h3",{attrs:{id:"null"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#null"}},[t._v("#")]),t._v(" NULL")]),t._v(" "),a("p",[t._v('We can "constraint" columns to allow NULLs. By default, the '),a("code",[t._v("NOT NULL")]),t._v(" constains\nis applied.")]),t._v(" "),a("h3",{attrs:{id:"default"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#default"}},[t._v("#")]),t._v(" DEFAULT")]),t._v(" "),a("p",[t._v("Provides a default value for a column. It is useful when "),a("code",[t._v("NOT NULL")]),t._v(" is applied\nas well.")]),t._v(" "),a("h3",{attrs:{id:"primary-keys"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#primary-keys"}},[t._v("#")]),t._v(" Primary Keys")]),t._v(" "),a("p",[t._v("Thy ensure uniqueness. It provides a backing index. That index can be\n"),a("strong",[t._v("clustered")]),t._v(" or "),a("strong",[t._v("unclustered")]),t._v(".")]),t._v(" "),a("h3",{attrs:{id:"unique"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#unique"}},[t._v("#")]),t._v(" UNIQUE")]),t._v(" "),a("p",[t._v("It ensures no duplicates of some column. It allows NULL (but only one!). They\nare backed by an index (clustered or unclustered (the default)).")]),t._v(" "),a("p",[t._v("The "),a("code",[t._v("UNIQUE")]),t._v(" constraint can be applied on multiple columns, meaning that the\ncombination of their values should be unique.")]),t._v(" "),a("h3",{attrs:{id:"foreign-keys"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#foreign-keys"}},[t._v("#")]),t._v(" Foreign Keys")]),t._v(" "),a("p",[t._v("The Foreign Key constraint links two tables together. We cannot create an entry\nthat refers to a non-existing entity. For example, we can't create an\n"),a("code",[t._v("OrderItem")]),t._v(" for an "),a("code",[t._v("Order")]),t._v(" that doesn't exist.")]),t._v(" "),a("div",{staticClass:"language-log extra-class"},[a("pre",{pre:!0,attrs:{class:"language-log"}},[a("code",[t._v("The INSERT statement conflicted with the FOREIGN KEY constraint \n"),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"FK_OrderItems_OrderID_Orders_OrderID"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v(" The conflict occurred in \ndatabase "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"BobsShoes"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" table "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Orders.Orders"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" column "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'OrderID'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n")])])]),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("Index")]),t._v(" "),a("p",[t._v("There is no automatic backing index created for foreign keys. It is recommended\nto create it though.")])]),t._v(" "),a("h4",{attrs:{id:"cascade"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#cascade"}},[t._v("#")]),t._v(" CASCADE")]),t._v(" "),a("p",[t._v("Entities referred to by a foreign key cannot be deleted. We can help ourselves\nwith the "),a("code",[t._v("CASCADE")]),t._v(" option. Whenever we delete an entity referenced by a foreign\nkey, the entity that refers to it will be deleted as well.")]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("div",{staticClass:"highlight-lines"},[a("br"),a("br"),a("br"),a("br"),a("br"),a("div",{staticClass:"highlighted"},[t._v(" ")]),a("br"),a("br")]),a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("CREATE")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("TABLE")]),t._v(" Orders"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("OrderItems"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n    StockID "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("NOT")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("NULL")]),t._v("\n        CONSTAINT FK_OrderItems_StockID\n            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FOREIGN")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("KEY")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("REFERENCES")]),t._v(" Orders"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Stock "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("StockID"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n                "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ON")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("DELETE")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("CASCADE")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("SET NULL")]),t._v(" "),a("p",[t._v("We could also use the "),a("code",[t._v("SET NULL")]),t._v(" option instead of "),a("code",[t._v("CASCADE")]),t._v(". That would set the\nvalue of a foreign key to NULL, instead of deleting the whole row.")])]),t._v(" "),a("h3",{attrs:{id:"check"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#check"}},[t._v("#")]),t._v(" CHECK")]),t._v(" "),a("p",[t._v("This constraint allows to define declarative various conditions on the\ntable-level or on the column-level. The conditions are boolean expressions.")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("SELECT")]),t._v(" "),a("p",[t._v("Conditions cannot contain "),a("code",[t._v("SELECT")]),t._v(". However, we can call a function that\nexecutes "),a("code",[t._v("SELECT")]),t._v(".")])]),t._v(" "),a("p",[t._v("Examples:")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("CHECK (LastName <> '')")]),t._v(" - "),a("code",[t._v("LastName")]),t._v(" value can't be empty")]),t._v(" "),a("li",[a("code",[t._v("CHECK (StockName <> StockDescription)")]),t._v(" - two columns can't have the same\nvalues")]),t._v(" "),a("li",[a("code",[t._v("CHECK (Currency IN ('PLN', 'EUR'))")])])]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("Namig")]),t._v(" "),a("p",[t._v("It's quite useful to provide custom names for the "),a("code",[t._v("CHECK")]),t._v(" constraints. In case\nif some condition is not satisfied, the error message will contain the name of\nthe constraint. System-generated names are not very informative.")])]),t._v(" "),a("h2",{attrs:{id:"views"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#views"}},[t._v("#")]),t._v(" Views")]),t._v(" "),a("p",[t._v("Views encapsulate queries. This way we can store some commonly used queries and\nuse them whenever they're needed. For example, we can create some complicated\nquery that joins multiple tables and hides unneded data.")]),t._v(" "),a("p",[t._v("Views can be seen as "),a("strong",[t._v("Virtual Tables")]),t._v(". Applications can invoke the views\ninstead of querying the actual tables. This way, backward compatibility can be\nkept. We could add some new column to a table, but make sure that the View still\nreturns the same set of data as before.")]),t._v(" "),a("p",[t._v("Columns returned in a View can have their names changed.")]),t._v(" "),a("h3",{attrs:{id:"updateable-views"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#updateable-views"}},[t._v("#")]),t._v(" Updateable Views")]),t._v(" "),a("p",[t._v("We can update data in tables via Views. However, any such operation can only\nreference columns of only one base table. There are a few other restrictions as\nwell.")]),t._v(" "),a("h2",{attrs:{id:"indexes"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#indexes"}},[t._v("#")]),t._v(" Indexes")]),t._v(" "),a("p",[t._v("We create indexes:")]),t._v(" "),a("ul",[a("li",[t._v("to enforce uniqueness on data (primary keys and unique constraints are backed\nby indexes)")]),t._v(" "),a("li",[t._v("to improve query performance - these need to be determined by our workload")]),t._v(" "),a("li",[t._v("for foreign keys")])]),t._v(" "),a("p",[t._v("DB data is stored in pages, sorted by clustered index. Then, these pages are put\ninto a B-Tree. All apges are in leaves. Then, a top row of each page is taken to\nbuild higher layers of the tree (intermediary layers + a root).")]),t._v(" "),a("p",[a("img",{attrs:{src:s(404),alt:""}})]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("Pages")]),t._v(" "),a("p",[t._v("Data is stored in pages. A single page is 8kb in size and contains multiple\nrows.")])]),t._v(" "),a("h3",{attrs:{id:"clustered-index"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#clustered-index"}},[t._v("#")]),t._v(" Clustered Index")]),t._v(" "),a("p",[t._v("The data (rows) in the table is sorted using the index column. It's the default\nbacking index for Primary Keys. There is no separate storage of index.")]),t._v(" "),a("div",{staticClass:"custom-block warning"},[a("p",{staticClass:"custom-block-title"},[t._v("WARNING")]),t._v(" "),a("p",[t._v("There can be max one clustered index in a table, because there can be only one\nway of sorting the data.")])]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("Heap")]),t._v(" "),a("p",[t._v("A table without clustered index is a "),a("strong",[t._v("heap")]),t._v(" (why?)")])]),t._v(" "),a("h4",{attrs:{id:"guidelines"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#guidelines"}},[t._v("#")]),t._v(" Guidelines")]),t._v(" "),a("p",[t._v("Ideally, a clustered index values should be "),a("strong",[t._v("ever-increasing")]),t._v(". That way, the\norganization of existing data does not need to change when new entries are being\nadded (page splits). It should also be "),a("strong",[t._v("unchanging")]),t._v(", for the same reasons\n(changing the index value causes a delete-insert operation pair on the row).\nAdditionally, the index should be "),a("strong",[t._v("narrow")]),t._v(" (the less bytes the better). This\nway, there will be less intermediary pages.")]),t._v(" "),a("h3",{attrs:{id:"non-clustered-index"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#non-clustered-index"}},[t._v("#")]),t._v(" Non-Clustered Index")]),t._v(" "),a("p",[t._v("It doesn't sort the rows. It's stored in a different place, separately from the\ntable (similar to book index). It is stored as B-Tree.")]),t._v(" "),a("p",[t._v("When querying data, first DB checks the index, and then it goes to retrieve the\ndata at the specified address. Clustered Index uses the data directly, so it's\nfaster.")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("Clustered Index Comparison")]),t._v(" "),a("p",[t._v("Opposed to clustered index, there can be many non-clustered indexes per table\n(max 999).")]),t._v(" "),a("p",[t._v("By default, the non-clustered index does not contain other columns than the ones\nbeing indexed. Clustered index contains all columns, becasue that index is the\ndata itself. However, non-clustered index duplicates information, since it is\nstored separately from the data.")])]),t._v(" "),a("p",[t._v("The index is always in sync with the data (the same amount of rows).")]),t._v(" "),a("h4",{attrs:{id:"multiple-columns"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#multiple-columns"}},[t._v("#")]),t._v(" Multiple Columns")]),t._v(" "),a("p",[t._v("Here's how to create an index:")]),t._v(" "),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("CREATE")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("NONCLUSTERED")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("INDEX")]),t._v(" inx_TransactionTypes "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ON")]),t._v(" dbo"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Transactions")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("TransactionType"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("p",[t._v('The order of columns in the index matters. If our index contains columns\n"Amount" and "TransactionType", the index will be created in a way that rows are\nsorted by "Amount". We can quickly query data by the "Amount" column. However,\nquerying on "TransactionType" will require the DB to scan throught the entire\nindex data structure to find appropriate rows.')]),t._v(" "),a("p",[t._v("Here's an example:")]),t._v(" "),a("p",[a("img",{attrs:{src:s(405),alt:""}})]),t._v(" "),a("p",[t._v('Our index has been created optimally for the queries that we want to use. The\norder of the columns is: "TransactionType", "Amount". If we used a reversed\norder, the green query would still work fine, however, the purple one would need\nto scan all the rows.')]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("Ideal Design")]),t._v(" "),a("p",[t._v("Ideally, we want to have as few indexes as possible supporting as many queries\nas possible.")])]),t._v(" "),a("p",[t._v("For queries that include inequality predicates, the following applies:")]),t._v(" "),a("ul",[a("li",[t._v("columns using equality predicates should come before inequality ones in the\nindex")]),t._v(" "),a("li",[t._v("multiple inquality columns are hard to index well")])]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("Merge Join")]),t._v(" "),a("p",[t._v("If we have multiple single-columns indexes, DB can use them both for a single\nquery (if it involves multiple columns) and merge-join the results.")]),t._v(" "),a("p",[t._v("It's still better to use an index that includes multiple columns.")])]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("AND vs OR")]),t._v(" "),a("p",[t._v("The AND queries can often be satisfied with a single index on multiple columns.\nThe OR queries run optimally when there are multiple indexes, for each of the\nqueried columns.")]),t._v(" "),a("p",[t._v("The difference comes from the fact that each condition in the AND builds on top\nof the previous result. In the OR case, each condition has to work on the entire\ndataset, and they are joined in the end.")]),t._v(" "),a("p",[a("img",{attrs:{src:s(406),alt:""}})]),t._v(" "),a("p",[t._v('The green part is served well by the index, the purple part needs to scan the\nwhole index. If there was a separate index for "TransactionType", it would be\nfaster.')])]),t._v(" "),a("h4",{attrs:{id:"tips"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tips"}},[t._v("#")]),t._v(" Tips")]),t._v(" "),a("ul",[a("li",[t._v("Non-clustered Index can include additional columns than the ones being\nindexed. A "),a("code",[t._v("SELECT")]),t._v(" statement can filter based on indexed columns, but it\nmight require some additional columns to be returned. Including these columns\nin the index itself skips the step where the DB engine would have to lookup\nthis data in the actual raw data files.")]),t._v(" "),a("li",[t._v("The index can be a "),a("strong",[t._v("Filtered Index")]),t._v(' - this way, not all of the rows are\nindexed, but only the ones that satisfy some filter. It makes the index\nsmaller. E.g., it could be useful for tables that use the "soft-deletes"\ntechnique. We could skip such entities from the index if our queries should\nnot bother with them.')])])])}),[],!1,null,null,null);e.default=n.exports}}]);