(window.webpackJsonp=window.webpackJsonp||[]).push([[17],{427:function(t,e,s){t.exports=s.p+"assets/img/player-and-finish-line.66d8c2f1.png"},428:function(t,e,s){t.exports=s.p+"assets/img/sprite-shape-collision.1d39dc56.png"},562:function(t,e,s){"use strict";s.r(e);var a=s(22),n=Object(a.a)({},(function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"frontmatter-title"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#frontmatter-title"}},[t._v("#")]),t._v(" "+t._s(t.$frontmatter.title))]),t._v(" "),a("p",[t._v("To run Unity, you need to install Unity Hub, which is a manager of Unity\ninstallations. Through the Unity Hub, install the lateset release of Unity, and\nrun.")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("Apple Silicon")]),t._v(" "),a("p",[t._v("On Apple Silicon macs, for some reason, Intel binary is being downloaded. It's\nbetter to manually select the Apple Silicon version.")])]),t._v(" "),a("h2",{attrs:{id:"hierarchy"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#hierarchy"}},[t._v("#")]),t._v(" Hierarchy")]),t._v(" "),a("p",[t._v("Game objects create a hierarchy. We can place items under other items. Then, the\npositioning of the child items is relative to their parents.")]),t._v(" "),a("h2",{attrs:{id:"scripting"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#scripting"}},[t._v("#")]),t._v(" Scripting")]),t._v(" "),a("p",[t._v("Scripts can be added to the Assets, and they should be attached to some game\nobject to work.")]),t._v(" "),a("h2",{attrs:{id:"collisions"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#collisions"}},[t._v("#")]),t._v(" Collisions")]),t._v(" "),a("p",[t._v("If we want to collide with some object, both objects should have a "),a("strong",[t._v("Collider")]),t._v(".\nAdditionally, to make the objects move on collision, they need to gave\n"),a("strong",[t._v("Rigidbody")]),t._v(". Rigidbody is what adds physics to the objects. One of its\nproperties is "),a("strong",[t._v("Gravity")]),t._v(". In 2D top-down games, Gravity should be brought down\nto 0, otherwise the Rigidbody will cause the game object to fall down.")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("Physics Sprite")]),t._v(" "),a("p",[t._v("Instead of creating a Sprite, attaching a Collider and Rigidbody, we can create\na Physics Dynamic Sprite, which out-of-the box is a Circle with a Collider and\nRigidbody.")])]),t._v(" "),a("div",{staticClass:"custom-block warning"},[a("p",{staticClass:"custom-block-title"},[t._v("Falling Through")]),t._v(" "),a("p",[t._v("The default Rigidbody's Collision Detection is "),a("strong",[t._v("Discrete")]),t._v(". It's better for\nperformance, but it might cause the collision detection to fail sometimes\n(when?). A fix for that is to change the detection to "),a("strong",[t._v("Continuous")]),t._v(".")])]),t._v(" "),a("h3",{attrs:{id:"collision-trigger"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#collision-trigger"}},[t._v("#")]),t._v(" Collision Trigger")]),t._v(" "),a("p",[t._v("Sometimes we don't need physics to be involved in a collision. All we might want\nis to know that some object touched another. An example of that is a player\nreaching the finish line")]),t._v(" "),a("p",[a("img",{attrs:{src:s(427),alt:""}})]),t._v(" "),a("p",[t._v("For such cases, a Collider has the "),a("strong",[t._v("isTrigger")]),t._v(" property. A proper script\nbehind object with such a collider will fire anytime another collider touches\nthis collider.")]),t._v(" "),a("div",{staticClass:"language-cs extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cs"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("FinishLine")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token type-list"}},[a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("MonoBehaviour")])]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token return-type class-name"}},[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")])]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("OnTriggerEnter2D")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Collider2D")]),t._v(" other"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        Debug"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Finish Line reached!"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("h2",{attrs:{id:"timing"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#timing"}},[t._v("#")]),t._v(" Timing")]),t._v(" "),a("p",[t._v("The spped of movement of objects should not rely on FPS of the host machine. We\nshould multiply the object's translation by the "),a("code",[t._v("Time.deltaTime")]),t._v(", which is the\ntime frame. This way, the intended translation will be properly divided for each\nframe giving us the desired translation after each second.")]),t._v(" "),a("h2",{attrs:{id:"units"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#units"}},[t._v("#")]),t._v(" Units")]),t._v(" "),a("p",[t._v('Unity does not have any particuar unit system. While designing our games, we\nshould come up with our own way understanding these units. One way is to treat 1\nUnity unit as 1 meter. This way, the grid on the screen divides the world in 1m\nx 1m squares. We can scale game objects with regard to that system. The same\nway, we can calculate speed of objects, to make things look and behave\n"naturally".')]),t._v(" "),a("h2",{attrs:{id:"sprite-shape"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sprite-shape"}},[t._v("#")]),t._v(" Sprite Shape")]),t._v(" "),a("p",[t._v("Sprite Shape is perfect for creating ground in 2D platformer games. It allows us\nto modify the shape of the land easily with vector graphics tools. We sould add\nan "),a("strong",[t._v("Edge Collider")]),t._v(" to it, and it will automatically follow the Sprite Shape's\nshape. Sometimes it's necessary to adjust the offset of the Shape Controller to\nhave the collision exactly where we want it to be.")]),t._v(" "),a("p",[a("img",{attrs:{src:s(428),alt:""}})]),t._v(" "),a("h2",{attrs:{id:"camera-follow"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#camera-follow"}},[t._v("#")]),t._v(" Camera Follow")]),t._v(" "),a("p",[t._v("To have the Camera following the plater, we can do one of:")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("script the camera position to be updated in every frame to player's position")]),t._v(" "),a("div",{staticClass:"language-cs extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cs"}},[a("code",[t._v("transform"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("position "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" _thingToFollow"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("transform"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("position "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constructor-invocation class-name"}},[t._v("Vector3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// we're adding -10 on Z axis to keep the camera away from the game world")]),t._v("\n")])])])]),t._v(" "),a("li",[a("p",[t._v("use "),a("strong",[t._v("Cinemachine")]),t._v(" - a package for camera management")])])])])}),[],!1,null,null,null);e.default=n.exports}}]);