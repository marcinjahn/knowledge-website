(window.webpackJsonp=window.webpackJsonp||[]).push([[67],{543:function(e,t,a){"use strict";a.r(t);var s=a(22),n=Object(s.a)({},(function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h1",{attrs:{id:"enumerables-in-net"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#enumerables-in-net"}},[e._v("#")]),e._v(" Enumerables in .NET")]),e._v(" "),a("h2",{attrs:{id:"ienumerable-and-ienumerator"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#ienumerable-and-ienumerator"}},[e._v("#")]),e._v(" IEnumerable and IEnumerator")]),e._v(" "),a("p",[e._v("Collections in .NET implement "),a("code",[e._v("IEnumerable")]),e._v(". This interface has just one method:\n"),a("code",[e._v("GetEnumerator()")]),e._v(". It returns an implementation of "),a("code",[e._v("IEnumerator()")]),e._v(".")]),e._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[e._v("Generics")]),e._v(" "),a("p",[e._v("Normally, we don't use non-generic "),a("code",[e._v("IEnurable")]),e._v("/"),a("code",[e._v("IEnumerator")]),e._v(" nowadays, but I'll\nbe using these shorter interface names here for simplicity.")])]),e._v(" "),a("p",[a("code",[e._v("IEnumerator")]),e._v(" allows to\n("),a("a",{attrs:{href:"https://docs.microsoft.com/en-us/dotnet/api/system.collections.ienumerator?view=net-6.0",target:"_blank",rel:"noopener noreferrer"}},[e._v("MSDN"),a("OutboundLink")],1),e._v("):")]),e._v(" "),a("ul",[a("li",[e._v("move between elements in the collection")]),e._v(" "),a("li",[e._v("read the current element")]),e._v(" "),a("li",[e._v("reset state")])]),e._v(" "),a("p",[e._v("Why do we even need "),a("code",[e._v("IEnumerable")]),e._v(" and don't just implement "),a("code",[e._v("IEnumerator")]),e._v(" in\nevery collection type? That's because we want to be able to enumerate a single\ncollection by multiple actors. "),a("code",[e._v("IEnumerator")]),e._v(" has a state. We can't use the same\ninstance of it from two different services, because none of these services would\nget a full picture of the collection. Instead, each service should retrieve its\nown copy of "),a("code",[e._v("IEnumerator")]),e._v(" (via "),a("code",[e._v("IEnumerable")]),e._v(") and use it.")]),e._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[e._v("Length")]),e._v(" "),a("p",[e._v("An important characteristic of the "),a("code",[e._v("IEnumerable")]),e._v(" is that its length is unknown.\nThis is quite useful in scenarios where the data source is huge and counting its\nlength would be a huge overhead.")]),e._v(" "),a("p",[e._v("The source of data could be actually infinite, for example it could be a source\nof random numbers. In such a case, the "),a("code",[e._v("IEnumerator")]),e._v(" implementation would\nprobably not need to keep the reference to its source "),a("code",[e._v("IEnumerable")]),e._v(", as it\nusually happens with typical collections, like the "),a("code",[e._v("Array")]),e._v(". You will find a\nsimilar example below.")])]),e._v(" "),a("h3",{attrs:{id:"examples"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#examples"}},[e._v("#")]),e._v(" Examples")]),e._v(" "),a("h4",{attrs:{id:"array"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#array"}},[e._v("#")]),e._v(" Array")]),e._v(" "),a("p",[e._v("An example of an "),a("code",[e._v("IEnumerable")]),e._v(" is an "),a("code",[e._v("Array")]),e._v(".\n"),a("a",{attrs:{href:"https://github.com/microsoft/referencesource/blob/master/mscorlib/system/array.cs#L1268",target:"_blank",rel:"noopener noreferrer"}},[e._v("Here"),a("OutboundLink")],1),e._v("\nwe can see that it implements "),a("code",[e._v("IEnumerable.GetEnumerator()")]),e._v(". The enumerator\nitself can be found\n"),a("a",{attrs:{href:"https://github.com/microsoft/referencesource/blob/5697c29004a34d80acdaf5742d7e699022c64ecd/mscorlib/system/array.cs#L2597",target:"_blank",rel:"noopener noreferrer"}},[e._v("here"),a("OutboundLink")],1),e._v(".\nIt keeps reference to the "),a("code",[e._v("Array")]),e._v(". One of its components is the "),a("code",[e._v("Current")]),e._v("\nproperty. All it does is it returns the element at the current "),a("code",[e._v("_index")]),e._v(". The\n"),a("a",{attrs:{href:"https://github.com/microsoft/referencesource/blob/5697c29004a34d80acdaf5742d7e699022c64ecd/mscorlib/system/array.cs#L2665",target:"_blank",rel:"noopener noreferrer"}},[e._v("MoveNext()"),a("OutboundLink")],1),e._v("\nis also there. It basically increments the "),a("code",[e._v("_index")]),e._v(".")]),e._v(" "),a("h4",{attrs:{id:"infinite-enumerator"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#infinite-enumerator"}},[e._v("#")]),e._v(" Infinite Enumerator")]),e._v(" "),a("p",[e._v("This is a simple enumartor that just returns consecutive numbers, forever (well,\nuntil it overflows):")]),e._v(" "),a("div",{staticClass:"language-cs extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cs"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("public")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("class")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("InfiniteEnumerable")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token type-list"}},[a("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("IEnumerable")])]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("public")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token return-type class-name"}},[e._v("IEnumerator")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("GetEnumerator")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=>")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("new")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token constructor-invocation class-name"}},[e._v("InfiniteEnumerator")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("public")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("class")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("InfiniteEnumerator")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token type-list"}},[a("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("IEnumerator")])]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("private")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("int")])]),e._v(" _current "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[e._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("public")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token return-type class-name"}},[a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("object")])]),e._v(" Current "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("get")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("private")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("set")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=>")]),e._v(" _current"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("public")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token return-type class-name"}},[a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("bool")])]),e._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("MoveNext")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n        _current"),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("++")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n")])])]),a("p",[e._v("Here's how we'd use it:")]),e._v(" "),a("div",{staticClass:"language-cs extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cs"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("foreach")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("var")])]),e._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("value")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("in")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("new")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token constructor-invocation class-name"}},[e._v("InfiniteEnumerable")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n    Consol"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("WriteLine")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("value")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n")])])]),a("p",[e._v("It would just print numbers forever.")]),e._v(" "),a("h3",{attrs:{id:"foreach"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#foreach"}},[e._v("#")]),e._v(" foreach")]),e._v(" "),a("p",[a("code",[e._v("foreach")]),e._v(" keyword is basically a syntax sugar that relies on the "),a("code",[e._v("IEnumerable")]),e._v("\nand "),a("code",[e._v("IEnumerator")]),e._v(":")]),e._v(" "),a("p",[e._v("Syntax sugar:")]),e._v(" "),a("div",{staticClass:"language-cs extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cs"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("foreach")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("var")])]),e._v(" element "),a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("in")]),e._v(" collection"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n    Console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("WriteLine")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("element"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n")])])]),a("p",[e._v("Behind the scenes:")]),e._v(" "),a("div",{staticClass:"language-cs extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cs"}},[a("code",[a("span",{pre:!0,attrs:{class:"token class-name"}},[a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("var")])]),e._v(" enumerator "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" collection"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("GetEnumerator")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("while")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("enumerator"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("MoveNext")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n    Console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("WriteLine")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("enumerator"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("Current"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n")])])]),a("div",{staticClass:"custom-block warning"},[a("p",{staticClass:"custom-block-title"},[e._v("Simplification!")]),e._v(" "),a("p",[e._v("In reality the generated code is more convoluted, for example it calls\n"),a("code",[e._v("Dispose()")]),e._v(" in the "),a("code",[e._v("finally")]),e._v(" block.")])]),e._v(" "),a("h3",{attrs:{id:"yield"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#yield"}},[e._v("#")]),e._v(" yield")]),e._v(" "),a("p",[e._v("The "),a("code",[e._v("yield")]),e._v(" keyword is a shortcut that allows us to create our own\n"),a("code",[e._v("IEnumerable")]),e._v("/"),a("code",[e._v("IEnumerator")]),e._v("s. For example, to create an infinite enumerator, we\ndon't have to create new implementations of "),a("code",[e._v("IEnumerable")]),e._v(" and "),a("code",[e._v("IEnumerator")]),e._v(". All\nwe have to do is this:")]),e._v(" "),a("div",{staticClass:"language-cs extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cs"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("public")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token return-type class-name"}},[e._v("IEnumerable"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("<")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("int")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(">")])]),e._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("GetNumbersForEver")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n    "),a("span",{pre:!0,attrs:{class:"token class-name"}},[a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("var")])]),e._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[e._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("while")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),a("span",{pre:!0,attrs:{class:"token boolean"}},[e._v("true")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("yield")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("return")]),e._v(" i"),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("++")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n")])])]),a("p",[e._v("It's a method that uses the "),a("code",[e._v("yield")]),e._v(" keyword. It works in a way that each time we\nask for the next value from the returned "),a("code",[e._v("IEnumerable")]),e._v(", it is going to execute\nthe loop iteration, until it finds the next "),a("code",[e._v("yield")]),e._v(". In our case, there's just 1\nline of code in the loop, but there could be more.")]),e._v(" "),a("p",[e._v("So, basically, "),a("code",[e._v("yield")]),e._v(" creates a custom "),a("code",[e._v("IEnumerator")]),e._v(" (behind the scenes) that\nreturns values only when we ask for them. The code in the method using "),a("code",[e._v("yield")]),e._v("\nruns ONLY when we ask for the next element.")]),e._v(" "),a("p",[e._v("It is very similar to how LINQ works.")]),e._v(" "),a("h2",{attrs:{id:"iqueryable"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#iqueryable"}},[e._v("#")]),e._v(" IQueryable")]),e._v(" "),a("p",[e._v("The "),a("code",[e._v("IQueryable")]),e._v(" interface is a bit similar to "),a("code",[e._v("IEnumerable")]),e._v(". In fact, it\ninherits from "),a("code",[e._v("IEnumerable")]),e._v(". "),a("code",[e._v("IQueryable")]),e._v(" is mostly used with LINQ and data\nproviders. The advantage of it is that is allows to construct a query before\nexecuting it against a data source (e.g., a database). "),a("code",[e._v("IQueryable")]),e._v(" has a\nproperty called "),a("code",[e._v("Expression")]),e._v(". This is the expression tree that a given instance\nof "),a("code",[e._v("IQueryable")]),e._v(" represents. For example (using Entity Framework):")]),e._v(" "),a("div",{staticClass:"language-cs extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cs"}},[a("code",[a("span",{pre:!0,attrs:{class:"token class-name"}},[a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("var")])]),e._v(" people "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" context"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("People"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("Where")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("p "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=>")]),e._v(" p"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("Name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("StartsWith")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[e._v('"B"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n")])])]),a("p",[e._v("This is turned into an expression tree, stored in the "),a("code",[e._v("IQueryable.Expression")]),e._v(".")]),e._v(" "),a("p",[e._v("Let's say I add another line of code to what I had:")]),e._v(" "),a("div",{staticClass:"language-cs extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cs"}},[a("code",[a("span",{pre:!0,attrs:{class:"token class-name"}},[a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("var")])]),e._v(" threePeople "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" people"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("Take")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[e._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n")])])]),a("p",[e._v("If we were using "),a("code",[e._v("IEnumerable")]),e._v(", we'd request all the people from the database\nfirst, and then (locally) extract three entities from that. It's obviously\ninefficient. However, thanks to the use of "),a("code",[e._v("IQueryable")]),e._v(", when the "),a("code",[e._v("Take(3)")]),e._v(" was\nadded, the expression tree got modified and the constructed SQL query could make\nuse of something like "),a("code",[e._v("TOP")]),e._v(" to deliver just 3 people instances.")]),e._v(" "),a("h2",{attrs:{id:"references"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#references"}},[e._v("#")]),e._v(" References")]),e._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"https://docs.microsoft.com/en-us/dotnet/api/system.collections.ienumerable?view=net-6.0",target:"_blank",rel:"noopener noreferrer"}},[e._v("IEnumerable (MSDN)"),a("OutboundLink")],1)]),e._v(" "),a("li",[a("a",{attrs:{href:"https://docs.microsoft.com/en-us/dotnet/api/system.collections.ienumerator?view=net-6.0",target:"_blank",rel:"noopener noreferrer"}},[e._v("IEnumerator (MSDN)"),a("OutboundLink")],1)]),e._v(" "),a("li",[a("a",{attrs:{href:"https://www.youtube.com/watch?v=UfT-st9dl8Q",target:"_blank",rel:"noopener noreferrer"}},[e._v("YouTube (IEnumerable)"),a("OutboundLink")],1)]),e._v(" "),a("li",[a("a",{attrs:{href:"https://csharpindepth.com/Articles/IteratorBlockImplementation",target:"_blank",rel:"noopener noreferrer"}},[e._v("Iterator Block Implementation"),a("OutboundLink")],1)]),e._v(" "),a("li",[a("a",{attrs:{href:"https://docs.microsoft.com/en-us/archive/blogs/mattwar/linq-building-an-iqueryable-provider-part-i",target:"_blank",rel:"noopener noreferrer"}},[e._v("Implementing IQueryable (MSDN)"),a("OutboundLink")],1)])])])}),[],!1,null,null,null);t.default=n.exports}}]);