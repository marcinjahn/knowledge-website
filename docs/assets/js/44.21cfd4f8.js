(window.webpackJsonp=window.webpackJsonp||[]).push([[44],{516:function(e,t,n){"use strict";n.r(t);var a=n(22),s=Object(a.a)({},(function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[n("h1",{attrs:{id:"frontmatter-title"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#frontmatter-title"}},[e._v("#")]),e._v(" "+e._s(e.$frontmatter.title))]),e._v(" "),n("p",[e._v("The Domain-Driven Design (DDD) is an architecture style for building\nmicroservices-based software systems. Some argue that microservices architecture\nis true only with DDD.")]),e._v(" "),n("p",[e._v("The main goal of DDD is to make software more maintainable, to make it less\ncomplex to deal with.")]),e._v(" "),n("h2",{attrs:{id:"bounded-context"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#bounded-context"}},[e._v("#")]),e._v(" Bounded Context")]),e._v(" "),n("p",[e._v("As part of DDD, we identify "),n("strong",[e._v("Subdomains")]),e._v(" that take part in our system.\nSubdomain is a subset of some larger "),n("strong",[e._v("Domain")]),e._v(". The terms are rather fuzzy.\nEvery subdomain is some domain itself after all. Domains and subdomains are a\nhierarchical concept.")]),e._v(" "),n("p",[e._v("When we design DDD-compliant system, the domain is the general problem we're\ntrying to solve, let's say \"Monitoring of IoT Platform Instances\". This great\ndomain may be splitted into smaller concerns - subdomains:")]),e._v(" "),n("ul",[n("li",[e._v("users management")]),e._v(" "),n("li",[e._v("platforms management")]),e._v(" "),n("li",[e._v("notifications")]),e._v(" "),n("li",[e._v("etc.")])]),e._v(" "),n("p",[e._v("A "),n("strong",[e._v("Bounded Context")]),e._v(" represents a linguistic boundary within or across\nsubdomains. Often, a Bounded Context is aligned with a Subdomain. The difference\nbetween these two concepts is as follows:")]),e._v(" "),n("ul",[n("li",[e._v("a "),n("strong",[e._v("Subdomain")]),e._v(" is in the "),n("em",[e._v("Problem Space")]),e._v(".")]),e._v(" "),n("li",[e._v("a "),n("strong",[e._v("Bounded Context")]),e._v(" is in the "),n("em",[e._v("Solution Space")]),e._v(".")])]),e._v(" "),n("p",[e._v("So, a given bounded context is a proposed solution to a problem within some\nsubdomain.")]),e._v(" "),n("p",[e._v("In a typical project, there will be many bounded contexts. Ideally, each of them\nshould be developed by a different team. Each would also use a separate data\nstore.")]),e._v(" "),n("h3",{attrs:{id:"bounded-context-vs-microservice"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#bounded-context-vs-microservice"}},[e._v("#")]),e._v(" Bounded Context vs Microservice")]),e._v(" "),n("p",[e._v("There isn't a 1:1 relation between a bounded context and a microservice. A\nsingle bounded context could be served by multiple microservices. For example,\none microservice could be in a form of an HTTP API, serving requests. Another\nmicroservice could be a listener on some bus. Both could work on the same\ndatabase, but they'd work on a different parts of the overall responsibility of\nthe bounded context.")]),e._v(" "),n("h3",{attrs:{id:"ubiquitous-language"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#ubiquitous-language"}},[e._v("#")]),e._v(" Ubiquitous Language")]),e._v(" "),n("p",[e._v("One of the pillars of DDD is the establishment of the "),n("strong",[e._v("Ubiquitous Language")]),e._v(" -\nan agreed vocabulary that will be used to describe various entities in the\nBounded Contexts. It should be used everywhere in the project: code, diagrams,\ndiscussions, etc.")]),e._v(" "),n("p",[e._v("Every context will have its own ubiquitous language.")]),e._v(" "),n("h4",{attrs:{id:"context-maps"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#context-maps"}},[e._v("#")]),e._v(" Context Maps")]),e._v(" "),n("p",[e._v("The namings in different Bounded Contexts and their relations is what defines\n"),n("strong",[e._v("Context Maps")]),e._v(". It could be that different Bounded Contexts use the same name\nfor different entities. It could also happen that different bounded context\nwould model the same entity (like a Customer in Appointment Scheduler context\nand Customer in the Billing context).")]),e._v(" "),n("p",[e._v("A Context Map clearly shows what a given entity is represented by in another\ncontext.")]),e._v(" "),n("h3",{attrs:{id:"synchronization"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#synchronization"}},[e._v("#")]),e._v(" Synchronization")]),e._v(" "),n("p",[e._v("Different bounded context may model data for the same physical entity. For\nexample, Patient Management context and scheduling context may contain the\nPatient entity. Probably, the one in the Patient Management context will be more\ndetailed. Also, probably that one will allow for various modifications. E.g., we\ncould change the patient's name. The other contexts that model the Patient\nshould be notified about this change. E.g., it could be done via some message\nbus. The Patient Management service would publish a message about the change,\nand all other interested services would be listeners.")]),e._v(" "),n("h2",{attrs:{id:"domain-model"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#domain-model"}},[e._v("#")]),e._v(" Domain Model")]),e._v(" "),n("p",[e._v("Designing our domain model is crucial. According to Eric Evans:")]),e._v(" "),n("blockquote",[n("p",[e._v("The domain is the heart of business software.")])]),e._v(" "),n("p",[e._v("In our modeling, we should focus on the behaviours of the models. To find such\nbehaviours, we need to look at all the possible events that may occur in the\nsystem - those events are basically the use-cases that the solution is expected\nto fulfill. Some examples of these events could be (in medical clinic system):")]),e._v(" "),n("ul",[n("li",[e._v("add a new patient")]),e._v(" "),n("li",[e._v("schedule a visit")]),e._v(" "),n("li",[e._v("move a visit to another date")])]),e._v(" "),n("h3",{attrs:{id:"rich-domain-models"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#rich-domain-models"}},[e._v("#")]),e._v(" Rich Domain Models")]),e._v(" "),n("p",[e._v("DDD encourages the use of "),n("strong",[e._v("Rich Domain Models")]),e._v(", opposed to the "),n("strong",[e._v("Anemic Domain\nModels")]),e._v(". Anemic models are simply classes that are DTOs, or classes with very\nlittle logic inside of them.")]),e._v(" "),n("p",[e._v("Often in our programs we have DTO classes and other service classes that act on\nthese DTOs, potentially modifying them. This is an anti-pattern in the DDD\nworld. Martin Fowler argues that this is even an anti-pattern in the OOP sense,\nsince OOP is supposed to merge data and behaviour together.")]),e._v(" "),n("h3",{attrs:{id:"entities"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#entities"}},[e._v("#")]),e._v(" Entities")]),e._v(" "),n("p",[e._v("These are objects defined by their identity. That means that every instance of\nan Entity is unique, it has its own key. identifier. Examples of entities:")]),e._v(" "),n("ul",[n("li",[e._v("Patient")]),e._v(" "),n("li",[e._v("Doctor")]),e._v(" "),n("li",[e._v("Room")]),e._v(" "),n("li",[e._v("Appointment")])]),e._v(" "),n("p",[e._v("An entity should always be in the valid state. Hence any modification of an\nentity (or its creation) should contain various guard clauses that make sure the\noperation can be done. For example, before I rename a Patient, I should make\nsure that the new name is not empty.")]),e._v(" "),n("p",[e._v("Entities also contain "),n("em",[e._v("Events")]),e._v(". These may be used to inform other parts of the\nsystem of changes.")]),e._v(" "),n("h2",{attrs:{id:"shared-kernel"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#shared-kernel"}},[e._v("#")]),e._v(" Shared Kernel")]),e._v(" "),n("p",[e._v("In DDD, a "),n("strong",[e._v("Shared Kernel")]),e._v(" is code that is used between different bounded\ncontext. It's basically a kind of project that .NET developers often call\n"),n("em",[e._v("Common")]),e._v(". The shared part should be as stable as possible. Changes in that code\nwill affect a lot of places.")]),e._v(" "),n("h2",{attrs:{id:"sources"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#sources"}},[e._v("#")]),e._v(" Sources")]),e._v(" "),n("ul",[n("li",[n("a",{attrs:{href:"https://app.pluralsight.com/library/courses/fundamentals-domain-driven-design",target:"_blank",rel:"noopener noreferrer"}},[e._v("Domain-Driven Design Fundamentals\n(Pluralsight)"),n("OutboundLink")],1)])])])}),[],!1,null,null,null);t.default=s.exports}}]);