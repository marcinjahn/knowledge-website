(window.webpackJsonp=window.webpackJsonp||[]).push([[118],{597:function(t,e,s){"use strict";s.r(e);var a=s(22),n=Object(a.a)({},(function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"tips"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#tips"}},[t._v("#")]),t._v(" Tips")]),t._v(" "),s("h2",{attrs:{id:"cli-apps"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#cli-apps"}},[t._v("#")]),t._v(" CLI Apps")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("std::env::args()")]),t._v(" returns an iterator to command line arguments.")]),t._v(" "),s("li",[s("code",[t._v("std::process::exit(1)")]),t._v(" terminates the program with some exit code.")]),t._v(" "),s("li",[t._v("keeping "),s("code",[t._v("src/main.rs")]),t._v(" short is a good practice. The logic should be moved to\nseparate files like "),s("code",[t._v("src/lib.rs")]),t._v(". That also makes the logic testable (binary\ncrates are not testable).")]),t._v(" "),s("li",[s("code",[t._v("eprintln!")]),t._v(" macro prints to stderr.")]),t._v(" "),s("li",[t._v("a "),s("strong",[t._v("clap")]),t._v(" cargo is useful for defining CLI arguments")])]),t._v(" "),s("h2",{attrs:{id:"documentation"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#documentation"}},[t._v("#")]),t._v(" Documentation")]),t._v(" "),s("p",[t._v("Rust has built-in documentation for code. Our code can be documented as well.")]),t._v(" "),s("h3",{attrs:{id:"documenting-files"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#documenting-files"}},[t._v("#")]),t._v(" Documenting files")]),t._v(" "),s("p",[t._v("Here's an example:")]),t._v(" "),s("div",{staticClass:"language-rust extra-class"},[s("pre",{pre:!0,attrs:{class:"language-rust"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//! # My Crate")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//!")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//! `my_crate` is a collection of utilities to make performing certain")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//! calculations more convenient.")]),t._v("\n")])])]),s("p",[t._v("It is some more general documentation about our crate. It could appear\nin the "),s("code",[t._v("src/lib.rs")]),t._v(".")]),t._v(" "),s("h3",{attrs:{id:"documenting-functions"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#documenting-functions"}},[t._v("#")]),t._v(" Documenting functions")]),t._v(" "),s("p",[t._v("Here's an example:")]),t._v(" "),s("div",{staticClass:"language-rust extra-class"},[s("pre",{pre:!0,attrs:{class:"language-rust"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/// Adds one to the number given.")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("///")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/// # Examples")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("///")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/// ```")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/// let arg = 5;")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/// let answer = my_crate::add_one(arg);")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("///")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/// assert_eq!(6, answer);")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/// ```")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("pub")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("fn")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function-definition function"}},[t._v("add_one")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("x"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("i32")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("->")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("i32")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  x "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("The documentation should appear just before the documented element.")]),t._v(" "),s("h3",{attrs:{id:"cargo"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#cargo"}},[t._v("#")]),t._v(" Cargo")]),t._v(" "),s("p",[t._v("We generate the docs with "),s("code",[t._v("cargo doc")]),t._v(". It runs "),s("code",[t._v("rustdoc")]),t._v(" internally.\nThe HTML docs are placed in "),s("code",[t._v("target/doc")]),t._v(".")]),t._v(" "),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),s("p",[t._v("Running "),s("code",[t._v("cargo doc --open")]),t._v(" generates and opens the docs automatically.")])]),t._v(" "),s("h3",{attrs:{id:"tests"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#tests"}},[t._v("#")]),t._v(" Tests")]),t._v(" "),s("p",[t._v("Documentation might also contain example code. That code is run automatically\nwith "),s("code",[t._v("cargo test")]),t._v(". In the example code shown previousy, the example code would\nbe run.")])])}),[],!1,null,null,null);e.default=n.exports}}]);