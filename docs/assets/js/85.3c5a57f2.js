(window.webpackJsonp=window.webpackJsonp||[]).push([[85],{580:function(t,e,a){"use strict";a.r(e);var s=a(22),n=Object(s.a)({},(function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"enumerables-in-net"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#enumerables-in-net"}},[t._v("#")]),t._v(" Enumerables in .NET")]),t._v(" "),a("h2",{attrs:{id:"ienumerable-and-ienumerator"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#ienumerable-and-ienumerator"}},[t._v("#")]),t._v(" IEnumerable and IEnumerator")]),t._v(" "),a("p",[t._v("Collections in .NET implement "),a("code",[t._v("IEnumerable")]),t._v(". This interface has just one method:\n"),a("code",[t._v("GetEnumerator()")]),t._v(". It returns an implementation of "),a("code",[t._v("IEnumerator()")]),t._v(".")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("Generics")]),t._v(" "),a("p",[t._v("Normally, we don't use non-generic "),a("code",[t._v("IEnurable")]),t._v("/"),a("code",[t._v("IEnumerator")]),t._v(" nowadays, but I'll\nbe using these shorter interface names here for simplicity.")])]),t._v(" "),a("p",[a("code",[t._v("IEnumerator")]),t._v(" allows to\n("),a("a",{attrs:{href:"https://docs.microsoft.com/en-us/dotnet/api/system.collections.ienumerator?view=net-6.0",target:"_blank",rel:"noopener noreferrer"}},[t._v("MSDN"),a("OutboundLink")],1),t._v("):")]),t._v(" "),a("ul",[a("li",[t._v("move between elements in the collection")]),t._v(" "),a("li",[t._v("read the current element")]),t._v(" "),a("li",[t._v("reset state")])]),t._v(" "),a("p",[t._v("Why do we even need "),a("code",[t._v("IEnumerable")]),t._v(" and don't just implement "),a("code",[t._v("IEnumerator")]),t._v(" in\nevery collection type? That's because we want to be able to enumerate a single\ncollection by multiple actors. "),a("code",[t._v("IEnumerator")]),t._v(" has a state. We can't use the same\ninstance of it from two different services, because none of these services would\nget a full picture of the collection. Instead, each service should retrieve its\nown copy of "),a("code",[t._v("IEnumerator")]),t._v(" (via "),a("code",[t._v("IEnumerable")]),t._v(") and use it.")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("Length")]),t._v(" "),a("p",[t._v("An important characteristic of the "),a("code",[t._v("IEnumerable")]),t._v(" is that its length is unknown.\nThis is quite useful in scenarios where the data source is huge and counting its\nlength would be a huge overhead.")]),t._v(" "),a("p",[t._v("The source of data could be actually infinite, for example it could be a source\nof random numbers. In such a case, the "),a("code",[t._v("IEnumerator")]),t._v(" implementation would\nprobably not need to keep the reference to its source "),a("code",[t._v("IEnumerable")]),t._v(", as it\nusually happens with typical collections, like the "),a("code",[t._v("Array")]),t._v(". You will find a\nsimilar example below.")])]),t._v(" "),a("h3",{attrs:{id:"examples"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#examples"}},[t._v("#")]),t._v(" Examples")]),t._v(" "),a("h4",{attrs:{id:"array"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#array"}},[t._v("#")]),t._v(" Array")]),t._v(" "),a("p",[t._v("An example of an "),a("code",[t._v("IEnumerable")]),t._v(" is an "),a("code",[t._v("Array")]),t._v(".\n"),a("a",{attrs:{href:"https://github.com/microsoft/referencesource/blob/master/mscorlib/system/array.cs#L1268",target:"_blank",rel:"noopener noreferrer"}},[t._v("Here"),a("OutboundLink")],1),t._v("\nwe can see that it implements "),a("code",[t._v("IEnumerable.GetEnumerator()")]),t._v(". The enumerator\nitself can be found\n"),a("a",{attrs:{href:"https://github.com/microsoft/referencesource/blob/5697c29004a34d80acdaf5742d7e699022c64ecd/mscorlib/system/array.cs#L2597",target:"_blank",rel:"noopener noreferrer"}},[t._v("here"),a("OutboundLink")],1),t._v(".\nIt keeps reference to the "),a("code",[t._v("Array")]),t._v(". One of its components is the "),a("code",[t._v("Current")]),t._v("\nproperty. All it does is it returns the element at the current "),a("code",[t._v("_index")]),t._v(". The\n"),a("a",{attrs:{href:"https://github.com/microsoft/referencesource/blob/5697c29004a34d80acdaf5742d7e699022c64ecd/mscorlib/system/array.cs#L2665",target:"_blank",rel:"noopener noreferrer"}},[t._v("MoveNext()"),a("OutboundLink")],1),t._v("\nis also there. It basically increments the "),a("code",[t._v("_index")]),t._v(".")]),t._v(" "),a("h4",{attrs:{id:"infinite-enumerator"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#infinite-enumerator"}},[t._v("#")]),t._v(" Infinite Enumerator")]),t._v(" "),a("p",[t._v("This is a simple enumartor that just returns consecutive numbers, forever (well,\nuntil it overflows):")]),t._v(" "),a("div",{staticClass:"language-cs extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cs"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("InfiniteEnumerable")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token type-list"}},[a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("IEnumerable")])]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token return-type class-name"}},[t._v("IEnumerator")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("GetEnumerator")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constructor-invocation class-name"}},[t._v("InfiniteEnumerator")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("InfiniteEnumerator")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token type-list"}},[a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("IEnumerator")])]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")])]),t._v(" _current "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token return-type class-name"}},[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("object")])]),t._v(" Current "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("get")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("set")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" _current"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token return-type class-name"}},[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("bool")])]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("MoveNext")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        _current"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("Here's how we'd use it:")]),t._v(" "),a("div",{staticClass:"language-cs extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cs"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("foreach")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")])]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("value")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constructor-invocation class-name"}},[t._v("InfiniteEnumerable")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    Consol"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("WriteLine")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("value")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("It would just print numbers forever.")]),t._v(" "),a("h3",{attrs:{id:"foreach"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#foreach"}},[t._v("#")]),t._v(" foreach")]),t._v(" "),a("p",[a("code",[t._v("foreach")]),t._v(" keyword is basically a syntax sugar that relies on the "),a("code",[t._v("IEnumerable")]),t._v("\nand "),a("code",[t._v("IEnumerator")]),t._v(":")]),t._v(" "),a("p",[t._v("Syntax sugar:")]),t._v(" "),a("div",{staticClass:"language-cs extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cs"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("foreach")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")])]),t._v(" element "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" collection"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    Console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("WriteLine")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("element"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("Behind the scenes:")]),t._v(" "),a("div",{staticClass:"language-cs extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cs"}},[a("code",[a("span",{pre:!0,attrs:{class:"token class-name"}},[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")])]),t._v(" enumerator "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" collection"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("GetEnumerator")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("enumerator"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("MoveNext")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    Console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("WriteLine")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("enumerator"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Current"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("div",{staticClass:"custom-block warning"},[a("p",{staticClass:"custom-block-title"},[t._v("Simplification!")]),t._v(" "),a("p",[t._v("In reality the generated code is more convoluted, for example it calls\n"),a("code",[t._v("Dispose()")]),t._v(" in the "),a("code",[t._v("finally")]),t._v(" block.")])]),t._v(" "),a("h3",{attrs:{id:"yield"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#yield"}},[t._v("#")]),t._v(" yield")]),t._v(" "),a("p",[t._v("The "),a("code",[t._v("yield")]),t._v(" keyword is a shortcut that allows us to create our own\n"),a("code",[t._v("IEnumerable")]),t._v("/"),a("code",[t._v("IEnumerator")]),t._v("s. For example, to create an infinite enumerator, we\ndon't have to create new implementations of "),a("code",[t._v("IEnumerable")]),t._v(" and "),a("code",[t._v("IEnumerator")]),t._v(". All\nwe have to do is this:")]),t._v(" "),a("div",{staticClass:"language-cs extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cs"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token return-type class-name"}},[t._v("IEnumerable"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("GetNumbersForEver")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token class-name"}},[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")])]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("yield")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" i"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("It's a method that uses the "),a("code",[t._v("yield")]),t._v(" keyword. It works in a way that each time we\nask for the next value from the returned "),a("code",[t._v("IEnumerable")]),t._v(", it is going to execute\nthe loop iteration, until it finds the next "),a("code",[t._v("yield")]),t._v(". In our case, there's just 1\nline of code in the loop, but there could be more.")]),t._v(" "),a("p",[t._v("So, basically, "),a("code",[t._v("yield")]),t._v(" creates a custom "),a("code",[t._v("IEnumerator")]),t._v(" (behind the scenes) that\nreturns values only when we ask for them. The code in the method using "),a("code",[t._v("yield")]),t._v("\nruns ONLY when we ask for the next element. It is very similar to how LINQ\nworks.")]),t._v(" "),a("h3",{attrs:{id:"linq"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#linq"}},[t._v("#")]),t._v(" LINQ")]),t._v(" "),a("p",[t._v("A small remark about LINQ and its "),a("code",[t._v("IEnumerable")]),t._v(" is that it is not always the\ncase that one element is pulled from the source at a time. In some cases we have\nto know all the values upfront before we're able to return even the first value.\nExample of it are:")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("Reverse")])]),t._v(" "),a("li",[a("code",[t._v("OrderBy")])])]),t._v(" "),a("p",[t._v("We can't reverse a collection if we don't know the last value.")]),t._v(" "),a("h2",{attrs:{id:"iqueryable"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#iqueryable"}},[t._v("#")]),t._v(" IQueryable")]),t._v(" "),a("p",[t._v("The "),a("code",[t._v("IQueryable")]),t._v(" interface is a bit similar to "),a("code",[t._v("IEnumerable")]),t._v(", but also totally\ndifferent at the same time. In fact, it inherits from "),a("code",[t._v("IEnumerable")]),t._v(".\n"),a("code",[t._v("IQueryable")]),t._v(" is mostly used with LINQ and data providers. The advantage of it is\nthat is allows to construct a query before executing it against a data source\n(e.g., a database). "),a("code",[t._v("IQueryable")]),t._v(" has a property called "),a("code",[t._v("Expression")]),t._v(". This is the\nexpression tree that a given instance of "),a("code",[t._v("IQueryable")]),t._v(" represents. For example\n(using Entity Framework):")]),t._v(" "),a("div",{staticClass:"language-cs extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cs"}},[a("code",[a("span",{pre:!0,attrs:{class:"token class-name"}},[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")])]),t._v(" people "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" context"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("People"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Where")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("p "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" p"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("StartsWith")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"B"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v("This is turned into an expression tree, stored in the "),a("code",[t._v("IQueryable.Expression")]),t._v(".")]),t._v(" "),a("p",[t._v("Let's say I add another line of code to what I had:")]),t._v(" "),a("div",{staticClass:"language-cs extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cs"}},[a("code",[a("span",{pre:!0,attrs:{class:"token class-name"}},[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")])]),t._v(" threePeople "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" people"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Take")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v("If we were using "),a("code",[t._v("IEnumerable")]),t._v(", we'd request all the people from the database\nfirst, and then (locally) extract three entities from that. It's obviously\ninefficient. However, thanks to the use of "),a("code",[t._v("IQueryable")]),t._v(", when the "),a("code",[t._v("Take(3)")]),t._v(" was\nadded, the expression tree got modified and the constructed SQL query could make\nuse of something like "),a("code",[t._v("TOP")]),t._v(" to deliver just 3 people instances.")]),t._v(" "),a("p",[t._v("Here's a quote from "),a("a",{attrs:{href:"https://docs.microsoft.com/en-us/archive/blogs/mattwar/linq-building-an-iqueryable-provider-part-i",target:"_blank",rel:"noopener noreferrer"}},[t._v("MSDN"),a("OutboundLink")],1),t._v(":")]),t._v(" "),a("blockquote",[a("p",[t._v("The second property (Expression) gives you the expression that corresponds to the query.\nThis is quintessential essence of IQueryable’s being. The actual ‘query’\nunderneath the hood of an IQueryable is an expression that represents the\nquery as a tree of LINQ query operators/method calls. This is the part of the\nIQueryable that your provider must comprehend in order to do anything useful.\nIf you look deeper you will see that the whole IQueryable infrastructure\n(including the System.Linq.Queryable version of LINQ standard query operators)\nis just a mechanism to auto-construct expression tree nodes for you. When you\nuse the Queryable.Where method to apply a filter to an IQueryable, it simply\nbuilds you a new IQueryable adding a method-call expression node on top of the\ntree representing the call you just made to Queryable.Where.")])]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("In-memory is OK")]),t._v(" "),a("p",[t._v("If we had a similar case with LINQ to Objects, "),a("code",[t._v("IEnumerable")]),t._v("s would be fine.\nHere's an example:")]),t._v(" "),a("div",{staticClass:"language-cs extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cs"}},[a("code",[a("span",{pre:!0,attrs:{class:"token class-name"}},[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")])]),t._v(" top3 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("GetCollection")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Where")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("n "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" n "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("6")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Take")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("foreach")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")])]),t._v(" item "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" top3"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    Console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("WriteLine")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("item"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token return-type class-name"}},[t._v("IEnumerable"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("GetCollection")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")])]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("8")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        Console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("WriteLine")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"YIELD"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("yield")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[a("code",[t._v("YIELD")]),t._v(" is printed three times. With external systems (like databases) we can't\ngo and ask for items one by one, that would be really inefficient. We need some\nmechanism to prepare an optimized query and send it once. That's what\n"),a("code",[t._v("IQueryable")]),t._v(" is for.")])]),t._v(" "),a("h2",{attrs:{id:"iasyncenumerable-and-iasyncenumerator"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#iasyncenumerable-and-iasyncenumerator"}},[t._v("#")]),t._v(" IAsyncEnumerable and IAsyncEnumerator")]),t._v(" "),a("p",[t._v("An async version of "),a("code",[t._v("IEnumerable")]),t._v(" and "),a("code",[t._v("IEnumerator")]),t._v(" is the pair of\n"),a("code",[t._v("IAsyncEnumerable")]),t._v(" and "),a("code",[t._v("IAsyncEnumerator")]),t._v(".")]),t._v(" "),a("p",[t._v("Here's a comparison of their methods/properties:")]),t._v(" "),a("ul",[a("li",[t._v("Enumerable:")])]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("IEnumerable")]),t._v(" "),a("th",[t._v("IAsyncEnumerable")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("GetEnumerator")]),t._v(" "),a("td",[t._v("GetAsyncEnumerator")])])])]),t._v(" "),a("ul",[a("li",[t._v("Enumerator:")])]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("IEnumerator")]),t._v(" "),a("th",[t._v("IAsyncEnumerator")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("Current")]),t._v(" "),a("td",[t._v("Current")])]),t._v(" "),a("tr",[a("td",[t._v("MoveNext")]),t._v(" "),a("td",[t._v("MoveNextAsync")])]),t._v(" "),a("tr",[a("td",[t._v("Dispose")]),t._v(" "),a("td",[t._v("DisposeAsync")])]),t._v(" "),a("tr",[a("td",[t._v("Reset")]),t._v(" "),a("td",[t._v("-")])])])]),t._v(" "),a("p",[t._v("Really, the most important difference between traditional and async Enumerable\nis that the latter supports async loading of next items via "),a("code",[t._v("MoveNextAsync")]),t._v(".")]),t._v(" "),a("p",[t._v("Here's an example of how to use the "),a("code",[t._v("IAsyncEnumerable")]),t._v(":")]),t._v(" "),a("div",{staticClass:"language-cs extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cs"}},[a("code",[a("span",{pre:!0,attrs:{class:"token class-name"}},[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")])]),t._v(" collection "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("GetCollection")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("await")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("foreach")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")])]),t._v(" item "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" collection"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    Console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("WriteLine")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("item"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("async")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token return-type class-name"}},[t._v("IAsyncEnumerable"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("string")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("GetCollection")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")])]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("yield")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("await")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("LoadItemFromTheWeb")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("The compiler actually translates the "),a("code",[t._v("await foreach...")]),t._v(" into code that invokes\n"),a("code",[t._v("await e.MoveNextAsync()")]),t._v(" in a loop.")]),t._v(" "),a("h3",{attrs:{id:"cancellationtoken"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#cancellationtoken"}},[t._v("#")]),t._v(" CancellationToken")]),t._v(" "),a("p",[t._v("Async methods normally support cancellation. "),a("code",[t._v("IAsyncEnumerable")]),t._v("'s\n"),a("code",[t._v("GetAsyncEnumerator")]),t._v(" is no different. It accepts a "),a("code",[t._v("CancellationToken")]),t._v(". However,\nsince we're rarely calling that method directly (we use "),a("code",[t._v("await foreach")]),t._v(" instead,\nwhich deals with enumerators behind the scenes), there's a special way to pass\nthe "),a("code",[t._v("CancellationToken")]),t._v(":")]),t._v(" "),a("div",{staticClass:"language-cs extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cs"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("await")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("foreach")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")])]),t._v(" item "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("GetAsyncEnumerable")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("WithCancellation")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ct"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  Console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("WriteLine")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("item"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v("The "),a("code",[t._v("WithCancellation(ct)")]),t._v(" extension method passes the token.")]),t._v(" "),a("p",[t._v("On the other side, we also need to be able to accept "),a("code",[t._v("CancellationToken")]),t._v(" to our methods that return "),a("code",[t._v("IAsyncEnumerable")]),t._v(". We use a special attribute for that:")]),t._v(" "),a("div",{staticClass:"language-cs extra-class"},[a("div",{staticClass:"highlight-lines"},[a("br"),a("div",{staticClass:"highlighted"},[t._v(" ")]),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br"),a("br")]),a("pre",{pre:!0,attrs:{class:"language-cs"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("async")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token return-type class-name"}},[t._v("IAsyncEnumerable"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("string")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("GetCollection")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token attribute"}},[a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("EnumeratorCancellation")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("CancellationToken")]),t._v(" cancellationToken "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("default")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")])]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("yield")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("await")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("LoadItemFromTheWeb")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" cancellationToken"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("The compiler will know that it should pass the "),a("code",[t._v("CancellationToken")]),t._v(" (that we\ncould provide via "),a("code",[t._v("WithCancellatin(...)")]),t._v(") to our method.")]),t._v(" "),a("h3",{attrs:{id:"linq-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#linq-2"}},[t._v("#")]),t._v(" LINQ")]),t._v(" "),a("p",[t._v("LINQ does not support "),a("code",[t._v("IAsyncEnumerable")]),t._v("s by default. There's a NuGet package\nfor that -\n"),a("a",{attrs:{href:"https://www.nuget.org/packages/System.Linq.Async",target:"_blank",rel:"noopener noreferrer"}},[t._v("System.Linq.Async"),a("OutboundLink")],1),t._v(". Adding it\nin is all we need to do, the namespace to import is just "),a("code",[t._v("System.Linq")]),t._v(", like in\nthe standard LINQ.")]),t._v(" "),a("h2",{attrs:{id:"references"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#references"}},[t._v("#")]),t._v(" References")]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"https://docs.microsoft.com/en-us/dotnet/api/system.collections.ienumerable?view=net-6.0",target:"_blank",rel:"noopener noreferrer"}},[t._v("IEnumerable (MSDN)"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://docs.microsoft.com/en-us/dotnet/api/system.collections.ienumerator?view=net-6.0",target:"_blank",rel:"noopener noreferrer"}},[t._v("IEnumerator (MSDN)"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://www.youtube.com/watch?v=UfT-st9dl8Q",target:"_blank",rel:"noopener noreferrer"}},[t._v("YouTube (IEnumerable)"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://csharpindepth.com/Articles/IteratorBlockImplementation",target:"_blank",rel:"noopener noreferrer"}},[t._v("Iterator Block Implementation"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://docs.microsoft.com/en-us/archive/blogs/mattwar/linq-building-an-iqueryable-provider-part-i",target:"_blank",rel:"noopener noreferrer"}},[t._v("Implementing IQueryable (MSDN)"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://www.youtube.com/watch?v=Ktl8K2b1-WU",target:"_blank",rel:"noopener noreferrer"}},[t._v("YouTube (IAsyncEnumerable)"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://docs.microsoft.com/en-us/archive/msdn-magazine/2019/november/csharp-iterating-with-async-enumerables-in-csharp-8",target:"_blank",rel:"noopener noreferrer"}},[t._v("Iterating with Async Enumerables in C# 8\n(MSDN)"),a("OutboundLink")],1)])])])}),[],!1,null,null,null);e.default=n.exports}}]);