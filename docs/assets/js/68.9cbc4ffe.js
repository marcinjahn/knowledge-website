(window.webpackJsonp=window.webpackJsonp||[]).push([[68],{530:function(s,t,a){"use strict";a.r(t);var e=a(22),n=Object(e.a)({},(function(){var s=this,t=s.$createElement,a=s._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h1",{attrs:{id:"records"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#records"}},[s._v("#")]),s._v(" Records")]),s._v(" "),a("p",[s._v("Records can be stored on a heap or a stack:")]),s._v(" "),a("div",{staticClass:"language-csharp extra-class"},[a("pre",{pre:!0,attrs:{class:"language-csharp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// heap, like a class")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("record")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Person")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("string")])]),s._v(" Name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// stack, like a struct")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("record")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("struct")])]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("Person2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("string")])]),s._v(" Name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])])]),a("p",[s._v("Depending on the choice as above, the compiler will transform the\nrecord into either a class or a struct (in a process called the "),a("em",[s._v("lowering")]),s._v(').\nRecord is just s "sugar syntax" in .NET.')]),s._v(" "),a("p",[s._v("Records are useful when we're dealing with classes that just carry information\nand do not have any logic/methods.")]),s._v(" "),a("h2",{attrs:{id:"features"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#features"}},[s._v("#")]),s._v(" Features")]),s._v(" "),a("h3",{attrs:{id:"printing"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#printing"}},[s._v("#")]),s._v(" Printing")]),s._v(" "),a("p",[s._v("Printing an instance of a record by default prints its content. An instance of a\nclass would print its type.")]),s._v(" "),a("div",{staticClass:"language-csharp extra-class"},[a("pre",{pre:!0,attrs:{class:"language-csharp"}},[a("code",[s._v("Console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("WriteLine")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("recordInstance"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v('// Person { Name = "Marcin" }')]),s._v("\n\nConsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("WriteLine")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("classInstance"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// Namespace.ClassName")]),s._v("\n")])])]),a("p",[s._v("Records printing behavior may be overridden just like in a normal class.")]),s._v(" "),a("h3",{attrs:{id:"equality"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#equality"}},[s._v("#")]),s._v(" Equality")]),s._v(" "),a("p",[s._v("Class instances (unless explicitly coded otherwise) will not be equal even if\nall properties have the same values. Equality is checked by reference.")]),s._v(" "),a("p",[s._v("In the case of records, an equality check compares the values of the properties.")]),s._v(" "),a("h3",{attrs:{id:"the-with-operator"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#the-with-operator"}},[s._v("#")]),s._v(" The "),a("code",[s._v("with")]),s._v(" operator")]),s._v(" "),a("p",[s._v("Records may be copied (by value) with some changes to original values like this:")]),s._v(" "),a("div",{staticClass:"language-csharp extra-class"},[a("pre",{pre:!0,attrs:{class:"language-csharp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token class-name"}},[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")])]),s._v(" rec1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token constructor-invocation class-name"}},[s._v("Person")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Marcin"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("25")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")])]),s._v(" rec2 "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" rec1 "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("with")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v(" Age "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("20")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// only age gets modified in the new record instance ")]),s._v("\n")])])]),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[s._v("Anonymous Types")]),s._v(" "),a("p",[s._v("The "),a("code",[s._v("with")]),s._v(" operator can also be applied to anonymous types in C#.")])]),s._v(" "),a("h3",{attrs:{id:"deconstructing"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#deconstructing"}},[s._v("#")]),s._v(" Deconstructing")]),s._v(" "),a("p",[s._v("A bit similarly to JS, we can extract some values from records:")]),s._v(" "),a("div",{staticClass:"language-csharp extra-class"},[a("pre",{pre:!0,attrs:{class:"language-csharp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")])]),s._v(" name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")])]),s._v(" age"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" rec1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])])]),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[s._v("TIP")]),s._v(" "),a("p",[s._v("To support deconstructing, the compiler generates the "),a("code",[s._v("Deconstruct")]),s._v(" method for a\nrecord during the lowering process of compilation.")])])])}),[],!1,null,null,null);t.default=n.exports}}]);