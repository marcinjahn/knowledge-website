(window.webpackJsonp=window.webpackJsonp||[]).push([[94],{528:function(t,s,e){"use strict";e.r(s);var a=e(31),n=Object(a.a)({},(function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"testing"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#testing"}},[t._v("#")]),t._v(" Testing")]),t._v(" "),e("p",[t._v("Rust has built-in capabilities to write tests.")]),t._v(" "),e("div",{staticClass:"custom-block tip"},[e("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),e("p",[t._v("Library projects have test module added by default.")])]),t._v(" "),e("div",{staticClass:"custom-block tip"},[e("p",{staticClass:"custom-block-title"},[t._v("Documentation code")]),t._v(" "),e("p",[t._v("Rust can also test code that is a part of our API documentation.\nThese tests are run as part of "),e("code",[t._v("cargo test")]),t._v(".")])]),t._v(" "),e("h2",{attrs:{id:"test-functions"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#test-functions"}},[t._v("#")]),t._v(" Test Functions")]),t._v(" "),e("p",[t._v("A function is a test function when "),e("code",[t._v("#[test]")]),t._v(" attribute is applied to it.")]),t._v(" "),e("div",{staticClass:"language-rust extra-class"},[e("pre",{pre:!0,attrs:{class:"language-rust"}},[e("code",[e("span",{pre:!0,attrs:{class:"token attribute attr-name"}},[t._v("#[cfg(test)]")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("mod")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token module-declaration namespace"}},[t._v("tests")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token attribute attr-name"}},[t._v("#[test]")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("fn")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function-definition function"}},[t._v("it_works")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token macro property"}},[t._v("assert_eq!")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),e("p",[t._v("A function fails when it panics. Otherwise, it passes.\nEach test is run in a new thread.")]),t._v(" "),e("div",{staticClass:"custom-block tip"},[e("p",{staticClass:"custom-block-title"},[t._v("Result alternative")]),t._v(" "),e("p",[t._v("Test functions might also return "),e("code",[t._v("Result<T, E>")]),t._v(" instead of panic!ing.")])]),t._v(" "),e("div",{staticClass:"custom-block tip"},[e("p",{staticClass:"custom-block-title"},[t._v("Private methods")]),t._v(" "),e("p",[t._v("Rust allows to run tests on private methods")])]),t._v(" "),e("h3",{attrs:{id:"macros-and-attributes"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#macros-and-attributes"}},[t._v("#")]),t._v(" Macros and attributes")]),t._v(" "),e("p",[t._v("Some useful testing macros:")]),t._v(" "),e("ul",[e("li",[e("code",[t._v("#[cfg(test)]")]),t._v(" - placed on a module. Thanks to it, the test module is compiled\nonly when "),e("code",[t._v("cargo test")]),t._v(" is used. It saves time and space when building the\ncode.")]),t._v(" "),e("li",[e("code",[t._v("#[test]")]),t._v(" - required for a function to be runnable with "),e("code",[t._v("cargo test")])]),t._v(" "),e("li",[e("code",[t._v("assert!(should_be_true)")])]),t._v(" "),e("li",[e("code",[t._v("assert_eq!(expected, actual)")])]),t._v(" "),e("li",[e("code",[t._v("assert_ne!(something, not_something)")])]),t._v(" "),e("li",[e("code",[t._v("#[should_panic]")]),t._v(" - it accepts an optional string that the panic should\nbe thrown with. This helps to verify that the expected panic was thrown")]),t._v(" "),e("li",[e("code",[t._v("#[ignore]")]),t._v(" - test will not run. We can still force "),e("code",[t._v("cargo")]),t._v(" to run it using\n"),e("code",[t._v("cargo test -- --ignored")]),t._v(". It'll run only the ignored tests.")])]),t._v(" "),e("div",{staticClass:"custom-block tip"},[e("p",{staticClass:"custom-block-title"},[t._v("Failure Message")]),t._v(" "),e("p",[t._v("These macros optionally accept a failure message that will be displayed in case\nof failure. The message will be parsed by the "),e("code",[t._v("foramt!")]),t._v(" macro, so it can contain\nvariables. Such a message might inform what the test was actually testing in more\ndetail.")])]),t._v(" "),e("h2",{attrs:{id:"controlling-tests"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#controlling-tests"}},[t._v("#")]),t._v(" Controlling Tests")]),t._v(" "),e("h3",{attrs:{id:"cargo-test-parameters"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#cargo-test-parameters"}},[t._v("#")]),t._v(" cargo test parameters")]),t._v(" "),e("ul",[e("li",[e("code",[t._v("--test-threads=n")]),t._v(" - allows to specify how many threads run the tests. We could set\nit to "),e("code",[t._v("1")]),t._v(" to disable multithreading.")]),t._v(" "),e("li",[e("code",[t._v("--show-output")]),t._v(" - by default "),e("code",[t._v("print!")]),t._v(" does not show anything for passing\ntests. This setting changes that")]),t._v(" "),e("li",[t._v("passing single test function name will run just that function")])]),t._v(" "),e("h2",{attrs:{id:"organization"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#organization"}},[t._v("#")]),t._v(" Organization")]),t._v(" "),e("h3",{attrs:{id:"unit-tests"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#unit-tests"}},[t._v("#")]),t._v(" Unit Tests")]),t._v(" "),e("p",[t._v("Unit tests should be placed in the same file as the code they're testing. A\nseparate "),e("code",[t._v("testing")]),t._v(" module (with "),e("code",[t._v("#[cfg(test)]")]),t._v(") should be created to include all\nthe tests.")]),t._v(" "),e("h3",{attrs:{id:"integration-tests"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#integration-tests"}},[t._v("#")]),t._v(" Integration Tests")]),t._v(" "),e("p",[t._v("Integration tests should be separate from the tested code. There should be a\n"),e("code",[t._v("tests")]),t._v(" directory next to "),e("code",[t._v("src")]),t._v(". Each file in that directory will become a separate\ncrate.")]),t._v(" "),e("div",{staticClass:"custom-block tip"},[e("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),e("p",[t._v("We don't need to annotate integration tests with "),e("code",[t._v("#[cfg(test)]")]),t._v(". Cargo knows that\nfiles in the "),e("code",[t._v("tests")]),t._v(" directory are tests.")])]),t._v(" "),e("p",[t._v("These tests will be run with "),e("code",[t._v("cargo test")]),t._v(".")]),t._v(" "),e("div",{staticClass:"custom-block tip"},[e("p",{staticClass:"custom-block-title"},[t._v("Helper Functions")]),t._v(" "),e("p",[t._v("Integration tests can use some helper functions defined in a separate file. Such\nfuctions should be placed under "),e("code",[t._v("tests/{some_subdirectory}")]),t._v(" directory. Then,\n"),e("code",[t._v("cargo test")]),t._v(" will not treat these files as tests and will not try to run them as\nsuch.")])])])}),[],!1,null,null,null);s.default=n.exports}}]);