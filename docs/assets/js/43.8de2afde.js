(window.webpackJsonp=window.webpackJsonp||[]).push([[43],{476:function(a,e,s){"use strict";s.r(e);var t=s(31),n=Object(t.a)({},(function(){var a=this,e=a.$createElement,s=a._self._c||e;return s("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[s("h1",{attrs:{id:"bash-scripting"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#bash-scripting"}},[a._v("#")]),a._v(" Bash Scripting")]),a._v(" "),s("h2",{attrs:{id:"executable-permission"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#executable-permission"}},[a._v("#")]),a._v(" Executable permission")]),a._v(" "),s("p",[s("code",[a._v("chmod u+x script.sh")])]),a._v(" "),s("h2",{attrs:{id:"shabang"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#shabang"}},[a._v("#")]),a._v(" Shabang")]),a._v(" "),s("p",[s("code",[a._v("#!/bin/bash")])]),a._v(" "),s("p",[a._v("Shabang makes sure that the script is executed using the right shell, no matter\nwhich shell the user uses to execute the script file.")]),a._v(" "),s("p",[a._v("We can add some arguments to the shell:")]),a._v(" "),s("p",[s("code",[a._v("#!/bin/bash -v")]),a._v(" - will print each script line before executing it. It's useful\nfor debugging when script suddenly stops at some point and hangs. Also shows\ncomments.")]),a._v(" "),s("p",[s("code",[a._v("#!/bin/bash -x")]),a._v(" - like above, but it will also show variables values. Doesn't\nshow comments.")]),a._v(" "),s("h2",{attrs:{id:"variables"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#variables"}},[a._v("#")]),a._v(" Variables")]),a._v(" "),s("h3",{attrs:{id:"naming"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#naming"}},[a._v("#")]),a._v(" Naming")]),a._v(" "),s("p",[a._v("Only use letters, numbers, and underscores. First character cannot be a number.")]),a._v(" "),s("p",[a._v("It's recommended not to use upper-case names, becasue all default variables are\nupper-case.")]),a._v(" "),s("h3",{attrs:{id:"initialization"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#initialization"}},[a._v("#")]),a._v(" Initialization")]),a._v(" "),s("p",[s("code",[a._v("name=Marcin")])]),a._v(" "),s("p",[a._v("Variable names ae case-sensitive. There can't be spaces around the "),s("code",[a._v("=")]),a._v(". If the\nvalue has spaces, it needs to be in "),s("code",[a._v('""')]),a._v(".")]),a._v(" "),s("h3",{attrs:{id:"usage"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#usage"}},[a._v("#")]),a._v(" Usage")]),a._v(" "),s("p",[s("code",[a._v("echo $name")])]),a._v(" "),s("p",[a._v("Shell will replace the $variable with its value before executing the command. If\nthe variable does not exist, an empty string will be used.")]),a._v(" "),s("p",[a._v("Variable can contain a command and can be executed (can be dangerous!):")]),a._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("myVar")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"rm file1"')]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$myVar")]),a._v("\n")])])]),s("p",[a._v("The above removes "),s("code",[a._v("file1")]),a._v(".")]),a._v(" "),s("h3",{attrs:{id:"subprocesses"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#subprocesses"}},[a._v("#")]),a._v(" Subprocesses")]),a._v(" "),s("p",[a._v("Variables are available only in the process where they were defined. To change\nthat, "),s("code",[a._v("export")]),a._v(" can be used:")]),a._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("export")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("someVar")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("5")]),a._v("\n")])])]),s("p",[a._v("Now, if I run some script from this shell, the "),s("code",[a._v("myVar")]),a._v(" variable will be\nrecongnized there.")]),a._v(" "),s("h3",{attrs:{id:"script-arguments"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#script-arguments"}},[a._v("#")]),a._v(" Script Arguments")]),a._v(" "),s("p",[a._v("When invoking a script, user might pass some arguments. These are available via\nspecial variables: "),s("code",[a._v("$1")]),a._v(", "),s("code",[a._v("$2")]),a._v(", and so on.")]),a._v(" "),s("p",[a._v("It is a good idea to create new variables at the beginning of the script with\nthe argments, so that it is easier to understand what they contain.")]),a._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("name")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),s("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$1")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("directory")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),s("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$2")]),a._v("\n")])])]),s("h3",{attrs:{id:"double-quotes"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#double-quotes"}},[a._v("#")]),a._v(" Double Quotes")]),a._v(" "),s("p",[a._v("If our variables may contain spaces, it is a good idea to usethe varibale with\n"),s("code",[a._v('""')]),a._v('. That way, commands will "understand" that the space is not for a separate\ncommand, but rather a part of filename.')]),a._v(" "),s("p",[a._v("Example:")]),a._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("container")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"'),s("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$1")]),a._v('"')]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("dir")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"'),s("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$2")]),a._v('"')]),a._v("\n\n"),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("mkdir")]),a._v(" -p "),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"'),s("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$dir")]),a._v('"')]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("grep")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"'),s("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$container")]),a._v('"')]),a._v(" shipments.csv "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"'),s("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$dir")]),a._v("/"),s("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$container")]),a._v('.csv"')]),a._v("\n\n"),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("echo")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"Wrote report '),s("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$dir")]),a._v("/"),s("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$container")]),a._v('.csv"')]),a._v("\n")])])]),s("p",[a._v("Multiple variables can be put in one pair of "),s("code",[a._v('""')]),a._v(", as can be seen above Before\nexecution of a given line, the variables are substituted with  actual values. If\n"),s("code",[a._v("dir")]),a._v(" or "),s("code",[a._v("container")]),a._v(" had spaces in it, it is OK, becasue there are "),s("code",[a._v('""')]),a._v(" around\nthe values.")]),a._v(" "),s("p",[a._v("There is a utility "),s("em",[a._v("shellcheck")]),a._v(" (command-line and shellcheck.net) that shows\nissues in script files, i.e. missing "),s("code",[a._v('""')]),a._v(".")]),a._v(" "),s("p",[a._v("ZSH does not require "),s("code",[a._v('""')]),a._v(", because it does not split words from variables as\nseparate commands. It kind of automatically interprets variables as if they were\nin "),s("code",[a._v('""')]),a._v(".")]),a._v(" "),s("blockquote",[s("p",[a._v("ALWAYS USE "),s("code",[a._v('""')]),a._v("!")])]),a._v(" "),s("p",[a._v("Single quotes are used to escape the "),s("code",[a._v("$")]),a._v(".")]),a._v(" "),s("h3",{attrs:{id:"end-of-options"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#end-of-options"}},[a._v("#")]),a._v(" End of Options")]),a._v(" "),s("p",[a._v("When passing arguments to scripts, someone could use "),s("code",[a._v("-")]),a._v(". Often, that would be a\nproblem, it could be interpreted as some command option. Example:")]),a._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[a._v("mkdir")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$1")]),a._v("\n")])])]),s("p",[a._v("Running this script with "),s("code",[a._v("./script.sh -p")]),a._v(" will not create a directory  "),s("code",[a._v("-p")]),a._v(". It\nwill be taken as an option of "),s("code",[a._v("mkdir")]),a._v(".")]),a._v(" "),s("p",[a._v('There is a special "end of options" string: '),s("code",[a._v("--")]),a._v(". Example:")]),a._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[a._v("mkdir")]),a._v(" -- "),s("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$1")]),a._v("\n")])])]),s("p",[a._v("Whatever is in "),s("code",[a._v("$1")]),a._v(", it will be interpreted as an argument, and not an option.")]),a._v(" "),s("p",[a._v("Not all commands understand "),s("code",[a._v("--")]),a._v(" (i.e., "),s("code",[a._v("echo")]),a._v("). That's why it is a good idea to\nuse "),s("code",[a._v("printf")]),a._v(" instead when the printed value is not granted to be safe:")]),a._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("printf")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"%s'),s("span",{pre:!0,attrs:{class:"token entity",title:"\\n"}},[a._v("\\n")]),a._v('"')]),a._v(" "),s("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$variable")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("#OR")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("printf")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"My name is %s and this is the current dir %s'),s("span",{pre:!0,attrs:{class:"token entity",title:"\\n"}},[a._v("\\n")]),a._v('"')]),a._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"'),s("span",{pre:!0,attrs:{class:"token environment constant"}},[a._v("$USER")]),a._v('"')]),a._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"'),s("span",{pre:!0,attrs:{class:"token variable"}},[s("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$(")]),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("pwd")]),s("span",{pre:!0,attrs:{class:"token variable"}},[a._v(")")])]),a._v('"')]),a._v("\n")])])]),s("h3",{attrs:{id:"explicit-names"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#explicit-names"}},[a._v("#")]),a._v(" Explicit Names")]),a._v(" "),s("p",[a._v("It might happen that we need to construct a string containing the variable, like\nthis:")]),a._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("echo")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"'),s("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$v1_")]),s("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$v2")]),a._v('"')]),a._v("\n")])])]),s("p",[a._v("Only $v2 will be printed, becasue the shell will look for variable "),s("code",[a._v("v1_")]),a._v("!\nMitigation:")]),a._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("echo")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token variable"}},[a._v("${v1}")]),a._v("_"),s("span",{pre:!0,attrs:{class:"token variable"}},[a._v("${v2}")]),a._v("\n")])])]),s("p",[a._v("In this case "),s("code",[a._v("_")]),a._v(" was a problem, because "),s("code",[a._v("_")]),a._v(" is a valid character in a variable\nname. The issue would not be there if there was A "),s("code",[a._v(".")]),a._v(", "),s("code",[a._v("/")]),a._v(", or any other\ncharacter that is not valid in a variable name.")]),a._v(" "),s("h3",{attrs:{id:"declare"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#declare"}},[a._v("#")]),a._v(" Declare")]),a._v(" "),s("p",[s("code",[a._v("declare")]),a._v(" allows for more advances variables creation. It allows to set a type\nof varable (default is always string), and others.")]),a._v(" "),s("h2",{attrs:{id:"exit-codes"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#exit-codes"}},[a._v("#")]),a._v(" Exit Codes")]),a._v(" "),s("p",[a._v("UNIX programs can return values in range 0-255. 0 is success, any other code is\nan error. There may be many kinds of errors, so different values can be\nreturned.")]),a._v(" "),s("p",[s("code",[a._v("exit 0")]),a._v(" - success "),s("code",[a._v("exit 1")]),a._v(" - error")]),a._v(" "),s("h2",{attrs:{id:"conditionals"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#conditionals"}},[a._v("#")]),a._v(" Conditionals")]),a._v(" "),s("h3",{attrs:{id:"if-then-else"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#if-then-else"}},[a._v("#")]),a._v(" If-Then-Else")]),a._v(" "),s("p",[a._v("These check the return value (exit code) of a "),s("code",[a._v("testcode")]),a._v(" and act based on it\n(either "),s("code",[a._v("then")]),a._v(" or "),s("code",[a._v("else")]),a._v(").")]),a._v(" "),s("p",[a._v("Multiline:")]),a._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("if")]),a._v(" testcode"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("then")]),a._v("\n   "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# Some script")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("else")]),a._v("\n   "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# Some else script")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("fi")]),a._v("\n")])])]),s("p",[a._v("One-line:")]),a._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("if")]),a._v(" testcode"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("then")]),a._v(" somecode"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("else")]),a._v(" someelsecode"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("fi")]),a._v("\n")])])]),s("p",[s("code",[a._v("else")]),a._v(" is optional.")]),a._v(" "),s("h3",{attrs:{id:"conditional-expressions"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#conditional-expressions"}},[a._v("#")]),a._v(" Conditional Expressions")]),a._v(" "),s("p",[s("code",[a._v("[[ $var ]]")]),a._v(" - check if "),s("code",[a._v("var")]),a._v(" has any value")]),a._v(" "),s("p",[s("code",[a._v('[[ $var = "ok" ]]')]),a._v(" - check if "),s("code",[a._v("var")]),a._v(' equals "ok" (SPACES AROUND '),s("code",[a._v("=")]),a._v("!)")]),a._v(" "),s("p",[s("code",[a._v("[[ -e file1 ]]")]),a._v(" - check if a file "),s("code",[a._v("file1")]),a._v(" exists")]),a._v(" "),s("p",[s("code",[a._v("[[ -d dir1 ]]")]),a._v(" - check if a directory "),s("code",[a._v("dir1")]),a._v(" exists")]),a._v(" "),s("p",[s("code",[a._v("[[ ! testcode ]]")]),a._v(" - NOT (i.e., "),s("code",[a._v("[[ ! -e file1 ]]")]),a._v(" is TRUE when "),s("code",[a._v("file1")]),a._v(" doesn't\nexist)")]),a._v(" "),s("p",[s("code",[a._v("[[ testcode1 && testcode2 ]]")]),a._v(" - AND")]),a._v(" "),s("p",[s("code",[a._v("[[ testcode1 || testcode2 ]]")]),a._v(" - OR")]),a._v(" "),s("blockquote",[s("p",[a._v("Spaces after "),s("code",[a._v("[[")]),a._v(", and spaces before "),s("code",[a._v("]]")]),a._v(" are necessary!")])]),a._v(" "),s("h2",{attrs:{id:"functions"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#functions"}},[a._v("#")]),a._v(" Functions")]),a._v(" "),s("p",[a._v("Definition:")]),a._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("function")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token function-name function"}},[a._v("create_app")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("var1")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),a._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# Global variable")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("local")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token assign-left variable"}},[a._v("var2")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("2")]),a._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# Scoped variable")]),a._v("\n    \n    "),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[a._v("echo")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"Parameter '),s("span",{pre:!0,attrs:{class:"token variable"}},[a._v("$1")]),a._v('"')]),a._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("# The way to return data")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n")])])]),s("p",[a._v("Invocation:")]),a._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[a._v("create_app "),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"argument"')]),a._v("\n")])])])])}),[],!1,null,null,null);e.default=n.exports}}]);