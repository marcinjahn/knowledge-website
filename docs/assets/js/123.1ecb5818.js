(window.webpackJsonp=window.webpackJsonp||[]).push([[123],{592:function(e,t,a){"use strict";a.r(t);var s=a(22),n=Object(s.a)({},(function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h1",{attrs:{id:"nosql"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#nosql"}},[e._v("#")]),e._v(" NoSQL")]),e._v(" "),a("p",[e._v("NoSQL meaning is not that clear, sometimes it's referred as \"Not Only SQL\".\nHowever, such explanation would make SQL databases NoSQL, which doesn't make\nsense (although some people actually think it does). In general, NoSQL databases\nare the modern database systems built for the distributed environments. They\noften are schema-less allowing to write data without predefining its shape\nfirst.")]),e._v(" "),a("p",[e._v("In general, these types of DBs are considered NoSQL:")]),e._v(" "),a("ul",[a("li",[e._v("Document DBs (MongoDB)")]),e._v(" "),a("li",[e._v("Key-Value DBs (Redis)")]),e._v(" "),a("li",[e._v("Wide-Column DBs (Cassandra)")]),e._v(" "),a("li",[e._v("Graph DBs (Gremlin)")])]),e._v(" "),a("h2",{attrs:{id:"document-databases"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#document-databases"}},[e._v("#")]),e._v(" Document Databases")]),e._v(" "),a("p",[e._v('In Document DBs (such as MongoDB) it\'s recommended to keep all related data\ntogether in a document, opposed to having them as separate entites, like in\nRelational DBs. Only this way the Document DB can be "faster than SQL". If we\ndecide to split data into separate documents and try to query them together\n(simulating JOINs) we might end up with slower queries than in SQL DBs.')]),e._v(" "),a("p",[e._v("There is no predefined schema of entities. Each document/entity can have a\ndifferent schema, it's dynamic.")]),e._v(" "),a("p",[e._v("Most often, documents are JSONs.")]),e._v(" "),a("h2",{attrs:{id:"cap-theorem"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#cap-theorem"}},[e._v("#")]),e._v(" CAP Theorem")]),e._v(" "),a("ul",[a("li",[a("strong",[e._v("C")]),e._v(" - Consistency - data in all nodes of DB system are consistent, meaning\nthat reading data from any of them will result in the same data being\nreturned.")]),e._v(" "),a("li",[a("strong",[e._v("A")]),e._v(" - Availability - the data is always available")]),e._v(" "),a("li",[a("strong",[e._v("P")]),e._v(" - Partition tolerance - network issues do not bring the system down")])]),e._v(" "),a("p",[e._v("In case of a network partition, the system can be either Consistent or\nAvailable, not both. Without a partition, both C and A can be delivered.")]),e._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[e._v("MongoDB")]),e._v(" "),a("p",[e._v("MongoDB is a CP system.")])]),e._v(" "),a("p",[e._v("When we choose "),a("em",[e._v("Consistency")]),e._v(", in case of some network failure, we might not be\nable to read the data, because DB cannot be sure if it would be the latest\nversion of that data.")]),e._v(" "),a("p",[e._v("When we choose "),a("em",[e._v("Availability")]),e._v(", in case of some network failure, we cannot be\nsure that the data we're reading is actually the latest version.")]),e._v(" "),a("h3",{attrs:{id:"pacelc"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#pacelc"}},[e._v("#")]),e._v(" PACELC")]),e._v(" "),a("p",[e._v("An extension to PAC is PACELC.  It states that in case of network partitioning\n("),a("strong",[e._v("P")]),e._v(") in a distributed computer system, one has to choose between availability\n("),a("strong",[e._v("A")]),e._v(") and consistency ("),a("strong",[e._v("C")]),e._v(") (as per the CAP theorem), but else ("),a("strong",[e._v("E")]),e._v("), even\nwhen the system is running normally in the absence of partitions, one has to\nchoose between latency ("),a("strong",[e._v("L")]),e._v(") and consistency ("),a("strong",[e._v("C")]),e._v(").")]),e._v(" "),a("h2",{attrs:{id:"sources"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sources"}},[e._v("#")]),e._v(" Sources")]),e._v(" "),a("p",[a("a",{attrs:{href:"https://app.pluralsight.com/paths/skill/querying-and-modifying-data-in-mongodb",target:"_blank",rel:"noopener noreferrer"}},[e._v("Pluralsight"),a("OutboundLink")],1)])])}),[],!1,null,null,null);t.default=n.exports}}]);