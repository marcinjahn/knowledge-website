(window.webpackJsonp=window.webpackJsonp||[]).push([[53],{493:function(e,t,r){"use strict";r.r(t);var a=r(31),s=Object(a.a)({},(function(){var e=this,t=e.$createElement,r=e._self._c||t;return r("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[r("h1",{attrs:{id:"trees"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#trees"}},[e._v("#")]),e._v(" Trees")]),e._v(" "),r("ul",[r("li",[r("strong",[e._v("Dimension")]),e._v(" - maximum amount of children a tree node can have (e.g. binary\ntree - max 2 children)")]),e._v(" "),r("li",[r("strong",[e._v("Height")]),e._v(" of a node - amount of levels from the lowest leaf to that node.")]),e._v(" "),r("li",[r("strong",[e._v("Level")]),e._v(" of a node - tree layers up to that node from the root. The root is\nat level 1.")])]),e._v(" "),r("h2",{attrs:{id:"binary-tree"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#binary-tree"}},[e._v("#")]),e._v(" Binary Tree")]),e._v(" "),r("p",[e._v("A very popular kind of tree is a binary tree, where the dimension parameter\nequals 2.")]),e._v(" "),r("h3",{attrs:{id:"binary-search-tree"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#binary-search-tree"}},[e._v("#")]),e._v(" Binary Search Tree")]),e._v(" "),r("p",[e._v("A binary tree where children with a lesser value are placed on the left, and the\nchildren with greater or equal values are placed on the right.")]),e._v(" "),r("p",[e._v("This tree is well known for the "),r("strong",[e._v("Binary Search")]),e._v(" algorithm that can be applied\nto it (and to sorted arrays).")]),e._v(" "),r("p",[e._v("Characteristics:")]),e._v(" "),r("ul",[r("li",[e._v("the smallest value will be the leaf node on the far left")]),e._v(" "),r("li",[e._v("the greatest value will be the leaf node on the far right")]),e._v(" "),r("li",[e._v("the tree is "),r("strong",[e._v("Balanced")]),e._v(" when:\n"),r("ul",[r("li",[e._v("the right and left side of the root has rougly the same amount of nodes")]),e._v(" "),r("li",[e._v("the height of all leaves is rougly the same")])])]),e._v(" "),r("li",[e._v("the "),r("strong",[e._v("Unbalanced")]),e._v(" tree, in the worst case scenario is like a linked list")])]),e._v(" "),r("h4",{attrs:{id:"complexity"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#complexity"}},[e._v("#")]),e._v(" Complexity")]),e._v(" "),r("ul",[r("li",[r("strong",[e._v("Insertion")]),e._v(": O(log n) (average); O(n) (worst case, when the tree is highly\nunbalanced)")]),e._v(" "),r("li",[r("strong",[e._v("Traversal")]),e._v(": O(n)")]),e._v(" "),r("li",[r("strong",[e._v("Lookup")]),e._v(": O(log n) (average); O(n) (worst case, when the tree is highly\nunbalanced)")]),e._v(" "),r("li",[r("strong",[e._v("Removal")]),e._v(": O(log n) (average); O(n) (worst case, when the tree is highly\nunbalanced)")])]),e._v(" "),r("h3",{attrs:{id:"traversal"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#traversal"}},[e._v("#")]),e._v(" Traversal")]),e._v(" "),r("h4",{attrs:{id:"pre-order"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#pre-order"}},[e._v("#")]),e._v(" Pre-order")]),e._v(" "),r("p",[e._v("The parent first, then the children.")]),e._v(" "),r("p",[e._v("Use-cases:")]),e._v(" "),r("ul",[r("li",[e._v("creating a copy of a tree (with exactly the same placement of nodes)")])]),e._v(" "),r("h4",{attrs:{id:"in-order"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#in-order"}},[e._v("#")]),e._v(" In-order")]),e._v(" "),r("p",[e._v("The left child is first, then the node, then the right child.")]),e._v(" "),r("p",[e._v("Use-cases:")]),e._v(" "),r("ul",[r("li",[e._v("sorting elements in the increasing order (mush be search tree)")])]),e._v(" "),r("h4",{attrs:{id:"post-order"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#post-order"}},[e._v("#")]),e._v(" Post-order")]),e._v(" "),r("p",[e._v("The left and right children are first, then the parent node.")]),e._v(" "),r("p",[e._v("Use-cases:")]),e._v(" "),r("ul",[r("li",[e._v("deleting all nodes of the tree (since we always deal with children first, then\nthe parent)")])])])}),[],!1,null,null,null);t.default=s.exports}}]);