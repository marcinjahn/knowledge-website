(window.webpackJsonp=window.webpackJsonp||[]).push([[30],{483:function(e,t,r){e.exports=r.p+"assets/img/dns.285b70d2.png"},621:function(e,t,r){"use strict";r.r(t);var a=r(22),s=Object(a.a)({},(function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h1",{attrs:{id:"frontmatter-title"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#frontmatter-title"}},[e._v("#")]),e._v(" "+e._s(e.$frontmatter.title))]),e._v(" "),a("p",[e._v("Here's a diagram of how DNS works:")]),e._v(" "),a("p",[a("img",{attrs:{src:r(483),alt:""}})]),e._v(" "),a("p",[e._v("We assume that there is some internal DNS server that we're reaching out to\nfirst. It could be a DNS server hosted on our gateway.")]),e._v(" "),a("p",[e._v("The image presents the worst-case scenario, assuming that nothing was cached.")]),e._v(" "),a("ol",[a("li",[e._v("If the entry is in the DNS cache of the internal DNS server, and the TTL of\nthat entry has not expired, then the response is supplied immediately to the\nclient. Similarly, if the client is requesting an entry that's hosted on the\nserver in a zone file, the answer is supplied immediately to the client.")]),e._v(" "),a("li",[e._v("If the entry is not in the cache of the internal DNS server, or if it is in\nthe cache but the TTL of that entry has expired, then the internal server\nforwards the request to its upstream providers (often called forwarders) to\nrefresh the entry. If the query is in the cache of the forwarder, it will simply\nreturn the answer. If this server has the authoritative name server for the\ndomain, it will simply query that host (skipping ahead in the process to Step\n5).")]),e._v(" "),a("li",[e._v('If the forwarder does not have the request in the cache, it will in turn\nrequest upstream. In this case, though, it will likely query the root name\nservers. The goal in this is to find the "authoritative name server" that has\nthe actual entries (in a zone file) for that domain. In this case, the query is\nmade to the root name servers for ".com".')]),e._v(" "),a("li",[e._v("The root name server will not return the actual answer, but will instead\nreturn the authoritative name server for the top-level domain (TLD)â€”in this\ncase, for .com.")]),e._v(" "),a("li",[e._v("After the forwarder gets this response, it updates its cache with that name\nserver entry, then makes the actual query against that server.")]),e._v(" "),a("li",[e._v('The authoritative server for ".com" returns the authoritative DNS server for\n"example.com".')]),e._v(" "),a("li",[e._v('The forwarder server then makes a request against this final authoritative\nname server. 8. The authoritative name server for example.com returns the actual\nquery "answer" to the forwarder server.')]),e._v(" "),a("li",[e._v("The forwarder name server caches that answer, then sends a reply back to your\ninternal name server.")]),e._v(" "),a("li",[e._v("Your internal DNS server also caches that answer, then forwards it back to\nthe client. The client caches the request in its local cache, then passes the\nrequested information (the DNS response) to the application that requested it\n(like a web browser)")])]),e._v(" "),a("h2",{attrs:{id:"layers"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#layers"}},[e._v("#")]),e._v(" Layers")]),e._v(" "),a("p",[e._v("Logically, there are various layers of DNS:")]),e._v(" "),a("ol",[a("li",[e._v("Local/Internal DNS")]),e._v(" "),a("li",[e._v("External DNS (like "),a("code",[e._v("8.8.8.8")]),e._v(")")]),e._v(" "),a("li",[e._v("Root Servers ("),a("code",[e._v(".")]),e._v(")")]),e._v(" "),a("li",[e._v("TLD Servers (e.g., "),a("code",[e._v(".com")]),e._v(")")]),e._v(" "),a("li",[e._v("Other Authoritative Servers")])]),e._v(" "),a("p",[e._v("There are 13 Root Servers (in reality these are rather clusters than servers).")]),e._v(" "),a("h2",{attrs:{id:"new-approaches"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#new-approaches"}},[e._v("#")]),e._v(" New Approaches")]),e._v(" "),a("p",[e._v("DNS requests are made without encryption. That basically means that ISPs can\ntrack the websited that you visit. There are two approaches to circumvent that:\nDoH and DoT.")]),e._v(" "),a("h3",{attrs:{id:"doh"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#doh"}},[e._v("#")]),e._v(" DoH")]),e._v(" "),a("p",[e._v("DNS over HTTPS - it basically turns DNS servers into HTTP(S) servers listening\non 443 for DNS queries.")]),e._v(" "),a("h3",{attrs:{id:"dot"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#dot"}},[e._v("#")]),e._v(" DoT")]),e._v(" "),a("p",[e._v("DNS over TLS. It's the standard DNS, but encrypted with TLS.")]),e._v(" "),a("h2",{attrs:{id:"source"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#source"}},[e._v("#")]),e._v(" Source")]),e._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"https://www.packtpub.com/product/linux-for-networking-professionals/9781800202399",target:"_blank",rel:"noopener noreferrer"}},[e._v("Linux for Networking\nProfessionals"),a("OutboundLink")],1)])])])}),[],!1,null,null,null);t.default=s.exports}}]);