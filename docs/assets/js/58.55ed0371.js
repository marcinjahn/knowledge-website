(window.webpackJsonp=window.webpackJsonp||[]).push([[58],{503:function(t,a,s){"use strict";s.r(a);var e=s(31),n=Object(e.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"dynamic-memory"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#dynamic-memory"}},[t._v("#")]),t._v(" Dynamic Memory")]),t._v(" "),s("p",[t._v("When a program needs to store huge amount of data in memory, or when the amount\nof data is underterministic at compile time, the "),s("strong",[t._v("heap")]),t._v(' memory segment is\nused. It is "unlimited" (unlike the '),s("strong",[t._v("stack")]),t._v(".")]),t._v(" "),s("h2",{attrs:{id:"heap-commands-in-c"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#heap-commands-in-c"}},[t._v("#")]),t._v(" Heap commands in C")]),t._v(" "),s("p",[t._v("The following functions are used for heap management:")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("malloc")]),t._v(" - allocates memory")]),t._v(" "),s("li",[s("code",[t._v("calloc")]),t._v(" - similar to "),s("code",[t._v("malloc")]),t._v(", but a bit more appropriate for arrays")]),t._v(" "),s("li",[s("code",[t._v("realloc")]),t._v(" - resizes allocated memory block; it can be used as a substitute of\n"),s("code",[t._v("malloc")]),t._v(" or "),s("code",[t._v("free")]),t._v(" with the right arguments passed in")]),t._v(" "),s("li",[s("code",[t._v("free")]),t._v(" - deallocates memory")])]),t._v(" "),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[t._v("C++")]),t._v(" "),s("p",[t._v("C++ additionally uses "),s("code",[t._v("new")]),t._v(" (can be used instead  of "),s("code",[t._v("malloc")]),t._v(") and "),s("code",[t._v("delete")]),t._v(" (can\nbe used instead of "),s("code",[t._v("free")]),t._v(") operators for heap management.")])]),t._v(" "),s("h3",{attrs:{id:"storing-data-on-the-heap"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#storing-data-on-the-heap"}},[t._v("#")]),t._v(" Storing data on the heap")]),t._v(" "),s("h4",{attrs:{id:"using-c"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#using-c"}},[t._v("#")]),t._v(" Using C:")]),t._v(" "),s("div",{staticClass:"language-c extra-class"},[s("pre",{pre:!0,attrs:{class:"language-c"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// allocates a variable on a STACK")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// allocates memory space on a HEAP (for int - 4 bytes) and returns a void pointer to it")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("p "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("malloc")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("sizeof")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("p "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// storing data on the HEAP")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// clear heap allocation")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("free")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("p"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// the compiler stores somewhere info how many bytes were allocated")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// array on the HEAP")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("p "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("malloc")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("20")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("sizeof")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("p "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// first index (could be p[0] = 10;)")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("p "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("20")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// second index")]),t._v("\n")])])]),s("p",[t._v("In the example above the result of "),s("code",[t._v("malloc")]),t._v(" is casted to "),s("code",[t._v("int*")]),t._v(", because\n"),s("code",[t._v("malloc")]),t._v(" returns a "),s("code",[t._v("void*")]),t._v(" pointer.")]),t._v(" "),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[t._v("calloc")]),t._v(" "),s("p",[s("code",[t._v("calloc")]),t._v(" is a good alternative for "),s("code",[t._v("malloc")]),t._v(" in the case of arrays.\nIt accepts two arguments:")]),t._v(" "),s("ul",[s("li",[t._v("size of element")]),t._v(" "),s("li",[t._v("number of elements")])]),t._v(" "),s("p",[t._v("Additionally, "),s("code",[t._v("calloc")]),t._v(" initializes the memory with zeros automatically.")]),t._v(" "),s("p",[s("code",[t._v("malloc(n * sizeof(int))")]),t._v(" ~= "),s("code",[t._v("calloc(n, sizeof(int))")])])]),t._v(" "),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[t._v("Void pointer")]),t._v(" "),s("p",[s("code",[t._v("void*")]),t._v(" is a generic pointer type that needs to be casted to a proper pointer\ntype. It's there because "),s("code",[t._v("malloc")]),t._v("/"),s("code",[t._v("calloc")]),t._v("/"),s("code",[t._v("realloc")]),t._v(' are "universal" methods\nthat can allocate memory for any type. Without '),s("code",[t._v("void*")]),t._v(" we'd need separate sets\nof these functions for all the different types. Additionally we'd need some way\nto deal with custom types defined by the programmer.")])]),t._v(" "),s("div",{staticClass:"custom-block warning"},[s("p",{staticClass:"custom-block-title"},[t._v("Not enough memory")]),t._v(" "),s("p",[t._v("If memory cannot be allocated, "),s("code",[t._v("malloc")]),t._v(" will return "),s("code",[t._v("NULL")]),t._v(".")])]),t._v(" "),s("h4",{attrs:{id:"using-c-2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#using-c-2"}},[t._v("#")]),t._v(" Using C++:")]),t._v(" "),s("div",{staticClass:"language-cpp extra-class"},[s("pre",{pre:!0,attrs:{class:"language-cpp"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// allocates a variable on a STACK")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// a scalar on a HEAP")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("p "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("p "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("delete")]),t._v(" p"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// an array on a HEAP")]),t._v("\np "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("20")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("delete")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" p"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])])])}),[],!1,null,null,null);a.default=n.exports}}]);