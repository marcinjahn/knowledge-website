(window.webpackJsonp=window.webpackJsonp||[]).push([[70],{546:function(t,s,e){"use strict";e.r(s);var a=e(22),n=Object(a.a)({},(function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"grpc-in-net"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#grpc-in-net"}},[t._v("#")]),t._v(" gRPC in .NET")]),t._v(" "),e("p",[t._v("Go "),e("RouterLink",{attrs:{to:"/technologies/networking/grpc.html"}},[t._v("here")]),t._v(" for a general overview of gRPC.")],1),t._v(" "),e("p",[t._v("We can create a new gRPC server project with "),e("code",[t._v("dotnet new grpc")]),t._v(".")]),t._v(" "),e("h2",{attrs:{id:"proto-files"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#proto-files"}},[t._v("#")]),t._v(" Proto Files")]),t._v(" "),e("p",[t._v("The "),e("code",[t._v(".proto")]),t._v(" files are needed by both the server and the client(s). They define\nthe contract. These files contain:")]),t._v(" "),e("ul",[e("li",[t._v("some metadata (like version of protobuf)")]),t._v(" "),e("li",[t._v("listing of endpoints under "),e("code",[t._v("service")])]),t._v(" "),e("li",[t._v("shape of the data ("),e("code",[t._v("message")]),t._v(")")])]),t._v(" "),e("div",{staticClass:"language-protobuf extra-class"},[e("pre",{pre:!0,attrs:{class:"language-protobuf"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("syntax")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"proto3"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("option")]),t._v(" csharp_namespace "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"MyNamespace.gRPC"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"google/protobuf/Timestamp"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("service")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("MeterReadingService")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("rpc")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("AddReading")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ReadingPacket")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("returns")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("StatusMessage")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("message")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ReadingPacket")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("repeated")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token positional-class-name class-name"}},[t._v("ReadingMessage")]),t._v(" Readings "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token positional-class-name class-name"}},[t._v("ReadingStatus")]),t._v(" Successful "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("message")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ReadingMessage")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int32")]),t._v(" CustomerId "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int32")]),t._v(" ReadingValue "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("string")]),t._v(" Notes "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token positional-class-name class-name"}},[t._v("google"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("protobuf"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Timestamp")]),t._v(" ReadingTime "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("reserved")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("reserved")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Successful'")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("message")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("StatusMessage")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token positional-class-name class-name"}},[t._v("ReadingStatus")]),t._v(" Success "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("string")]),t._v(" Message "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("enum")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ReadingStatus")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    Unknown "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    Success "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    Failure "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),e("div",{staticClass:"custom-block tip"},[e("p",{staticClass:"custom-block-title"},[t._v("Empty Response")]),t._v(" "),e("p",[t._v("There's a type that represents empty content - "),e("code",[t._v("google.protobuf.Empty")]),t._v(". We could\nuse that if our rpc(s) did not return any data.")])]),t._v(" "),e("h3",{attrs:{id:"service"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#service"}},[t._v("#")]),t._v(" Service")]),t._v(" "),e("p",[t._v("Under "),e("code",[t._v("service")]),t._v(", the endpoints are listed that the server will be offering, and\nthe client will be able to hit. The endpoints can make use of "),e("code",[t._v("message")]),t._v(" types.")]),t._v(" "),e("h3",{attrs:{id:"message"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#message"}},[t._v("#")]),t._v(" Message")]),t._v(" "),e("p",[t._v("The "),e("code",[t._v("message")]),t._v(" is used to define our structs. The numbers are used for ordering\nof the fields.")]),t._v(" "),e("p",[t._v("The types that we can use are either built-in ones, defined by us, or defined by\n3rd party. Above, we're using "),e("code",[t._v("google.protobuf.Timestamp")]),t._v(" that comes from an\nimport.")]),t._v(" "),e("p",[t._v("If some component of a message is a collection we should add the "),e("code",[t._v("repeated")]),t._v("\nkeyword.")]),t._v(" "),e("h3",{attrs:{id:"enum"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#enum"}},[t._v("#")]),t._v(" Enum")]),t._v(" "),e("p",[t._v("The "),e("code",[t._v("enum")]),t._v(" component works like enumerations in programming languages. The\nnumbers are no longer about ordering. They are the actual values that will be\nused to represent the enums (like in C#).")]),t._v(" "),e("h2",{attrs:{id:"net"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#net"}},[t._v("#")]),t._v(" .NET")]),t._v(" "),e("h3",{attrs:{id:"auto-generated-files"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#auto-generated-files"}},[t._v("#")]),t._v(" Auto-generated Files")]),t._v(" "),e("h4",{attrs:{id:"visual-studio"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#visual-studio"}},[t._v("#")]),t._v(" Visual Studio")]),t._v(" "),e("p",[t._v("In Visual Studio, we can add gRPC Connected Service. There, we point at out\n"),e("code",[t._v(".proto")]),t._v(" file and VS generates various files for us and pulls the needed NuGet\npackages. We have an option to generate Client or Server stuff.")]),t._v(" "),e("h4",{attrs:{id:"dotnet-grpc"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#dotnet-grpc"}},[t._v("#")]),t._v(" dotnet-grpc")]),t._v(" "),e("p",[t._v("There's also a tool that does pretty much the same things as Visual Studio does.")]),t._v(" "),e("div",{staticClass:"language-sh extra-class"},[e("pre",{pre:!0,attrs:{class:"language-sh"}},[e("code",[t._v("dotnet tool "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("install")]),t._v(" dotnet-grpc -g\n")])])]),e("p",[t._v("Then, we can add "),e("code",[t._v(".proto")]),t._v(" files to our project with "),e("code",[t._v("dotnet grpc add-file")]),t._v(". It\nwill also install necessary NuGet dependencies, and generate classes. More info\nis on "),e("a",{attrs:{href:"https://docs.microsoft.com/en-us/aspnet/core/grpc/dotnet-grpc",target:"_blank",rel:"noopener noreferrer"}},[t._v("MSDN"),e("OutboundLink")],1),t._v(".")]),t._v(" "),e("h4",{attrs:{id:"server"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#server"}},[t._v("#")]),t._v(" Server")]),t._v(" "),e("p",[t._v("If we selected the "),e("strong",[t._v("Server")]),t._v(" option, one of the generated file types is the\nclasses for the "),e("code",[t._v("services")]),t._v(" that we defined in our protobuf file. The files are\ncalled the same as the service was called in the "),e("code",[t._v(".proto")]),t._v(" file with the "),e("code",[t._v("Base")]),t._v("\nsuffix. These are base classes that we can inherit from when building our actual\nclasses that are going to handle gRPC communication. The base classes contain\nmethods for the rpc procedures that we've defined in the "),e("code",[t._v(".proto")]),t._v(" file.")]),t._v(" "),e("div",{staticClass:"language-cs extra-class"},[e("pre",{pre:!0,attrs:{class:"language-cs"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("MeterReadingService")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token type-list"}},[e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("MeterReadingServiceBase")])]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("override")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("async")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token return-type class-name"}},[t._v("Task"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("StatusMessage"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("AddReading")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ReadingPacket")]),t._v(" request"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ServelCallContext")]),t._v(" context"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Do something...")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),e("p",[t._v("Another generated type of files are the classes for the "),e("code",[t._v("messages")]),t._v(" we've defined\nin protobuf.")]),t._v(" "),e("h4",{attrs:{id:"client"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#client"}},[t._v("#")]),t._v(" Client")]),t._v(" "),e("p",[t._v("For the "),e("strong",[t._v("Client")]),t._v(" choice, what gets generated is a class representing gRPC\nclient for the gRPC service from the protobuf file. The name is based on the\n"),e("code",[t._v("service")]),t._v(" name from the protobuf file with the "),e("code",[t._v("Client")]),t._v(" suffix.")]),t._v(" "),e("div",{staticClass:"language-cs extra-class"},[e("pre",{pre:!0,attrs:{class:"language-cs"}},[e("code",[e("span",{pre:!0,attrs:{class:"token class-name"}},[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")])]),t._v(" channel "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" GrpcChannel"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("ForAddress")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("url"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// the client requires a channel")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token class-name"}},[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")])]),t._v(" client "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token constructor-invocation class-name"}},[t._v("MeterReaderServiceClient")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("channel"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nclient"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("AddReading")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token range operator"}},[t._v("..")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),e("h3",{attrs:{id:"startup"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#startup"}},[t._v("#")]),t._v(" Startup")]),t._v(" "),e("p",[t._v("When our gRPC service is ready, we need to register it in ASP.Net Core.")]),t._v(" "),e("p",[t._v("We shoulda add the gRPC services:")]),t._v(" "),e("div",{staticClass:"language-cs extra-class"},[e("pre",{pre:!0,attrs:{class:"language-cs"}},[e("code",[t._v("builder"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Services"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("AddGrpc")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Useful for debugging:")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// builder.Services.AddGrpc(options => options.EnableDetailedErrors = true);")]),t._v("\n")])])]),e("p",[t._v("We also need to map our own service as an endpoint:")]),t._v(" "),e("div",{staticClass:"language-cs extra-class"},[e("pre",{pre:!0,attrs:{class:"language-cs"}},[e("code",[t._v("app"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token generic-method"}},[e("span",{pre:!0,attrs:{class:"token function"}},[t._v("MapGrpcService")]),e("span",{pre:!0,attrs:{class:"token generic class-name"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("MeterReadingService"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])])]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),e("p",[t._v("With that setup, gRPC requests will be handled by our class.")]),t._v(" "),e("h3",{attrs:{id:"streaming"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#streaming"}},[t._v("#")]),t._v(" Streaming")]),t._v(" "),e("p",[t._v("If our protobuf supports streaming, we can implement it in .NET as well.\nWe can have uni- or bi-directional streaming.")]),t._v(" "),e("p",[t._v("Here's an example of protobuf with streaming:")]),t._v(" "),e("div",{staticClass:"language-protobuf extra-class"},[e("pre",{pre:!0,attrs:{class:"language-protobuf"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("service")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("MeterReadingService")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("rpc")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("AddReadingStreaming")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("stream")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ReadingPacket")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("returns")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("stream")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ErrorMessage")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),e("p",[t._v("The rpc above represents a bi-directional stream. If we wanted to have\nuni-drectional stream:")]),t._v(" "),e("ul",[e("li",[t._v("from the client - just the input should have a "),e("code",[t._v("stream")])]),t._v(" "),e("li",[t._v("from the server - just the output should have a "),e("code",[t._v("stream")])])]),t._v(" "),e("h4",{attrs:{id:"server-class"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#server-class"}},[t._v("#")]),t._v(" Server class")]),t._v(" "),e("p",[t._v("The auto-generated base class will have a method that we'll need to override:")]),t._v(" "),e("div",{staticClass:"language-csharp extra-class"},[e("pre",{pre:!0,attrs:{class:"language-csharp"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("async")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("override")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token return-type class-name"}},[t._v("Task")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("AddReadingStream")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("IAsyncStreamReader"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("ReadingMessage"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" requestStream"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("IServerStreamWriter"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("ErrorMessage"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" responseStream"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ServerCallContext")]),t._v(" context"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("await")]),t._v(" requestStream"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("MoveNext")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// INPUT STREAM")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token class-name"}},[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")])]),t._v(" msg "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" requestStream"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Current"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n        "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Do something...")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// For example:")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("msg"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("ReadingValue "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("100")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// OUTPUT STREAM")]),t._v("\n            "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("await")]),t._v(" responseStream"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("WriteAsync")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token constructor-invocation class-name"}},[t._v("ErrorMessage")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Value less than 100"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),e("p",[t._v("The client-side code is very similar.")]),t._v(" "),e("h2",{attrs:{id:"authorization"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#authorization"}},[t._v("#")]),t._v(" Authorization")]),t._v(" "),e("p",[t._v('The "standard" auth flow of ASP.NET Core works in gRPC as well. The service\nclasses on the server side may be decorated with the '),e("code",[t._v("[Authorize]")]),t._v(" annotation,\nsimilarly to the HTTP Controllers (what about individual rpc methods?).")]),t._v(" "),e("h2",{attrs:{id:"references"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#references"}},[t._v("#")]),t._v(" References")]),t._v(" "),e("p",[e("a",{attrs:{href:"https://app.pluralsight.com/library/courses/aspdotnet-core-6-using-grpc/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Pluralsight"),e("OutboundLink")],1)])])}),[],!1,null,null,null);s.default=n.exports}}]);