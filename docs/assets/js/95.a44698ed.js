(window.webpackJsonp=window.webpackJsonp||[]).push([[95],{512:function(e,t,a){"use strict";a.r(t);var n=a(22),o=function(e){e.options.__data__block__={mermaid_382ee183:"flowchart LR\n  a((a)) -- f --\x3e b((b))\n",mermaid_382ee1c5:"flowchart LR\n  a((a)) -- f --\x3e b((b))\n  a -- g --\x3e b\n  b -- h --\x3e a\n  b -- i --\x3e a\n  b -- j --\x3e a\n  a -- k --\x3e a\n  b -- l --\x3e b\n",mermaid_382ee204:'flowchart LR\n  a((a)) -- f --\x3e b((b)) -- g --\x3e c((c))\n  a -- "g ○ f" --\x3e c\n',mermaid_382ee242:"flowchart LR\n  a((a)) -- id_a --\x3e a\n\n  b((a)) -- id_b --\x3e b\n",mermaid_64a570e6:"flowchart LR\n  a((a)) -- f --\x3e b((b))\n  b -- id_b --\x3e b\n",mermaid_64a570ac:"flowchart LR\n  a((a)) -- id_b --\x3e a\n\n  a -- g --\x3e b((b))\n",mermaid_64a57068:'flowchart LR\n\n  a -- "h ○ (g ○ f)" --\x3e d\n\n  a -- "g ○ f" --\x3e c\n\n  a((a)) -- f --\x3e b((b)) -- g --\x3e c((c)) -- h --\x3e d((d))\n\n  b -- "h ○ g" --\x3e d\n\n  a -- "(h ○ g) ○ f" --\x3e d\n',mermaid_64a5702e:"flowchart LR\n  a1 --\x3e b2\n  a2 --\x3e b1\n  a3 --\x3e b3\n\n  subgraph A\n    a1\n    a2\n    a3\n  end\n\n  subgraph B\n    b1\n    b2\n    b3\n  end\n",mermaid_64a57020:"flowchart LR\n\na((A)) -- f --\x3e b((B))\na((A)) -- g --\x3e b((B))\na((A)) -- h --\x3e b((B))\n\na -- id_a --\x3e a\nb -- id_b --\x3e b\n",mermaid_64a56f2a:"flowchart LR\n  a1 --\x3e b2\n  a2 --\x3e b1\n  a3 --\x3e b3\n\n  subgraph A\n    a1\n    a2\n    a3\n  end\n\n  subgraph B\n    b1\n    b2\n    b3\n  end\n",mermaid_64a56960:"flowchart LR\n  a1 --\x3e b2\n  a2 --\x3e b1\n  a3 --\x3e b3\n\n  subgraph A\n    a1\n    a2\n    a3\n  end\n\n  subgraph B\n    b1\n    b2\n    b3\n  end\n",mermaid_64a56958:"flowchart LR\n  a1 --\x3e b2\n  a2 --\x3e b1\n  a3 --\x3e b2\n\n  subgraph A\n    a1\n    a2\n    a3\n  end\n\n  subgraph B\n    b1\n    b2\n    b3\n  end\n"}},s=Object(n.a)({},(function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h1",{attrs:{id:"category-theory"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#category-theory"}},[e._v("#")]),e._v(" Category Theory")]),e._v(" "),a("p",[e._v("The point of Category Theory is to unify mathematical theories (like algebra,\ngeometry, set theory, etc.) into terms that could be common among all the\nmathematics. It can also be seen as a higher level of abstraction above\nother mathematical constructs.")]),e._v(" "),a("p",[e._v("Category Theory can be brought down to:")]),e._v(" "),a("ul",[a("li",[e._v("Composition")]),e._v(" "),a("li",[e._v("Identity")])]),e._v(" "),a("p",[e._v("A "),a("strong",[e._v("Category")]),e._v(" is a bunch of "),a("strong",[e._v("objects")]),e._v(". It's not a "),a("strong",[e._v("set")]),e._v(" of objects though,\nsince a set is already quite a loaded term, with its own palette of rules. For\nsimplicity, it's then just easier to say that a category is a bunch of objects.")]),e._v(" "),a("p",[e._v("An "),a("strong",[e._v("object")]),e._v(" is a primitive - it has no properties nor structure. It's like an\natom, or a point, the lowest level of abstraction that we can go down to.")]),e._v(" "),a("p",[e._v("There might be "),a("strong",[e._v("morphisms")]),e._v(" between objects. Here's an example of a morphism\n"),a("em",[e._v("f")]),e._v(" between objects "),a("em",[e._v("a")]),e._v(" and "),a("em",[e._v("b")]),e._v(":")]),e._v(" "),a("Mermaid",{attrs:{id:"mermaid_382ee183",graph:e.$dataBlock.mermaid_382ee183}}),a("p",[e._v("A morphism is an arrow that has a beginning and an end. Between object "),a("em",[e._v("a")]),e._v(" and\nobject "),a("em",[e._v("b")]),e._v(", there can be:")]),e._v(" "),a("ul",[a("li",[e._v("0 morphisms")]),e._v(" "),a("li",[e._v("1 morphism")]),e._v(" "),a("li",[e._v("many morphisms")])]),e._v(" "),a("p",[e._v("An arrow can point from "),a("em",[e._v("a")]),e._v(" to "),a("em",[e._v("b")]),e._v(" and from "),a("em",[e._v("b")]),e._v(" to "),a("em",[e._v("a")]),e._v(" at the same time. Or,\nthere could be arrow(s) starting and ending at the same object.")]),e._v(" "),a("Mermaid",{attrs:{id:"mermaid_382ee1c5",graph:e.$dataBlock.mermaid_382ee1c5}}),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[e._v("Objects")]),e._v(" "),a("p",[e._v("The only reasons why objects exists is to be able to mark the beginnings and\nthe ends of morphisms' arrows.")])]),e._v(" "),a("p",[e._v("So, a Category is a bunch of objects with morphisms between pairs of these\nobjects. A category could be seen as a kind of graph, loosely speaking - there\ncould be an inifinite number of arrows.")]),e._v(" "),a("h2",{attrs:{id:"axioms"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#axioms"}},[e._v("#")]),e._v(" Axioms")]),e._v(" "),a("p",[e._v("Composition and Identity are the fundamental rules of a category.")]),e._v(" "),a("h3",{attrs:{id:"composition"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#composition"}},[e._v("#")]),e._v(" Composition")]),e._v(" "),a("p",[e._v("If there's a morphism taking us from "),a("em",[e._v("a")]),e._v(" to "),a("em",[e._v("b")]),e._v(" and a morphism taking us from\n"),a("em",[e._v("b")]),e._v(" to "),a("em",[e._v("c")]),e._v(", then there has to be a morphism taking us from "),a("em",[e._v("a")]),e._v(" to "),a("em",[e._v("c")]),e._v(" defined\nas: "),a("code",[e._v("g ○ f")]),e._v(". The "),a("code",[e._v("○")]),e._v(" symbol mens that "),a("code",[e._v("g")]),e._v(" is applied after "),a("code",[e._v("f")]),e._v(" ("),a("code",[e._v("g ○ f")]),e._v(" = "),a("code",[e._v("g")]),e._v("\nafter "),a("code",[e._v("f")]),e._v(").")]),e._v(" "),a("Mermaid",{attrs:{id:"mermaid_382ee204",graph:e.$dataBlock.mermaid_382ee204}}),a("p",[e._v("The "),a("code",[e._v("g ○ f")]),e._v(" arrow is a "),a("strong",[e._v("composition")]),e._v(" of arrows "),a("code",[e._v("f")]),e._v(" and "),a("code",[e._v("g")]),e._v(".\nIt's sometimes called "),a("strong",[e._v("multiplication")]),e._v(".")]),e._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[e._v("TIP")]),e._v(" "),a("p",[e._v("There can also be other arrows going from "),a("code",[e._v("a")]),e._v(" to "),a("code",[e._v("c")]),e._v(".")])]),e._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[e._v("TIP")]),e._v(" "),a("p",[e._v("The whole category can be defined by a table of all compositions (not\nmorphisms?) within that category.")])]),e._v(" "),a("h3",{attrs:{id:"identity"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#identity"}},[e._v("#")]),e._v(" Identity")]),e._v(" "),a("p",[e._v("Every object in a category has its "),a("em",[e._v("identity morphism")]),e._v(":")]),e._v(" "),a("Mermaid",{attrs:{id:"mermaid_382ee242",graph:e.$dataBlock.mermaid_382ee242}}),a("h4",{attrs:{id:"composition-with-identity"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#composition-with-identity"}},[e._v("#")]),e._v(" Composition with Identity")]),e._v(" "),a("p",[e._v("Composition of any morphism with identity returns the original morphism:")]),e._v(" "),a("Mermaid",{attrs:{id:"mermaid_64a570e6",graph:e.$dataBlock.mermaid_64a570e6}}),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("id_b ○ f = f\n")])])]),a("p",[e._v("That's the "),a("em",[e._v("right identity")]),e._v(".")]),e._v(" "),a("p",[e._v("We can also reverse the order of the morphisms:")]),e._v(" "),a("Mermaid",{attrs:{id:"mermaid_64a570ac",graph:e.$dataBlock.mermaid_64a570ac}}),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("g ○ id_b = g\n")])])]),a("p",[e._v("That's the "),a("em",[e._v("left identity")]),e._v(".")]),e._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[e._v("TIP")]),e._v(" "),a("p",[e._v("Identity is then like a "),a("code",[e._v("1")]),e._v(" in multiplication: "),a("code",[e._v("a * 1 = a")]),e._v(".")])]),e._v(" "),a("h3",{attrs:{id:"associativity"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#associativity"}},[e._v("#")]),e._v(" Associativity")]),e._v(" "),a("Mermaid",{attrs:{id:"mermaid_64a57068",graph:e.$dataBlock.mermaid_64a57068}}),a("div",{staticClass:"language-sql extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[e._v("h ○ "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("g ○ f"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("h ○ g"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v(" ○ f\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Just like in multiplication:")]),e._v("\na"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("bc"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("ab"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("c\n")])])]),a("h2",{attrs:{id:"example"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#example"}},[e._v("#")]),e._v(" Example")]),e._v(" "),a("p",[e._v("An example of applying category theory could be the following. Let's imagine\nthat we have sets A and B:")]),e._v(" "),a("Mermaid",{attrs:{id:"mermaid_64a5702e",graph:e.$dataBlock.mermaid_64a5702e}}),a("p",[e._v("There is a mapping between A and B, so there exists a function that transforms\nelements from A to elements from B.")]),e._v(" "),a("p",[e._v("Category theory is supposed to unify various mathematical terms or theories\nunder one umbrella. Therefore, we can transform the sets into category\nrepresentation:")]),e._v(" "),a("Mermaid",{attrs:{id:"mermaid_64a57020",graph:e.$dataBlock.mermaid_64a57020}}),a("p",[e._v("A set becomes an object. We have objects "),a("em",[e._v("A")]),e._v(" and "),a("em",[e._v("B")]),e._v(". Between them, three\nmorphisms have been drawn, because the sets A and B had three functions between\nthem.")]),e._v(" "),a("p",[e._v("We can also see that there is an identity defined for each object. In sets, such\nidentity would be a function that takes a set, and returns the same set.")]),e._v(" "),a("p",[e._v("If there was another set - C - and there was a function defined between some\nelement of B and C, we could draw another object - C - with a morphism between B\nand C. Possibly, we could also have a composition consisting of morphisms\nbetween A and B, and B and C.")]),e._v(" "),a("p",[e._v('After creating the set category, we can forget about the origin of that data,\ni.e. that it was a bunch of sets. Now we work on that category using category\ntheory. It\'s an abstraction making it possible to look at a set (a "low-level\nthing") from a higher level of abstraction. It\'s kinda like moving from\nassembler to some high-level language. Instead of a set consisting of some\nelements, we have a table of morphisms that define our new category. They define\nthe interface of this category. The sets themselves have been "shrunk" down to\npoints A and B.')]),e._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[e._v("Programming")]),e._v(" "),a("p",[e._v("In programming, we have types and functions. Types can be seen as sets, and\nfunctions can be seen as functions mapping one set to another.")])]),e._v(" "),a("h2",{attrs:{id:"functions"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#functions"}},[e._v("#")]),e._v(" Functions")]),e._v(" "),a("p",[e._v("In set theory, functions are defined as relations. Relation is a set of tuples\n"),a("em",[e._v("(a,b)")]),e._v(", where "),a("em",[e._v("a ∈ A")]),e._v(" and "),a("em",[e._v("b ∈ B")]),e._v(". We have sets:")]),e._v(" "),a("ul",[a("li",[a("em",[e._v("domain")])]),e._v(" "),a("li",[a("em",[e._v("codomain")]),e._v(" (which is a superset of a "),a("em",[e._v("range")]),e._v(")")])]),e._v(" "),a("p",[e._v("A function takes elements from a "),a("em",[e._v("domain")]),e._v(" and "),a("strong",[e._v("maps")]),e._v(" it to some element from a\n"),a("em",[e._v("codomain")]),e._v(".")]),e._v(" "),a("Mermaid",{attrs:{id:"mermaid_64a56f2a",graph:e.$dataBlock.mermaid_64a56f2a}}),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[e._v("TIP")]),e._v(" "),a("p",[e._v("A relation is a subset of "),a("code",[e._v("A x B")]),e._v(". The domain is the set of elements in "),a("code",[e._v("A")]),e._v(" and\nthe codomain is the set of elements in "),a("code",[e._v("B")]),e._v(".")])]),e._v(" "),a("h3",{attrs:{id:"isomorphism"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#isomorphism"}},[e._v("#")]),e._v(" Isomorphism")]),e._v(" "),a("p",[e._v("A function may be invertible. A function "),a("code",[e._v("y = f(x)")]),e._v(" is invertible when there is\na way to transform it into "),a("code",[e._v("x = g(y)")]),e._v(". Such a function "),a("code",[e._v("f")]),e._v(" has to be\n"),a("em",[e._v("one-to-one")]),e._v(" (which is a synonym of "),a("em",[e._v("injection")]),e._v(") and "),a("em",[e._v("onto")]),e._v(" (which is a synonym\nof "),a("em",[e._v("surjection")]),e._v(").")]),e._v(" "),a("ul",[a("li",[a("strong",[e._v("one-to-one")]),e._v("- there are no two arguments that have the same result.")]),e._v(" "),a("li",[a("strong",[e._v("surjective")]),e._v(" - the range and the codomain are the same")])]),e._v(" "),a("p",[e._v("In other words, "),a("code",[e._v("g")]),e._v(" is a reverse of "),a("code",[e._v("f")]),e._v(", if "),a("code",[e._v("g ○ f = id")]),e._v(" (and "),a("code",[e._v("f ○ g = id")]),e._v("). A\nfunction that is invertible is called an "),a("strong",[e._v("isomorphism")]),e._v(". Here is an example of\nan isomorphic mapping (it's the same illustration as up above):")]),e._v(" "),a("Mermaid",{attrs:{id:"mermaid_64a56960",graph:e.$dataBlock.mermaid_64a56960}}),a("p",[e._v("This is not an isomorphic function:")]),e._v(" "),a("Mermaid",{attrs:{id:"mermaid_64a56958",graph:e.$dataBlock.mermaid_64a56958}}),a("p",[e._v("Given "),a("code",[e._v("b2")]),e._v(", we cannot resolve it to a single element from "),a("code",[e._v("A")]),e._v(" since both "),a("code",[e._v("a1")]),e._v("\nand "),a("code",[e._v("a3")]),e._v(" map to "),a("code",[e._v("b2")]),e._v(".")]),e._v(" "),a("hr"),e._v(" "),a("p",[e._v("Getting back to Category Theory, ismorphism cannot be defined in terms of\ninjective or surjective functions, because these terms have different names in\nthat context.")]),e._v(" "),a("p",[a("em",[e._v("Injection")]),e._v(" (one-to-one) becomes "),a("strong",[e._v("epimorphism")]),e._v(" (epic).")]),e._v(" "),a("p",[a("em",[e._v("Surjection")]),e._v(" (onto) becomes "),a("strong",[e._v("monomorphism")]),e._v(" (monic).")]),e._v(" "),a("div",{staticClass:"custom-block warning"},[a("p",{staticClass:"custom-block-title"},[e._v("WARNING")]),e._v(" "),a("p",[e._v("In Category Theory, if a given morphism is both an epimorphism and monomorphism,\nit doesn't necessarily constitute an isomorphism!")])]),e._v(" "),a("h2",{attrs:{id:"constructs"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#constructs"}},[e._v("#")]),e._v(" Constructs")]),e._v(" "),a("h3",{attrs:{id:"monoid"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#monoid"}},[e._v("#")]),e._v(" Monoid")]),e._v(" "),a("p",[e._v("A monoid is a combination of a set and an operation. In programming, a set is a\ndata type (like a "),a("code",[e._v("DateTime")]),e._v("). A "),a("strong",[e._v("monoid")]),e._v(" is a subset of a "),a("em",[e._v("semigroup")]),e._v(", it is\nmore strict than the latter. A monoid has the following requirements:")]),e._v(" "),a("ul",[a("li",[e._v("operation must be "),a("em",[e._v("binary")]),e._v(" - it acts on two inputs (e.g. addition, or a\nfunction "),a("code",[e._v("(Car, Car) => Car")]),e._v(")")]),e._v(" "),a("li",[e._v("it must be "),a("em",[e._v("associative")]),e._v(" - e.g., "),a("code",[e._v("(1 + 2) + 3 = 1 + (2 + 3)")]),e._v(" - order of\nevaluation does not matter, the result is the same")]),e._v(" "),a("li",[e._v("there's a "),a("em",[e._v("neutral element")]),e._v(", sometimes also called the "),a("em",[e._v("identity element")]),e._v(" -\nit's a value that is neutral in a sense that it does not incur any change, it\ndoes nothing when an operation is applied to it. An example of an identity\nelement in the addition operation is "),a("code",[e._v("0")]),e._v(", because "),a("code",[e._v("a + 0 = a")]),e._v(". For\nmultiplication, the identity element is "),a("code",[e._v("1")]),e._v(", since "),a("code",[e._v("a * 1 = a")]),e._v(".")])]),e._v(" "),a("p",[e._v("A monoid could also be described as a triplet consisiting of:")]),e._v(" "),a("ul",[a("li",[e._v("a set")]),e._v(" "),a("li",[e._v("an operation")]),e._v(" "),a("li",[e._v("an identity element")])]),e._v(" "),a("p",[e._v("The above triplet must satisfy the aforementioned rules.")]),e._v(" "),a("h4",{attrs:{id:"examples"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#examples"}},[e._v("#")]),e._v(" Examples")]),e._v(" "),a("ul",[a("li",[e._v("Addition on numbers, 0 is the identity")]),e._v(" "),a("li",[e._v("Multiplication on numbers, 1 is the identity")]),e._v(" "),a("li",[e._v("AND on boolean numbers, 1 is the identity")]),e._v(" "),a("li",[e._v("OR on boolean numbers, 0 is the identity")]),e._v(" "),a("li",[e._v("Concatenation on a collection, empty collection is the identity")])]),e._v(" "),a("h2",{attrs:{id:"resources"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#resources"}},[e._v("#")]),e._v(" Resources")]),e._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"https://math.libretexts.org/Courses/Monroe_Community_College/MTH_220_Discrete_Math/4%3A_Sets/4.1%3A_An_Introduction_to_Sets",target:"_blank",rel:"noopener noreferrer"}},[e._v("A realy good Set Theory guide on\nlibretexts.org"),a("OutboundLink")],1)]),e._v(" "),a("li",[a("a",{attrs:{href:"https://jeremykun.com/2011/07/09/set-theory-a-primer/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Set Theory Primer"),a("OutboundLink")],1)])])],1)}),[],!1,null,null,null);"function"==typeof o&&o(s);t.default=s.exports}}]);