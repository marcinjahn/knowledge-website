(window.webpackJsonp=window.webpackJsonp||[]).push([[66],{469:function(e,a,t){"use strict";t.r(a);var r=t(31),o=Object(r.a)({},(function(){var e=this,a=e.$createElement,t=e._self._c||a;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h1",{attrs:{id:"cargo"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#cargo"}},[e._v("#")]),e._v(" Cargo")]),e._v(" "),t("p",[e._v("It's a "),t("strong",[e._v("build system")]),e._v(" (turns Rust code into executable binaries) and a\n"),t("strong",[e._v("package manager")]),e._v(" (downloads and compiles project's dependencies).")]),e._v(" "),t("p",[t("code",[e._v("cargo new")]),e._v(" creates a new project from a standard template. There's a\n"),t("code",[e._v("Cargo.toml")]),e._v(" file and the "),t("code",[e._v("src/")]),e._v(" directory.")]),e._v(" "),t("h2",{attrs:{id:"toml-file"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#toml-file"}},[e._v("#")]),e._v(" Toml file")]),e._v(" "),t("p",[e._v("The "),t("code",[e._v("Cargo.toml")]),e._v(" files contains project's metadata (like npm's "),t("code",[e._v("project.json")]),e._v(").\nAfter running the project, "),t("code",[e._v("Cargo.lock")]),e._v(" is created as well, which works like\n"),t("code",[e._v("project-lock.json")]),e._v(" of npm. It specifies the exact version numbers of all the\ndependencies. This way, future builds are reliable.")]),e._v(" "),t("h2",{attrs:{id:"running"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#running"}},[e._v("#")]),e._v(" Running")]),e._v(" "),t("p",[t("code",[e._v("cargo run")]),e._v(" does the following:")]),e._v(" "),t("ul",[t("li",[e._v("compiles the code in debug mode (for maximal error information) using "),t("code",[e._v("cargo build")])]),e._v(" "),t("li",[e._v("executes the binary")])]),e._v(" "),t("p",[e._v("Also, a lot of new files are added to the project. They are all managed by\n"),t("code",[e._v("cargo")]),e._v(".")]),e._v(" "),t("p",[t("code",[e._v("cargo run --release")]),e._v(" compiles a "),t("em",[e._v("release")]),e._v(" build.")]),e._v(" "),t("h2",{attrs:{id:"other-commands"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#other-commands"}},[e._v("#")]),e._v(" Other commands")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("cargo build")]),e._v(' - downloads dependencies and compiles the code. It uses the "rustc" compiler behind the scenes.')]),e._v(" "),t("li",[t("code",[e._v("cargo doc")]),e._v(" -\nbuilds HTML documentation for every dependency in the current project.")]),e._v(" "),t("li",[t("code",[e._v("cargo init")]),e._v(" - initaites a Rust project with pre-existng files in it. "),t("code",[e._v("cargo create")]),e._v(" would create a project from scratch.")]),e._v(" "),t("li",[t("code",[e._v("cargo add")]),e._v(" - adds crates. This subcommand needs to be installed first with "),t("code",[e._v("cargo install cargo-edit")]),e._v(".")])]),e._v(" "),t("h2",{attrs:{id:"crates"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#crates"}},[e._v("#")]),e._v(" Crates")]),e._v(" "),t("p",[e._v("Packages are called "),t("em",[e._v("crates")]),e._v(". The open-source ones are shared at https://crates.io.")])])}),[],!1,null,null,null);a.default=o.exports}}]);