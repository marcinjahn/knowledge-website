(window.webpackJsonp=window.webpackJsonp||[]).push([[40],{512:function(t,s,a){"use strict";a.r(s);var e=a(22),n=Object(e.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"compilation"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#compilation"}},[t._v("#")]),t._v(" Compilation")]),t._v(" "),a("p",[t._v("Our source files go through the following process:")]),t._v(" "),a("ol",[a("li",[t._v("Preprocessor")]),t._v(" "),a("li",[t._v("Compiler")]),t._v(" "),a("li",[t._v("Assembler")]),t._v(" "),a("li",[t._v("Linker")])]),t._v(" "),a("p",[t._v("Let's explain the process based on a simple solution:")]),t._v(" "),a("tabs",[a("tab",{attrs:{name:"main.cpp"}},[a("div",{staticClass:"language-cpp extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token macro property"}},[a("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"source.hpp"')])]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])]),t._v(" "),a("tab",{attrs:{name:"add.cpp"}},[a("div",{staticClass:"language-cpp extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" b"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" b"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])]),t._v(" "),a("tab",{attrs:{name:"add.hpp"}},[a("div",{staticClass:"language-cpp extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" b"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])])])],1),t._v(" "),a("p",[t._v("We can compile the app with:")]),t._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[t._v("g++ main.cpp add.cpp\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# or to change the binary name")]),t._v("\ng++ main.cpp add.cpp -o program\n")])])]),a("p",[t._v("The result is an executable file "),a("code",[t._v("a.out")]),t._v(".")]),t._v(" "),a("h2",{attrs:{id:"preprocessor"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#preprocessor"}},[t._v("#")]),t._v(" Preprocessor")]),t._v(" "),a("p",[t._v("The first step when compiling our program is the "),a("strong",[t._v("Preprocessing")]),t._v(". It handles\nall the lines that start with the "),a("code",[t._v("#")]),t._v(" (e.g., "),a("code",[t._v("#include")]),t._v(" or "),a("code",[t._v("#if")]),t._v(").")]),t._v(" "),a("p",[t._v("To get the output of the preprocessor, we can execute:")]),t._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[t._v("gcc++ -E main.cpp\n")])])]),a("p",[t._v("Here's what we get on stdout:")]),t._v(" "),a("div",{staticClass:"language-cpp extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[t._v("# "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"main.cpp"')]),t._v("\n# "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"<built-in>"')]),t._v("\n# "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"<command-line>"')]),t._v("\n# "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"/usr/include/stdc-predef.h"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),t._v("\n# "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"<command-line>"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v("\n# "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"main.cpp"')]),t._v("\n# "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"source.hpp"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" b"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n# "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"main.cpp"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("If we included some common library like "),a("em",[t._v("iostream")]),t._v(", our file would become huge\nafter the preprocessing stage.")]),t._v(" "),a("p",[t._v("What preprocessor did in this case was just including the content of "),a("code",[t._v("add.hpp")]),t._v("\ndirectly into "),a("code",[t._v("main.cpp")]),t._v(".")]),t._v(" "),a("h2",{attrs:{id:"compiler"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#compiler"}},[t._v("#")]),t._v(" Compiler")]),t._v(" "),a("p",[t._v("The result of preprocessing is handed over to the "),a("strong",[t._v("Compiler")]),t._v(". Compiler\nanalyzes the text of the code and builds a tree (like AST - Abstract Syntaxt\nTree).")]),t._v(" "),a("p",[t._v("We can dump out AST with:")]),t._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[t._v("g++ -fdump-tree-all-graph -g main.cpp add.cpp\n")])])]),a("p",[t._v("The resulting "),a("code",[t._v(".dot")]),t._v(" files can be viewed.")]),t._v(" "),a("hr"),t._v(" "),a("p",[t._v("The next step of the compilation is the generation of the Assemby code.\nHere' how we can generate Assembly code:")]),t._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[t._v("g++ -S add.cpp\n")])])]),a("p",[t._v("Here's the resulting "),a("code",[t._v("add.s")]),t._v(" file:")]),t._v(" "),a("div",{staticClass:"language-asm extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('\t.arch armv8-a\n\t.file\t"add.cpp"\n\t.text\n\t.align\t2\n\t.global\t_Z3addii\n\t.type\t_Z3addii, %function\n_Z3addii:\n.LFB0:\n\t.cfi_startproc\n\tsub\tsp, sp, #16\n\t.cfi_def_cfa_offset 16\n\tstr\tw0, [sp, 12]\n\tstr\tw1, [sp, 8]\n\tldr\tw1, [sp, 12]\n\tldr\tw0, [sp, 8]\n\tadd\tw0, w1, w0\n\tadd\tsp, sp, 16\n\t.cfi_def_cfa_offset 0\n\tret\n\t.cfi_endproc\n.LFE0:\n\t.size\t_Z3addii, .-_Z3addii\n\t.ident\t"GCC: (Ubuntu 9.4.0-1ubuntu1~20.04.1) 9.4.0"\n\t.section\t.note.GNU-stack,"",@progbits\n')])])]),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),a("p",[t._v("This code was generated on an ARM64 machine.")])]),t._v(" "),a("h2",{attrs:{id:"assembler"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#assembler"}},[t._v("#")]),t._v(" Assembler")]),t._v(" "),a("p",[t._v("We can generate object files from our source code with:")]),t._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[t._v("g++ -c main.c\ng++ -c add.c\n")])])]),a("p",[t._v("It will produce "),a("code",[t._v("main.o")]),t._v(" and "),a("code",[t._v("add.o")]),t._v(" files. These are blobs of machine code.\nThey need to be joined together (via the Linker) in a proper way to have the\nfinal executable.")]),t._v(" "),a("p",[t._v("We can explore what's inside of the "),a("code",[t._v(".o")]),t._v(" files with the "),a("strong",[t._v("objdump")]),t._v(" command:")]),t._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[t._v("objdump -t add.o\n")])])]),a("p",[t._v("The result is:")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("add.o:     file format elf64-littleaarch64\n\nSYMBOL TABLE:\n0000000000000000 l    df *ABS*\t0000000000000000 add.cpp\n0000000000000000 l    d  .text\t0000000000000000 .text\n0000000000000000 l    d  .data\t0000000000000000 .data\n0000000000000000 l    d  .bss\t0000000000000000 .bss\n0000000000000000 l    d  .note.GNU-stack\t0000000000000000 .note.GNU-stack\n0000000000000000 l    d  .eh_frame\t0000000000000000 .eh_frame\n0000000000000000 l    d  .comment\t0000000000000000 .comment\n0000000000000000 g     F .text\t0000000000000020 _Z3addii\n")])])]),a("p",[t._v("The last line lists our function "),a("code",[t._v("add")]),t._v(".")]),t._v(" "),a("h2",{attrs:{id:"linker"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#linker"}},[t._v("#")]),t._v(" Linker")]),t._v(" "),a("p",[t._v("Here's how to link the object files into an executable:")]),t._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[t._v("g++ main.o source.o -o program "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# results in a.out")]),t._v("\n")])])]),a("p",[t._v('Linker "glues" together the '),a("code",[t._v(".o")]),t._v(" files. It also can link dynamic libraries\n("),a("code",[t._v(".so")]),t._v(' files). An example of it could be "iostream".')]),t._v(" "),a("div",{staticClass:"language-cpp extra-class"},[a("pre",{pre:!0,attrs:{class:"language-cpp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token macro property"}},[a("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"add.hpp"')])]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token macro property"}},[a("span",{pre:!0,attrs:{class:"token directive-hash"}},[t._v("#")]),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("<iostream>")])]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    std"),a("span",{pre:!0,attrs:{class:"token double-colon punctuation"}},[t._v("::")]),t._v("cout "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" std"),a("span",{pre:!0,attrs:{class:"token double-colon punctuation"}},[t._v("::")]),t._v("endl"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v('In this program, I\'m including "iostream" to make use of the '),a("code",[t._v("cout")]),t._v(" function.")]),t._v(" "),a("p",[t._v("After compilation, we can have a look at the dynamic libraries being linked to\nour program:")]),t._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[t._v("ldd a.out\n")])])]),a("p",[t._v("The result is:")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("linux-vdso.so.1 (0x0000ffff8ff98000)\nlibstdc++.so.6 => /lib/aarch64-linux-gnu/libstdc++.so.6 (0x0000ffff8fd71000)\nlibc.so.6 => /lib/aarch64-linux-gnu/libc.so.6 (0x0000ffff8fbfe000)\nlibm.so.6 => /lib/aarch64-linux-gnu/libm.so.6 (0x0000ffff8fb54000)\n/lib/ld-linux-aarch64.so.1 (0x0000ffff8ff68000)\nlibgcc_s.so.1 => /lib/aarch64-linux-gnu/libgcc_s.so.1 (0x0000ffff8fb30000)\n")])])]),a("p",[t._v("::: Other OSs\nThe "),a("code",[t._v(".so")]),t._v(" files are Linux dynamic libraries. Windows uses "),a("code",[t._v(".dll")]),t._v(", and macOS uses\n"),a("code",[t._v(".dylib")]),t._v(".\n:::")]),t._v(" "),a("p",[t._v("When compiling programs, we can specify expkicitly the dynamic libraries that we\nwant to link, with the "),a("code",[t._v("-l")]),t._v(" flag in g++.")])],1)}),[],!1,null,null,null);s.default=n.exports}}]);