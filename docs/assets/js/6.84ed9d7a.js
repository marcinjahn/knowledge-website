(window.webpackJsonp=window.webpackJsonp||[]).push([[6],{409:function(t,s,a){t.exports=a.p+"assets/img/inifinite-struct-size.8a4fecf5.png"},410:function(t,s,a){t.exports=a.p+"assets/img/struct-of-known-size.da2e858c.png"},411:function(t,s,a){t.exports=a.p+"assets/img/graph-with-rc.db26ad4c.png"},491:function(t,s,a){"use strict";a.r(s);var e=a(31),n=Object(e.a)({},(function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"smart-pointers"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#smart-pointers"}},[t._v("#")]),t._v(" Smart Pointers")]),t._v(" "),e("p",[t._v("The most common kind of pointer in Rust is a "),e("strong",[t._v("reference")]),t._v(". "),e("strong",[t._v("Smart Pointers")]),t._v("\nnot only act like pointers but also have additional metadata and capabilities,\nlike reference counting. There are a few types of smart pointers in Rust.")]),t._v(" "),e("p",[t._v("References borrow data, while smart pointers often own the data.")]),t._v(" "),e("div",{staticClass:"custom-block tip"},[e("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),e("p",[e("code",[t._v("String")]),t._v(" and "),e("code",[t._v("Vec<T>")]),t._v(" are smart pointers! They own some memory and can\nmanipulate it. They have metadata (like capacity).")])]),t._v(" "),e("p",[t._v("There are some built-in smart pointers add there are many in crates. We can\nwrite our smart pointers as well.")]),t._v(" "),e("h2",{attrs:{id:"traits"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#traits"}},[t._v("#")]),t._v(" Traits")]),t._v(" "),e("p",[t._v("Smart pointers are usually structs. They implement "),e("code",[t._v("Deref")]),t._v(" and "),e("code",[t._v("Drop")]),t._v(" traits.")]),t._v(" "),e("h3",{attrs:{id:"deref"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#deref"}},[t._v("#")]),t._v(" Deref")]),t._v(" "),e("p",[e("code",[t._v("Deref")]),t._v(" allows an instance of a struct to behave like a reference, so consuming\ncode can work either with references or smart pointers. It does it by allowing\ncustomizing the behavior of the "),e("em",[t._v("dereference operator")]),t._v(" ("),e("code",[t._v("*")]),t._v(").")]),t._v(" "),e("p",[t._v("Here's an example of how dereferencing may be used with smart pointers, same as\nwith "),e("RouterLink",{attrs:{to:"/programming/rust/ownership.html#dereferencing"}},[t._v("references")]),t._v(":")],1),t._v(" "),e("div",{staticClass:"language-rust extra-class"},[e("pre",{pre:!0,attrs:{class:"language-rust"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("fn")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function-definition function"}},[t._v("main")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" x "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" y "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Box")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("::")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("new")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("x"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n  "),e("span",{pre:!0,attrs:{class:"token macro property"}},[t._v("assert_eq!")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" x"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token macro property"}},[t._v("assert_eq!")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("y"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// compiler calls *(y.deref()) behind the scenes")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),e("p",[e("code",[t._v("Deref")]),t._v(" trait has one method - "),e("code",[t._v("deref()")]),t._v(" - it should return a "),e("code",[t._v("&")]),t._v("\n(immutable) reference. By using "),e("code",[t._v("*")]),t._v(", compiler calls "),e("code",[t._v("deref()")]),t._v(" behind the\nscenes to get a reference, and then it knows how to get value behind that\nreference.")]),t._v(" "),e("h4",{attrs:{id:"deref-coersion"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#deref-coersion"}},[t._v("#")]),t._v(" Deref Coersion")]),t._v(" "),e("p",[t._v("Rust can automatically dereference values to proper types if possible. For\nexample, if a function expects "),e("code",[t._v("&str")]),t._v(" we can pass it "),e("code",[t._v("&String")]),t._v(". The compiler\nwill call "),e("code",[t._v("defer()")]),t._v(" on the "),e("code",[t._v("&String")]),t._v(" to get "),e("code",[t._v("&str")]),t._v(". Compiler can call "),e("code",[t._v("deref()")]),t._v("\nas many times as needed until the proper type is found. E.g., if we had\n"),e("code",[t._v("Box<String>")]),t._v(" it would have to call "),e("code",[t._v("deref()")]),t._v(" twice:")]),t._v(" "),e("blockquote",[e("p",[e("code",[t._v("&Box<String>")]),t._v(" -> "),e("code",[t._v("&String")]),t._v(" -> "),e("code",[t._v("&str")])])]),t._v(" "),e("div",{staticClass:"custom-block tip"},[e("p",{staticClass:"custom-block-title"},[t._v("DerefMut")]),t._v(" "),e("p",[t._v("Similar to "),e("code",[t._v("Deref")]),t._v(" is the "),e("code",[t._v("DerefMut")]),t._v(" trait. It enables resolving of mutable\nreferences "),e("code",[t._v("mut&")]),t._v(".")])]),t._v(" "),e("h3",{attrs:{id:"drop"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#drop"}},[t._v("#")]),t._v(" Drop")]),t._v(" "),e("p",[e("code",[t._v("Drop")]),t._v(" allows writing code that will be run when the a type goes out of scope.\nE.g. it could release some resources like files or connections. It is similar to\n"),e("code",[t._v("IDisposable")]),t._v(" interface in the .NET world. In the case of smart pointers, "),e("code",[t._v("Drop")]),t._v("\nwill deallocate the memory on the heap.")]),t._v(" "),e("p",[t._v("The "),e("code",[t._v("Drop")]),t._v(" trait has one method - "),e("code",[t._v("drop()")]),t._v(". Compiler will call it automatically\nwhen the value goes out of scope.")]),t._v(" "),e("div",{staticClass:"custom-block tip"},[e("p",{staticClass:"custom-block-title"},[t._v("Dropping manually")]),t._v(" "),e("p",[t._v("If we need to destruct an instance before its end of scope, we can call\n"),e("code",[t._v("drop(instance)")]),t._v(". It's not the same "),e("code",[t._v("drop()")]),t._v(" as the one implemented via the\n"),e("code",[t._v("Drop")]),t._v(" trait! Calling that one explicitly is not allowed.")])]),t._v(" "),e("h2",{attrs:{id:"box"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#box"}},[t._v("#")]),t._v(" Box")]),t._v(" "),e("p",[t._v("It's the most straightforward smart pointer. It allows storing data on the\nheap instead of the stack. Only the pointer stays on the stack.")]),t._v(" "),e("h3",{attrs:{id:"storing-data-on-the-heap"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#storing-data-on-the-heap"}},[t._v("#")]),t._v(" Storing Data on the Heap")]),t._v(" "),e("div",{staticClass:"language-rust extra-class"},[e("pre",{pre:!0,attrs:{class:"language-rust"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" b "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Box")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("::")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("new")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 5 is on the heap")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token macro property"}},[t._v("println!")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"b = {}"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" b"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),e("p",[t._v("When "),e("code",[t._v("b")]),t._v(" goes out of scope, both the "),e("code",[t._v("Box")]),t._v(" and "),e("code",[t._v("i32")]),t._v(" it points to get\ndeallocated.")]),t._v(" "),e("h3",{attrs:{id:"recursive-types"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#recursive-types"}},[t._v("#")]),t._v(" Recursive Types")]),t._v(" "),e("p",[t._v("Data on the stack needs to be of a known size. Not all values are. Recursive\ntypes can infinitely contain other values of the same type - they are of unknown\nsize. They should be stored on the heap.")]),t._v(" "),e("p",[t._v("Example:")]),t._v(" "),e("div",{staticClass:"language-rust extra-class"},[e("pre",{pre:!0,attrs:{class:"language-rust"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("enum")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token type-definition class-name"}},[t._v("List")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Cons")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("i32")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("List")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Nil")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" list "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Cons")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Cons")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Cons")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Nil")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),e("p",[t._v("This enum does not compile; its size is unknown.")]),t._v(" "),e("p",[e("img",{attrs:{src:a(409),alt:""}})]),t._v(" "),e("p",[t._v("Here's a version with a "),e("code",[t._v("Box<T>")]),t._v(":")]),t._v(" "),e("div",{staticClass:"language-rust extra-class"},[e("pre",{pre:!0,attrs:{class:"language-rust"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("enum")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token type-definition class-name"}},[t._v("List")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Cons")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("i32")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Box")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("List")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Nil")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" list "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Cons")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Box")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("::")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("new")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Cons")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Box")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("::")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("new")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Cons")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Box")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("::")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("new")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Nil")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),e("p",[t._v("Only the "),e("code",[t._v("i32")]),t._v(" 1 and the first "),e("code",[t._v("Box<T>")]),t._v(" are stored on the stack. The rest is on\nthe heap:")]),t._v(" "),e("p",[e("img",{attrs:{src:a(410),alt:""}})]),t._v(" "),e("h2",{attrs:{id:"rc"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#rc"}},[t._v("#")]),t._v(" Rc")]),t._v(" "),e("p",[t._v("The "),e("code",[t._v("Rc<T>")]),t._v(" smart pointer enables multiple ownership - owning a value by\nmultiple bindings. "),e("em",[t._v("Rc")]),t._v(" stands for "),e("em",[t._v("reference counting")]),t._v(". "),e("code",[t._v("Rc<T>")]),t._v(" keeps track of\nthe number of references to a value. If there are none, the value can be cleaned\nup safely. "),e("code",[t._v("Rc<T>")]),t._v(' is useful when multiple actors in our program will read the\ndata, but we don\'t know which one will be the last to do that. Otherwise, we\ncould use the "normal" ownership concepts. '),e("code",[t._v("Rc")]),t._v(" allows to have multiple\n"),e("strong",[t._v("immutable references")]),t._v(". Mutable references would bring chaos.")]),t._v(" "),e("div",{staticClass:"custom-block danger"},[e("p",{staticClass:"custom-block-title"},[t._v("Multi-threading")]),t._v(" "),e("p",[e("code",[t._v("Rc<T>")]),t._v(" is only for single-threaded scenarios!")])]),t._v(" "),e("div",{staticClass:"custom-block tip"},[e("p",{staticClass:"custom-block-title"},[t._v("Graphs")]),t._v(" "),e("p",[e("code",[t._v("Rc<T>")]),t._v(" is useful in graph-like structures where nodes may be pointed at by\nmultiple other nodes.")])]),t._v(" "),e("div",{staticClass:"language-rust extra-class"},[e("pre",{pre:!0,attrs:{class:"language-rust"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("enum")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token type-definition class-name"}},[t._v("List")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Cons")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("i32")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Rc")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("List")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Nil")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("use")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("crate")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("::")]),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("List")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("::")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Cons")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Nil")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("use")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token namespace"}},[t._v("std"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("::")]),t._v("rc"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("::")])]),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Rc")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("fn")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function-definition function"}},[t._v("main")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" a "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Rc")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("::")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("new")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Cons")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Rc")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("::")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("new")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Cons")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Rc")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("::")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("new")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Nil")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" b "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Cons")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Rc")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("::")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("clone")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("a"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" c "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Cons")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Rc")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("::")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("clone")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("a"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),e("p",[t._v("]"),e("img",{attrs:{src:a(411),alt:""}})]),t._v(" "),e("p",[t._v("There are 3 references to "),e("code",[t._v("a")]),t._v(", all of them encapsulated within "),e("code",[t._v("Rc")]),t._v('.\nThe value will "live" as long as any '),e("code",[t._v("Rc")]),t._v(" instance still points to it.")]),t._v(" "),e("div",{staticClass:"custom-block tip"},[e("p",{staticClass:"custom-block-title"},[t._v("Performance")]),t._v(" "),e("p",[e("code",[t._v("clone()")]),t._v(" on "),e("code",[t._v("Rc")]),t._v(" is cheap. It just increments reference count. It's cheaper to\nclone "),e("code",[t._v("Rc")]),t._v(" than to clone the actual value that "),e("code",[t._v("Rc")]),t._v(" points to.")])]),t._v(" "),e("div",{staticClass:"custom-block tip"},[e("p",{staticClass:"custom-block-title"},[t._v("Check count")]),t._v(" "),e("p",[t._v("We can check the current reference count of "),e("code",[t._v("Rc")]),t._v(" with "),e("code",[t._v("Rc::strong_count(&a)")]),t._v(",\nwhere "),e("code",[t._v("&a")]),t._v(" is a reference to an actual instance of "),e("code",[t._v("Rc")]),t._v(".")])]),t._v(" "),e("h2",{attrs:{id:"refcel"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#refcel"}},[t._v("#")]),t._v(" RefCel")]),t._v(" "),e("p",[t._v("Here are the borrowing rules in Rust:")]),t._v(" "),e("ul",[e("li",[t._v("At any given time, you can have either (but not both of) one mutable reference\nor any number of immutable references.")]),t._v(" "),e("li",[t._v("References must always be valid.")])]),t._v(" "),e("p",[t._v("With references and "),e("code",[t._v("Box<T>")]),t._v(", the borrowing rules are enforced at compile time.\nWith "),e("code",[t._v("RefCell<T>")]),t._v(", these invariants are enforced at runtime. With references, if\nyou break these rules, you’ll get a compiler error. With "),e("code",[t._v("RefCell<T>,")]),t._v(" if you\nbreak these rules, your program will panic and exit.")]),t._v(" "),e("div",{staticClass:"custom-block tip"},[e("p",{staticClass:"custom-block-title"},[t._v("Why?")]),t._v(" "),e("p",[t._v("The "),e("code",[t._v("RefCell<T>")]),t._v(" type is useful when you’re sure your code follows the borrowing\nrules but the compiler is unable to understand and guarantee that.")])]),t._v(" "),e("div",{staticClass:"custom-block danger"},[e("p",{staticClass:"custom-block-title"},[t._v("Multi-threading")]),t._v(" "),e("p",[e("code",[t._v("Rc<T>")]),t._v(" is only for single-threaded scenarios!")])]),t._v(" "),e("p",[t._v("Because "),e("code",[t._v("RefCell<T>")]),t._v(" allows mutable borrows checked at runtime, you can mutate\nthe value inside the "),e("code",[t._v("RefCell<T>")]),t._v(" even when the "),e("code",[t._v("RefCell<T>")]),t._v(" is immutable. This\nis "),e("strong",[t._v("interior mutability")]),t._v(" pattern.")]),t._v(" "),e("blockquote",[e("p",[e("strong",[t._v("Interior mutability")]),t._v(" is a design pattern in Rust that allows you to mutate\ndata even when there are immutable references to that data. Normally, it's\ndisallowed by borrowing rules.")])]),t._v(" "),e("p",[t._v("Here's an example of practical usage of "),e("code",[t._v("RefCell")]),t._v(":")]),t._v(" "),e("div",{staticClass:"language-rust extra-class"},[e("pre",{pre:!0,attrs:{class:"language-rust"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token type-definition class-name"}},[t._v("MockMessenger")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  sent_messages"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("RefCell")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Vec")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">>")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("impl")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("MockMessenger")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("fn")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function-definition function"}},[t._v("new")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("->")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("MockMessenger")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("MockMessenger")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      sent_messages"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("RefCell")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("::")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("new")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token macro property"}},[t._v("vec!")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("impl")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Messenger")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("MockMessenger")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("fn")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function-definition function"}},[t._v("send")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("self")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" message"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("str")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("self")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("sent_messages"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("borrow_mut")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("push")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("::")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("from")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("message"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),e("p",[t._v("The "),e("code",[t._v("send()")]),t._v(" message has an immutable reference to "),e("code",[t._v("self")]),t._v(", because it makes\nsense from the client perspective of that method. Normally, sending data should\nnot modify the state of the sender object. However, our implementation is some\nmock that is supposed to keep every call to "),e("code",[t._v("send()")]),t._v(" for verification later on.\n"),e("code",[t._v("RefCell")]),t._v(" comes into the picture. We can use it as a pointer to a "),e("code",[t._v("Vec")]),t._v(" that\nstores the invocations. We can get a mutable reference to that vector with\n"),e("code",[t._v("borrow_mut()")]),t._v(".")]),t._v(" "),e("div",{staticClass:"custom-block tip"},[e("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),e("p",[e("code",[t._v("RefCell")]),t._v(" also allows to get an immutable reference using "),e("code",[t._v("borrow()")]),t._v(".")])]),t._v(" "),e("p",[e("code",[t._v("RefCell")]),t._v(" keeps track of how many mutable and immutable references were taken\nout of it. "),e("code",[t._v("RefCell")]),t._v(", following the borrowing rules still allows multiple\nimmutable references or only one mutable reference at a time! Breaking these\nrules results in a panic (at runtime).")]),t._v(" "),e("div",{staticClass:"custom-block tip"},[e("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),e("p",[t._v("We can combine the capabilities of "),e("code",[t._v("Rc")]),t._v(" and "),e("code",[t._v("RefCell")]),t._v(" to be able to get\n"),e("strong",[t._v("multiple owners")]),t._v(" of "),e("strong",[t._v("mutable")]),t._v(" data. An example is\n"),e("a",{attrs:{href:"https://doc.rust-lang.org/book/ch15-05-interior-mutability.html#having-multiple-owners-of-mutable-data-by-combining-rct-and-refcellt",target:"_blank",rel:"noopener noreferrer"}},[t._v("here"),e("OutboundLink")],1),t._v(".")])])])}),[],!1,null,null,null);s.default=n.exports}}]);