(window.webpackJsonp=window.webpackJsonp||[]).push([[7],{437:function(t,a,s){t.exports=s.p+"assets/img/do-fcn.bac8c09c.png"},438:function(t,a,s){t.exports=s.p+"assets/img/elevated-vs-regular.9864e8e4.jpeg"},439:function(t,a,s){t.exports=s.p+"assets/img/crossing-abstraction.cd87752e.png"},440:function(t,a,s){t.exports=s.p+"assets/img/map.00871afd.png"},441:function(t,a,s){t.exports=s.p+"assets/img/bind.df773cbe.png"},442:function(t,a,s){t.exports=s.p+"assets/img/typical-fp-functions-in-abstractions.d5a0486d.png"},592:function(t,a,s){"use strict";s.r(a);var e=s(22),n=Object(e.a)({},(function(){var t=this,a=t.$createElement,e=t._self._c||a;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"fundamentals-of-functional-programming"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#fundamentals-of-functional-programming"}},[t._v("#")]),t._v(" Fundamentals of Functional Programming")]),t._v(" "),e("p",[t._v("One of the most significant issues in programming nowadays is how to deal with\nthe increasing complexity of the software. Functional Programming is a way to\nsimplify programs.")]),t._v(" "),e("p",[t._v("In FP (opposed to OOP), separating functions from data is natural. Functions\nencode logic, and data represent inputs and outputs of functions.")]),t._v(" "),e("p",[t._v("In FP, instead of defining steps how to compute something, we define what the\nresult is (imperative vs declarative way).")]),t._v(" "),e("h2",{attrs:{id:"other-approaches"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#other-approaches"}},[t._v("#")]),t._v(" Other Approaches")]),t._v(" "),e("p",[t._v("First, we had programs written in machine code, or later "),e("strong",[t._v("assembly")]),t._v(". They were\nvery explicit and quite difficult to debug, understand, reuse.")]),t._v(" "),e("p",[t._v("Then, "),e("strong",[t._v("Procedural Programming")]),t._v(" came in giving us a way to abstract some\noperations into named pieces of code.")]),t._v(" "),e("p",[t._v("Next, the "),e("strong",[t._v("Object-Oriented Programming")]),t._v(" extended the idea further putting code\ninto objects that hid a lot of implementation details within them. We could\ntreat these objects like black boxes, not caring too much about what they're\ndoing inside.")]),t._v(" "),e("p",[t._v("It turns out that what objects are doing inside is quite crucial sometimes,\nespecially when parallel programming is introduced. Objects may have some\ninternal state, or they may share some data with other objects. The lack of\nknowledge about such things leads to bugs in concurrent scenarios. Invoking some\nmethod might cause state mutation and we might not even know about it. When\nrunning code parallelly we always need to make sure that the classes we use are\nthread-safe.")]),t._v(" "),e("p",[t._v("The next step that is supposed to make everything sound again, is "),e("strong",[t._v("Functional\nProgramming")]),t._v(".")]),t._v(" "),e("h2",{attrs:{id:"lambda"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#lambda"}},[t._v("#")]),t._v(" Lambda")]),t._v(" "),e("p",[t._v("The functional approach has its origin in the works of Alonzo Church and his\n"),e("strong",[t._v("lambda calculus")]),t._v(". Church defined a syntax to write (pure) functions. In his\napproach, a function takes some inputs that are applied into some expression.\nAny computable problem can be presented using lambda calculus. With that, Lambda\ncalculus is Turing complete, it is actually a different way of expressing the\nTuring Machine itself, both approaches are equivalent.")]),t._v(" "),e("p",[t._v("A great intoduction to lambda calculus may be found\n"),e("a",{attrs:{href:"https://personal.utdallas.edu/~gupta/courses/apl/lambda.pdf",target:"_blank",rel:"noopener noreferrer"}},[t._v("here"),e("OutboundLink")],1),t._v(".")]),t._v(" "),e("h2",{attrs:{id:"higher-order-functions"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#higher-order-functions"}},[t._v("#")]),t._v(" Higher-Order Functions")]),t._v(" "),e("p",[t._v("These are functions that either:")]),t._v(" "),e("ul",[e("li",[t._v("accept other functions as inputs")]),t._v(" "),e("li",[t._v("return functions as outputs")]),t._v(" "),e("li",[t._v("both of the above")])]),t._v(" "),e("h2",{attrs:{id:"purity"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#purity"}},[t._v("#")]),t._v(" Purity")]),t._v(" "),e("p",[t._v("In mathematics, functions don't have side effects. Based on some inputs, some\noutput is returned. In programming, that's not always the case. Programs change\nstate.")]),t._v(" "),e("p",[t._v("Functions might be "),e("strong",[t._v("pure")]),t._v(" or "),e("strong",[t._v("impure")]),t._v(". Pure functions are similar to the\nmathematical functions. They do not rely on or modify any state. Their outputs\ndepend solely on the inputs.")]),t._v(" "),e("div",{staticClass:"custom-block tip"},[e("p",{staticClass:"custom-block-title"},[t._v("Impurity will always be there")]),t._v(" "),e("p",[t._v("Some of the code has to be impure. Otherwise, the program wouldn't be able to\ncommunicate the result to the outside world (communicating outside world implies\nimpurity).")])]),t._v(" "),e("p",[t._v("Impure functions can modify (or just read) an external state, and their outputs\ncan depend on some external state as well. They are much harder to reason about,\ntest and they might now work as expected in concurrent scenarios.")]),t._v(" "),e("div",{staticClass:"custom-block tip"},[e("p",{staticClass:"custom-block-title"},[t._v("Impurity cases")]),t._v(" "),e("p",[t._v("If a function modifies its inputs (and the modification is visible\noutside of the function), it's an impure function.")]),t._v(" "),e("p",[t._v("If a function may throw exceptions, it's impure. The outcome might change\ndepending on having a try-catch or not. (so what?)")]),t._v(" "),e("p",[t._v("If the function does any I/O operations (even writing to the console), it's\nimpure. The result might differ depending on the availability and state of\nthe external I/O resource.")])]),t._v(" "),e("p",[t._v("Pure functions ALWAYS return the same output for the same input. Functional\nprograms may be optimized with:")]),t._v(" "),e("ul",[e("li",[t._v("parallelization - different threads can run functions, and no conflicts will\nappear.")]),t._v(" "),e("li",[t._v("lazy evaluation - only evaluates outputs when needed")]),t._v(" "),e("li",[t._v("memoization - caching of results for performance gains")])]),t._v(" "),e("p",[t._v("These techniques are not straightforward with impure functions.")]),t._v(" "),e("div",{staticClass:"custom-block tip"},[e("p",{staticClass:"custom-block-title"},[t._v("Static Methods")]),t._v(" "),e("p",[t._v("Pure functions should be implemented as static methods.")])]),t._v(" "),e("h2",{attrs:{id:"functors"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#functors"}},[t._v("#")]),t._v(" Functors")]),t._v(" "),e("p",[t._v("When a value is wrapped in some container (like an "),e("code",[t._v("Option")]),t._v(" or "),e("code",[t._v("IEnumerable")]),t._v(") we\ncan't apply functions to it:")]),t._v(" "),e("div",{staticClass:"language-csharp extra-class"},[e("pre",{pre:!0,attrs:{class:"language-csharp"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[t._v("Increment")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("Some")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//doesn't work")]),t._v("\n")])])]),e("p",[t._v("This is where "),e("code",[t._v("Map")]),t._v(" comes in. It allows us to extract the value from a container\nand apply a function to it. It returns a functor a well.")]),t._v(" "),e("div",{staticClass:"language-csharp extra-class"},[e("pre",{pre:!0,attrs:{class:"language-csharp"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[t._v("Some")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("Map")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Increment"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//Some(4)")]),t._v("\n")])])]),e("p",[t._v("A type for which a "),e("code",[t._v("Map")]),t._v(" function ("),e("code",[t._v("Select")]),t._v(" in C#) is defined is called a\n"),e("strong",[t._v("functor")]),t._v(". Functors include:")]),t._v(" "),e("ul",[e("li",[t._v("collections (or in general "),e("code",[t._v("IEnumerable")]),t._v(")")]),t._v(" "),e("li",[e("code",[t._v("Option")])])]),t._v(" "),e("p",[t._v("Functors have some inner values to which a function can be applied.\nA map can be represented as follows:")]),t._v(" "),e("p",[e("code",[t._v("(C<T>, (T -> R)) -> C<R>")])]),t._v(" "),e("p",[e("code",[t._v("C<T>")]),t._v(" is a functor.")]),t._v(" "),e("div",{staticClass:"custom-block tip"},[e("p",{staticClass:"custom-block-title"},[t._v("Functions")]),t._v(" "),e("p",[t._v("Functions are functors as well!")])]),t._v(" "),e("h3",{attrs:{id:"map-vs-foreach"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#map-vs-foreach"}},[t._v("#")]),t._v(" Map vs ForEach")]),t._v(" "),e("p",[e("code",[t._v("Map")]),t._v(" is to be used with functions that have no side-effects, while "),e("code",[t._v("ForEach")]),t._v(" is\nto be used with side-effect function. Example:")]),t._v(" "),e("div",{staticClass:"language-csharp extra-class"},[e("pre",{pre:!0,attrs:{class:"language-csharp"}},[e("code",[e("span",{pre:!0,attrs:{class:"token class-name"}},[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")])]),t._v(" names "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token constructor-invocation class-name"}},[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("string")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")])]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Andy"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"John"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Jules"')]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nnames\n  "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("Map")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("n "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token interpolation-string"}},[e("span",{pre:!0,attrs:{class:"token string"}},[t._v('$"Hello ')]),e("span",{pre:!0,attrs:{class:"token interpolation"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),e("span",{pre:!0,attrs:{class:"token expression language-csharp"}},[t._v("n")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")])]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"')])]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// pure function")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("ForEach")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("WriteLine"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("    "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// impure function")]),t._v("\n")])])]),e("p",[e("code",[t._v("Map")]),t._v(" takes a "),e("code",[t._v("Func")]),t._v(", while "),e("code",[t._v("ForEach")]),t._v(" takes an "),e("code",[t._v("Action")]),t._v(".\n"),e("code",[t._v("ForEach")]),t._v(" does not return anything.")]),t._v(" "),e("h3",{attrs:{id:"map-vs-do"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#map-vs-do"}},[t._v("#")]),t._v(" Map vs Do")]),t._v(" "),e("p",[t._v("We should also consider a "),e("code",[t._v("Do")]),t._v(" function (sometimes called "),e("code",[t._v("Tee")]),t._v(" or "),e("code",[t._v("Tap")]),t._v("). It is\nsupposed to be used whenever we need to do some side-effect in the middle of a\ndata flow. We could use "),e("code",[t._v("Map")]),t._v(" for that as well, but "),e("code",[t._v("Map")]),t._v(" shouldn't be used when\nside effects are involved.")]),t._v(" "),e("p",[e("img",{attrs:{src:s(437),alt:""}})]),t._v(" "),e("p",[e("code",[t._v("Do")]),t._v(" invokes some provided action and returns the provided value; the flow may\nbe continued.")]),t._v(" "),e("h2",{attrs:{id:"monads"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#monads"}},[t._v("#")]),t._v(" Monads")]),t._v(" "),e("h3",{attrs:{id:"bind"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#bind"}},[t._v("#")]),t._v(" Bind")]),t._v(" "),e("p",[t._v("A "),e("code",[t._v("Bind")]),t._v(" function ("),e("code",[t._v("SelectMany")]),t._v(" in C#) is useful to flatten lists of lists.")]),t._v(" "),e("p",[e("code",[t._v("Bind")]),t._v(" can be represented as follows:")]),t._v(" "),e("p",[e("code",[t._v("(C<T>, (T -> C<R>)) -> C<R>")])]),t._v(" "),e("p",[t._v("A type that has a "),e("code",[t._v("Bind")]),t._v(" method is a "),e("strong",[t._v("monad")]),t._v(".")]),t._v(" "),e("p",[t._v("Example:")]),t._v(" "),e("div",{staticClass:"language-csharp extra-class"},[e("pre",{pre:!0,attrs:{class:"language-csharp"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("record")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Pet")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token class-name"}},[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("string")])]),t._v(" Name"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("record")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Person")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token class-name"}},[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("string")])]),t._v(" Name"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("IEnumerable"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("Pet"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" Pets"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token class-name"}},[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")])]),t._v(" people "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token constructor-invocation class-name"}},[t._v("Person")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"George"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token constructor-invocation class-name"}},[t._v("List"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("Pet"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token constructor-invocation class-name"}},[t._v("Pet")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"dog"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token constructor-invocation class-name"}},[t._v("Pet")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"cat"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token constructor-invocation class-name"}},[t._v("Person")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Peter"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token constructor-invocation class-name"}},[t._v("List"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("Pet"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token constructor-invocation class-name"}},[t._v("Pet")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"hamster"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token constructor-invocation class-name"}},[t._v("Person")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Jady"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token constructor-invocation class-name"}},[t._v("List"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("Pet"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token class-name"}},[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")])]),t._v(" animals "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" people"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("Bind")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("p "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" p"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Pets"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// ["dog", "cat", "hamster"]')]),t._v("\n")])])]),e("p",[t._v("A "),e("code",[t._v("Map")]),t._v(" would return a list of lists. "),e("code",[t._v("Bind")]),t._v(" is much more suitable here.\nThe "),e("code",[t._v("Person[]")]),t._v(" type is a monad.")]),t._v(" "),e("h3",{attrs:{id:"return"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#return"}},[t._v("#")]),t._v(" Return")]),t._v(" "),e("p",[t._v("A monad must also have a "),e("code",[t._v("Return")]),t._v(' function defined. It\'s a function that wraps a\n"normal" value '),e("code",[t._v("T")]),t._v(" into a monadic value "),e("code",[t._v("C<T>")]),t._v(".")]),t._v(" "),e("p",[e("code",[t._v("Return")]),t._v(" can be represented as follows:")]),t._v(" "),e("p",[e("code",[t._v("T -> C<T>")])]),t._v(" "),e("p",[t._v("An example of a "),e("code",[t._v("Return")]),t._v(" function could be a function that turns items into a\nlist, or a "),e("code",[t._v("Some")]),t._v(" method of "),e("code",[t._v("Option")]),t._v(".")]),t._v(" "),e("div",{staticClass:"custom-block tip"},[e("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),e("p",[e("code",[t._v("IEnumerable")]),t._v(" and "),e("code",[t._v("Option")]),t._v(" are both "),e("strong",[t._v("functors")]),t._v(" and "),e("strong",[t._v("monads")]),t._v(".")]),t._v(" "),e("p",[t._v("Every monad is also a functor.\nNot every functor is a monad.")])]),t._v(" "),e("h2",{attrs:{id:"regular-and-elevated-values"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#regular-and-elevated-values"}},[t._v("#")]),t._v(" Regular and Elevated Values")]),t._v(" "),e("p",[t._v("In general, in our programs, we're dealing with either "),e("em",[t._v("regular values")]),t._v(" or\n"),e("em",[t._v("elevated values")]),t._v(".")]),t._v(" "),e("p",[e("img",{attrs:{src:s(438),alt:""}})]),t._v(" "),e("p",[e("strong",[t._v("NOTE:")]),t._v(" The image above has regular/elevated naming reversed. Sorry, my bad!")]),t._v(" "),e("p",[t._v('"Primitive" data types like '),e("code",[t._v("int")]),t._v(", "),e("code",[t._v("string")]),t._v(", "),e("code",[t._v("bool")]),t._v(" are "),e("em",[t._v("regular values")]),t._v(". The\ntypes that contain other types are "),e("em",[t._v("elevated values")]),t._v(" ("),e("code",[t._v("List<T>")]),t._v(", "),e("code",[t._v("Task<T>")]),t._v(",\n"),e("code",[t._v("Option<T>")]),t._v("). Note that the regular values do not actually need to be primitive\ndata types, they can also be instances of classes like "),e("code",[t._v("Person")]),t._v(" or whatever.\nIt's just a simplified view of the matter.")]),t._v(" "),e("p",[t._v("We can look at various functions that operate on data as either:")]),t._v(" "),e("ul",[e("li",[t._v("returning the same level of abstraction")]),t._v(" "),e("li",[t._v("crossing abstraction")])]),t._v(" "),e("p",[e("img",{attrs:{src:s(439),alt:""}})]),t._v(" "),e("p",[t._v("Examples:")]),t._v(" "),e("ol",[e("li",[e("code",[t._v("(int i) => i.ToString()")])]),t._v(" "),e("li",[e("code",[t._v("(users) => users.Filter(u => u.LoggedIn)")])]),t._v(" "),e("li",[e("code",[t._v("Task.CompletedTask(task)")])]),t._v(" "),e("li",[e("code",[t._v("numbers.Sum()")])])]),t._v(" "),e("h3",{attrs:{id:"map-and-bind"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#map-and-bind"}},[t._v("#")]),t._v(" Map and Bind")]),t._v(" "),e("p",[t._v("Using this classification, we can look see the following relations:")]),t._v(" "),e("p",[e("img",{attrs:{src:s(440),alt:""}})]),t._v(" "),e("p",[e("img",{attrs:{src:s(441),alt:""}})]),t._v(" "),e("p",[t._v("The functions accepted by these two functions differ in the fact that "),e("code",[t._v("Bind")]),t._v("\nrequires a function that crosses the abstraction upwards.")]),t._v(" "),e("div",{staticClass:"custom-block tip"},[e("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),e("p",[t._v("Working with "),e("em",[t._v("regular values")]),t._v(" only is inefficient and requires things such as\nchecking for "),e("code",[t._v("null")]),t._v(", using loops, etc. Working on the "),e("em",[t._v("elevated values")]),t._v("\nabstraction level makes it possible to fluently chain function calls.")])]),t._v(" "),e("p",[e("img",{attrs:{src:s(442),alt:""}})]),t._v(" "),e("h3",{attrs:{id:"reducing-a-list-to-a-single-value"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#reducing-a-list-to-a-single-value"}},[t._v("#")]),t._v(" Reducing a list to a single value")]),t._v(" "),e("p",[t._v("Point 4. on one of the illustrations above shows the case of functions\nthat bring the value from the "),e("em",[t._v("elevated")]),t._v(" level to the "),e("em",[t._v("regular")]),t._v(" level.")]),t._v(" "),e("p",[t._v("In FP speak, reducing a list of values into a single value is called "),e("strong",[t._v("fold")]),t._v(" or\n"),e("strong",[t._v("reduce")]),t._v(". In .NET we have LINQ's "),e("code",[t._v("Aggregate")]),t._v(". Such function takes an\n"),e("em",[t._v("accumulator")]),t._v(" and a "),e("em",[t._v("reducer")]),t._v(" function.")]),t._v(" "),e("div",{staticClass:"custom-block tip"},[e("p",{staticClass:"custom-block-title"},[t._v("Lemon Juice Analogy")]),t._v(" "),e("p",[t._v("A real-world analogy of "),e("em",[t._v("reduce")]),t._v(" is turning lemons into juice. In that analogy,\nlemons constitute a list that will be reduced. Glass in an "),e("em",[t._v("accumulator")]),t._v(". If 0\nlemons are provided, an empty glass is returned. If there are some lemons, the\nstate of the glass will be modified with each lemon being squeezed (by a reducer\nfunction).")])]),t._v(" "),e("div",{staticClass:"custom-block tip"},[e("p",{staticClass:"custom-block-title"},[t._v("LINQ")]),t._v(" "),e("p",[t._v("Some of the LINQ functions simplify the pattern: "),e("code",[t._v("Sum")]),t._v(", "),e("code",[t._v("Average")]),t._v(", etc.")]),t._v(" "),e("p",[t._v("Here's how "),e("code",[t._v("Sum")]),t._v(" could look like:")]),t._v(" "),e("div",{staticClass:"language-csharp extra-class"},[e("pre",{pre:!0,attrs:{class:"language-csharp"}},[e("code",[t._v("list"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("Aggregate")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("acc"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" item"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" acc "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" item"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])])]),t._v(" "),e("p",[t._v("This functionality could also be useful when we want to combine multiple\nfunctions into one function. A good example is validation. We could have\nmultiple functions that validate a request, but we'd want to have just one entry\npoint to execute them.")]),t._v(" "),e("div",{staticClass:"language-csharp extra-class"},[e("pre",{pre:!0,attrs:{class:"language-csharp"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token return-type class-name"}},[t._v("Validator"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("T"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("CombineValidators")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("IEnumerable"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("Validator"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("T"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" validators"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v("\n  t "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" validators"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("Aggreagate")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("Valid")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("t"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("acc"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" validator"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" acc"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("Bind")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("_ "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("validator")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("t"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),e("div",{staticClass:"custom-block tip"},[e("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),e("p",[e("code",[t._v("Aggregate")]),t._v(" is so generic that it could be used to implement "),e("code",[t._v("Map")]),t._v(", "),e("code",[t._v("Bind")]),t._v(", or\n"),e("code",[t._v("Where")]),t._v("!")])]),t._v(" "),e("h2",{attrs:{id:"references"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#references"}},[t._v("#")]),t._v(" References")]),t._v(" "),e("ul",[e("li",[e("a",{attrs:{href:"https://adit.io/posts/2013-04-17-functors,_applicatives,_and_monads_in_pictures.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://adit.io/posts/2013-04-17-functors,_applicatives,_and_monads_in_pictures.html"),e("OutboundLink")],1)]),t._v(" "),e("li",[e("a",{attrs:{href:"http://learnyouahaskell.com/chapters",target:"_blank",rel:"noopener noreferrer"}},[t._v("http://learnyouahaskell.com/chapters"),e("OutboundLink")],1)]),t._v(" "),e("li",[t._v("Functional Programming in C# by Enrico Buonanno")]),t._v(" "),e("li",[e("a",{attrs:{href:"https://www.youtube.com/watch?v=PLVCscCY4xI",target:"_blank",rel:"noopener noreferrer"}},[t._v("Turing Machines - Computer Science Was Created By Accident\n(YT)"),e("OutboundLink")],1)]),t._v(" "),e("li",[e("a",{attrs:{href:"https://personal.utdallas.edu/~gupta/courses/apl/lambda.pdf",target:"_blank",rel:"noopener noreferrer"}},[t._v("Lambda Calculus"),e("OutboundLink")],1)])])])}),[],!1,null,null,null);a.default=n.exports}}]);