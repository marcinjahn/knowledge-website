(window.webpackJsonp=window.webpackJsonp||[]).push([[76],{485:function(t,e,r){"use strict";r.r(e);var a=r(31),s=Object(a.a)({},(function(){var t=this,e=t.$createElement,r=t._self._c||e;return r("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[r("h1",{attrs:{id:"rust"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#rust"}},[t._v("#")]),t._v(" Rust")]),t._v(" "),r("h2",{attrs:{id:"why-rust"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#why-rust"}},[t._v("#")]),t._v(" Why Rust?")]),t._v(" "),r("p",[t._v("Rust eliminates bugs related to invalid data access. These bugs stand for 70% of\nall reportedly.")]),t._v(" "),r("p",[t._v("Rust is memory-safe without imposing any runtime costs.")]),t._v(" "),r("p",[t._v("Other languages can also be safe, but require runtme checks that slows them\ndown. Rust provides both "),r("strong",[t._v("safety")]),t._v(" and "),r("strong",[t._v("control")]),t._v(".")]),t._v(" "),r("p",[t._v("Rust's goals:")]),t._v(" "),r("ul",[r("li",[t._v("Safety")]),t._v(" "),r("li",[t._v("Productivity/Performance")]),t._v(" "),r("li",[t._v("Control")])]),t._v(" "),r("h3",{attrs:{id:"safety"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#safety"}},[t._v("#")]),t._v(" Safety")]),t._v(" "),r("ul",[r("li",[t._v("no dangling pointers")]),t._v(" "),r("li",[t._v("no data races (inability to determine how a program will behave from run to\nrun). Rust will not allow to modify variable in different threads.")]),t._v(" "),r("li",[t._v("no buffer overflow (accessing array elements at index that doesn't exist)")]),t._v(" "),r("li",[t._v("no iterator invalidation - changing a thing being iterated midway through")]),t._v(" "),r("li",[t._v("no integer overflow in debug mode")])]),t._v(" "),r("p",[t._v('Sometimes a term "fearless concurrency" is used to express the safety that Rust\ngives to programmers.')]),t._v(" "),r("p",[t._v("Data within Rust is immutable by default.")]),t._v(" "),r("h3",{attrs:{id:"productivity-performance"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#productivity-performance"}},[t._v("#")]),t._v(" Productivity/Performance")]),t._v(" "),r("p",[t._v("Rust provides very informative error messages.\nThere is no Garbage Collector")]),t._v(" "),r("h3",{attrs:{id:"control"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#control"}},[t._v("#")]),t._v(" Control")]),t._v(" "),r("p",[t._v("Programmers have cntrol over how data structures are laid out in memory and how\nthey're accessed. There are some sensible defaults as well.")]),t._v(" "),r("ul",[r("li",[t._v('Data may be stored on a "stack" or on the "heap".')]),t._v(" "),r("li",[t._v('"Reference counting" might be added.')]),t._v(" "),r("li",[t._v("Own types of pointers might be created for a particular access pattern.")])]),t._v(" "),r("h2",{attrs:{id:"downsides"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#downsides"}},[t._v("#")]),t._v(" Downsides")]),t._v(" "),r("p",[t._v("Rust is not good with cyclic data structures. Implementing doubly-linked list\nmight not be easy for a beginner in Rust.")]),t._v(" "),r("p",[t._v("Compilation is slower than in peer languages.")]),t._v(" "),r("p",[t._v('Rust has steep learning curve due to it being "large". Lots of functionalities,\nkeywords, etc.')]),t._v(" "),r("h2",{attrs:{id:"references"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#references"}},[t._v("#")]),t._v(" References")]),t._v(" "),r("p",[r("a",{attrs:{href:"https://doc.rust-lang.org/book/",target:"_blank",rel:"noopener noreferrer"}},[t._v("The Rust Programming Language Book"),r("OutboundLink")],1),t._v(" "),r("a",{attrs:{href:"https://fasterthanli.me/articles/working-with-strings-in-rust",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://fasterthanli.me/articles/working-with-strings-in-rust"),r("OutboundLink")],1)])])}),[],!1,null,null,null);e.default=s.exports}}]);