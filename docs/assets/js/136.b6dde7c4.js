(window.webpackJsonp=window.webpackJsonp||[]).push([[136],{621:function(e,t,a){"use strict";a.r(t);var s=a(22),o=Object(s.a)({},(function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h2",{attrs:{id:"objects"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#objects"}},[e._v("#")]),e._v(" Objects")]),e._v(" "),a("p",[a("code",[e._v("k api-resources")]),e._v(" lists all resources types of a cluster.")]),e._v(" "),a("p",[e._v("Object's schema may be explained with "),a("code",[e._v("k explain <thing>")]),e._v(" (e.g. "),a("code",[e._v("k explain node")]),e._v("\nor "),a("code",[e._v("k explain node.spec")]),e._v("). To see the complete schema use "),a("code",[e._v("k explain pods --recursive")]),e._v(".")]),e._v(" "),a("h3",{attrs:{id:"sections"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sections"}},[e._v("#")]),e._v(" Sections")]),e._v(" "),a("p",[e._v("Objects have sections. Some of them are common, some are different between\nobject types:")]),e._v(" "),a("p",[a("img",{attrs:{src:"https://i.imgur.com/MqdW4JF.png",alt:""}})]),e._v(" "),a("p",[e._v('All objects have the "Type Metadata" and "Object Metadata" sections. Not all\nobject types have "Spec" and "Status" sections. Such objects typically are for\nstatic data and do not have an associated controller (e.g. "Event" objects)')]),e._v(" "),a("p",[e._v('"Spec" and "Status" are the most important. User specifies "Spec" and reads\n"Status". Controllers are responsible for turning "Spec" into "Status". They\nread the "Spec" and write the "Status":')]),e._v(" "),a("p",[a("img",{attrs:{src:"https://i.imgur.com/pstHD4R.png",alt:""}})]),e._v(" "),a("h4",{attrs:{id:"type-metadata"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#type-metadata"}},[e._v("#")]),e._v(" Type Metadata")]),e._v(" "),a("p",[a("code",[e._v("apiVersion")]),e._v(" and "),a("code",[e._v("kind")]),e._v(" specify the API version and the type of the object. API\nversion is the schema used to describe the object. There can be many versions\nfor a given object type. Usually only one schema exists for each type.")]),e._v(" "),a("h4",{attrs:{id:"metadata"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#metadata"}},[e._v("#")]),e._v(" Metadata")]),e._v(" "),a("p",[a("code",[e._v("metadata")]),e._v(" section contains object's metadata:")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("name")])]),e._v(" "),a("li",[a("code",[e._v("labels")])]),e._v(" "),a("li",[a("code",[e._v("annotations")])]),e._v(" "),a("li",[a("code",[e._v("resourceVersion")])]),e._v(" "),a("li",[a("code",[e._v("managedFields")])]),e._v(" "),a("li",[e._v("others...")])]),e._v(" "),a("h4",{attrs:{id:"spec"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#spec"}},[e._v("#")]),e._v(" Spec")]),e._v(" "),a("p",[e._v("Specific to each object kind. It is used for configuration of the object.")]),e._v(" "),a("h4",{attrs:{id:"status"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#status"}},[e._v("#")]),e._v(" Status")]),e._v(" "),a("p",[e._v("It is specific to each object kind. It's the last observed state of the thing\nthe object represents.")]),e._v(" "),a("p",[e._v('Some "Status" sections have "Condition". It contains vaious factors that\nindicate the health of the object. I.e., node has info about PIDPressure,\nMemoryPressure, DiskPressure and Ready.')]),e._v(" "),a("p",[e._v("Once an object is created from a YAML, Kubernetes will add additional\ninformation to it (e.g. "),a("code",[e._v("status")]),e._v(", and various metadata). The source YAML != YAML\nin Kubernetes")])])}),[],!1,null,null,null);t.default=o.exports}}]);