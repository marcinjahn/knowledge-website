(window.webpackJsonp=window.webpackJsonp||[]).push([[133],{618:function(e,s,t){"use strict";t.r(s);var a=t(22),i=Object(a.a)({},(function(){var e=this,s=e.$createElement,t=e._self._c||s;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h1",{attrs:{id:"linux-from-scratch"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#linux-from-scratch"}},[e._v("#")]),e._v(" Linux From Scratch")]),e._v(" "),t("p",[e._v("This is a breakdown of the LFS book.")]),e._v(" "),t("h2",{attrs:{id:"notes"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#notes"}},[e._v("#")]),e._v(" Notes")]),e._v(" "),t("ul",[t("li",[e._v("sticky bit - file can be removed only by its owner even if directory is\naccessible to multiple users. "),t("code",[e._v("/tmp")]),e._v(" uses 777 with sticky-bit. Thanks to it\nanyone is able to create/read/execute in "),t("code",[e._v("/tmp")]),e._v(", but only owner of a given\nfile can remove it.")]),e._v(" "),t("li",[e._v("login and non-login shell - login shell loads "),t("code",[e._v("bash_profile")]),e._v(" (which loads\nother things like "),t("code",[e._v(".bashrc")]),e._v("). Non-login shell may be started only when login\nshell session exists, and it loads "),t("code",[e._v(".bashrc")]),e._v(" directly.")])]),e._v(" "),t("h3",{attrs:{id:"cross-compilers"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#cross-compilers"}},[e._v("#")]),e._v(" Cross-compilers")]),e._v(" "),t("p",[e._v("Cross-compiler is a compiler that builds programs on machine A, but the programs\nare supposed to run on machine B.")]),e._v(" "),t("h3",{attrs:{id:"toolchain"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#toolchain"}},[e._v("#")]),e._v(" Toolchain")]),e._v(" "),t("p",[e._v("Some of the most important packages on linux:")]),e._v(" "),t("ul",[t("li",[t("em",[e._v("binutils")]),e._v(" - contains "),t("code",[e._v("ld")]),e._v(" (linker) and "),t("code",[e._v("as")]),e._v(" (assembler), and lots of other\ntools")]),e._v(" "),t("li",[t("em",[e._v("glibc")]),e._v(" - GNU standard C library (provides basic things like "),t("code",[e._v("open")]),e._v(", "),t("code",[e._v("read")]),e._v(",\n"),t("code",[e._v("write")]),e._v(", "),t("code",[e._v("printf")]),e._v(", etc.).")]),e._v(" "),t("li",[t("em",[e._v("gcc")]),e._v(" - GNU Compiler Collection (C and C++ among others)")]),e._v(" "),t("li",[t("em",[e._v("libgcc")]),e._v(" - internal library used by GCC")])]),e._v(" "),t("p",[e._v("The installation order:")]),e._v(" "),t("ol",[t("li",[t("em",[e._v("binutils")]),e._v(" - linker and assembler are required by gcc's and glibc's\n"),t("code",[e._v("configure")]),e._v(" scripts.")]),e._v(" "),t("li",[t("em",[e._v("gcc")])]),e._v(" "),t("li",[e._v("sanitized Linux API headers - allows glibc to interface with kernel's\nfeatures")]),e._v(" "),t("li",[t("em",[e._v("glibc")])]),e._v(" "),t("li",[t("em",[e._v("libstdc++")])])]),e._v(" "),t("h3",{attrs:{id:"package-managers"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#package-managers"}},[e._v("#")]),e._v(" Package Managers")]),e._v(" "),t("p",[e._v("Package manager tracks the files installed by applications making it easy to\nupdate and remove software.")]),e._v(" "),t("p",[e._v("Approaches:")]),e._v(" "),t("ul",[t("li",[e._v("installing each package in separate directory, and creating a symlink to\nexecutable in some shared directory (e.g. "),t("code",[e._v("/usr")]),e._v(").")]),e._v(" "),t("li",[e._v("timestamp-based - package manager records the time of package installation.\nLater it can find package's files by looking at timestamp of the files on the\nsystem. This will not work if multiple packages are being installed at the\nsame time.")]),e._v(" "),t("li",[e._v("package archives - RPMs and DEBs use that. The package's structure is made in\nan archive and recreated on the target system.")])]),e._v(" "),t("h2",{attrs:{id:"issues"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#issues"}},[e._v("#")]),e._v(" Issues")]),e._v(" "),t("ul",[t("li",[e._v("Kernel 3.2 - I have 5.x...")]),e._v(" "),t("li",[e._v("After downloading all packages from FTP, and checking their md5 I got the\nfollowing: "),t("code",[e._v("md5sum: man-pages-5.12.tar.xz: No such file or directory")]),e._v(". It\nturns out that FTP had version 5.13 of that package only. Is it a problem?")])]),e._v(" "),t("h2",{attrs:{id:"steps"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#steps"}},[e._v("#")]),e._v(" Steps")]),e._v(" "),t("h3",{attrs:{id:"chapter-2-prerequisites"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#chapter-2-prerequisites"}},[e._v("#")]),e._v(" Chapter 2 - prerequisites")]),e._v(" "),t("ol",[t("li",[e._v("Install Ubuntu 20.04 in a VM (I used Gnome Boxes)")]),e._v(" "),t("li",[e._v("Install all the missing packages (accoridng to version-check.sh)")]),e._v(" "),t("li",[e._v("Create a new partition for LFS (~20GB) and mount it.")])]),e._v(" "),t("div",{staticClass:"language-sh extra-class"},[t("pre",{pre:!0,attrs:{class:"language-sh"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[e._v("mkdir")]),e._v(" -pv "),t("span",{pre:!0,attrs:{class:"token variable"}},[e._v("$LFS")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("sudo")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("mount")]),e._v(" -v -t ext4 /dev/vda2 "),t("span",{pre:!0,attrs:{class:"token variable"}},[e._v("$LFS")]),e._v("\n")])])]),t("ol",{attrs:{start:"4"}},[t("li",[e._v("Create "),t("code",[e._v("/sources")]),e._v(" directory on the LFS partition.")])]),e._v(" "),t("h3",{attrs:{id:"chapter-3-downloading-sources"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#chapter-3-downloading-sources"}},[e._v("#")]),e._v(" Chapter 3 - downloading sources")]),e._v(" "),t("ol",[t("li",[e._v("Download all software packages and patches from the FTP mirror of LFS, and\ncheck md5 checksums.")])]),e._v(" "),t("h3",{attrs:{id:"chapter-4-bootstrap-lfs-partition"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#chapter-4-bootstrap-lfs-partition"}},[e._v("#")]),e._v(" Chapter 4 - bootstrap LFS partition")]),e._v(" "),t("ol",[t("li",[e._v("Create some dirs in LFS partition ("),t("code",[e._v("/etc")]),e._v(", "),t("code",[e._v("/var")]),e._v(", "),t("code",[e._v("/lib64")]),e._v(", "),t("code",[e._v("/usr/bin")]),e._v(",\n"),t("code",[e._v("/usr/sbin")]),e._v(", "),t("code",[e._v("/usr/lib")]),e._v(").")]),e._v(" "),t("li",[e._v("Create "),t("code",[e._v("/tools")]),e._v(" directory for cross-compiler to be installed in.")]),e._v(" "),t("li",[e._v("Add "),t("code",[e._v("lfs")]),e._v(" user and group to the host system.")]),e._v(" "),t("li",[t("code",[e._v("chown")]),e._v(" directories in the LFS partition by the "),t("code",[e._v("lfs")]),e._v(" user.")]),e._v(" "),t("li",[e._v("Log in as "),t("code",[e._v("lfs")]),e._v(" in a terminal session.")]),e._v(" "),t("li",[e._v("Create "),t("code",[e._v(".bash_profile")]),e._v(" and "),t("code",[e._v(".bashrc")]),e._v(" files for "),t("code",[e._v("lfs")]),e._v(" user.")])]),e._v(" "),t("h3",{attrs:{id:"chapter-5-building-cross-compiler-and-its-associated-tools"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#chapter-5-building-cross-compiler-and-its-associated-tools"}},[e._v("#")]),e._v(" Chapter 5 - building cross-compiler and its associated tools")]),e._v(" "),t("ol",[t("li",[e._v("Build Binutils (pass 1)")]),e._v(" "),t("li",[e._v("Build GCC (pass 1)")]),e._v(" "),t("li",[e._v("Build sanitized Linux API headers")]),e._v(" "),t("li",[e._v("Build glibc")]),e._v(" "),t("li",[e._v("Build libstdc++ (pass 1)")])]),e._v(" "),t("h3",{attrs:{id:"chapter-6-cross-compiling-temporary-tools"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#chapter-6-cross-compiling-temporary-tools"}},[e._v("#")]),e._v(" Chapter 6 - cross-compiling temporary tools")]),e._v(" "),t("ol",[t("li",[e._v("Build M4")]),e._v(" "),t("li",[e._v("Build Ncurses")]),e._v(" "),t("li",[e._v("Build Bash")]),e._v(" "),t("li",[e._v("Build Coreutils")]),e._v(" "),t("li",[e._v("Build Diffutils - by mistake I did make install before make. Later I rerun\nmake install. Is it OK?")]),e._v(" "),t("li",[e._v("Build File - File on host needs to be in version 5.40? I have 5.38")]),e._v(" "),t("li",[e._v("Build Findutils")]),e._v(" "),t("li",[e._v("Build Gawk")]),e._v(" "),t("li",[e._v("Build Grep")]),e._v(" "),t("li",[e._v("Build Gzip")]),e._v(" "),t("li",[e._v("Build Make")]),e._v(" "),t("li",[e._v("Build Patch")]),e._v(" "),t("li",[e._v("Build sed")]),e._v(" "),t("li",[e._v("Build tar")]),e._v(" "),t("li",[e._v("Build Xz")]),e._v(" "),t("li",[e._v("Build Binutils (pass 2)")]),e._v(" "),t("li",[e._v("Build GCC (pass 2)")])]),e._v(" "),t("h3",{attrs:{id:"chapter-7-chroot"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#chapter-7-chroot"}},[e._v("#")]),e._v(" Chapter 7 - chroot")]),e._v(" "),t("ol",[t("li",[e._v("Change ownership of dirs in $LFS to root.")]),e._v(" "),t("li",[e._v("Create console and null devices in $LFS/dev.")]),e._v(" "),t("li",[e._v("Mount Virtual Kernel File Systems on $LFS ("),t("code",[e._v("dev")]),e._v(", "),t("code",[e._v("proc")]),e._v(", "),t("code",[e._v("sys")]),e._v(", "),t("code",[e._v("run")]),e._v(").")]),e._v(" "),t("li",[e._v("Chroot on "),t("code",[e._v("$LFS")]),e._v(" - "),t("code",[e._v("$LFS/etc/passwd")]),e._v(' doesn\'t exist so "I have no name!" will\nappear instead of user name in bash.')])]),e._v(" "),t("div",{staticClass:"language-sh extra-class"},[t("pre",{pre:!0,attrs:{class:"language-sh"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[e._v("sudo")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("chroot")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[e._v('"'),t("span",{pre:!0,attrs:{class:"token variable"}},[e._v("$LFS")]),e._v('"')]),e._v(" /usr/bin/env -i "),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[t("span",{pre:!0,attrs:{class:"token environment constant"}},[e._v("HOME")])]),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("/root "),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[t("span",{pre:!0,attrs:{class:"token environment constant"}},[e._v("TERM")])]),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),t("span",{pre:!0,attrs:{class:"token string"}},[e._v('"'),t("span",{pre:!0,attrs:{class:"token environment constant"}},[e._v("$TERM")]),e._v('"')]),e._v(" "),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[t("span",{pre:!0,attrs:{class:"token environment constant"}},[e._v("PS1")])]),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),t("span",{pre:!0,attrs:{class:"token string"}},[e._v("'(lfs chroot) \\u:\\w\\$ '")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[t("span",{pre:!0,attrs:{class:"token environment constant"}},[e._v("PATH")])]),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("/usr/bin:/usr/sbin /bin/bash --login +h\n")])])]),t("ol",{attrs:{start:"6"}},[t("li",[e._v("Create Linux directories according to FHS (Filesystem Hierarchy Standard).")]),e._v(" "),t("li",[e._v("Link "),t("code",[e._v("/etc/mtab")]),e._v(" to "),t("code",[e._v("/proc/self/mounts")])]),e._v(" "),t("li",[e._v("Create "),t("code",[e._v("/etc/hosts")]),e._v(".")]),e._v(" "),t("li",[e._v("Create "),t("code",[e._v("/etc/passwd")]),e._v(".")]),e._v(" "),t("li",[e._v("Create "),t("code",[e._v("/etc/group")]),e._v(".")]),e._v(" "),t("li",[e._v('Create "tester" user (needed for some tests later on).')]),e._v(" "),t("li",[e._v("Start a new shell to make use of the "),t("code",[e._v("/etc/passwd")]),e._v(" and "),t("code",[e._v("/etc/group")]),e._v('. Shell\nnow properly shows "root" as a user.')]),e._v(" "),t("li",[e._v("Create files for logs for various programs (login, agetty, init)")]),e._v(" "),t("li",[e._v("Build Libstdc++ (pass 2).")]),e._v(" "),t("li",[e._v("Build Gettext.")]),e._v(" "),t("li",[e._v("Build Bison.")]),e._v(" "),t("li",[e._v("Build Perl.")]),e._v(" "),t("li",[e._v("Build Python.")]),e._v(" "),t("li",[e._v("Build Texinfp.")]),e._v(" "),t("li",[e._v("Build Util-linux")]),e._v(" "),t("li",[e._v("Cleanup doc files and .la files")]),e._v(" "),t("li",[e._v("Delete the "),t("code",[e._v("$LFS/tools")]),e._v(" directory, we no longer need it.")]),e._v(" "),t("li",[e._v("Backup current work ("),t("code",[e._v("$LFS")]),e._v(")")])]),e._v(" "),t("h3",{attrs:{id:"chapter-8"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#chapter-8"}},[e._v("#")]),e._v(" Chapter 8")]),e._v(" "),t("ol",[t("li",[e._v("Build man-pages")]),e._v(" "),t("li",[e._v("Copy Iana-Etc "),t("code",[e._v("services")]),e._v(" and "),t("code",[e._v("protocols")]),e._v(" to "),t("code",[e._v("/etc")]),e._v(".")]),e._v(" "),t("li",[e._v("Build and test Glibc - hard to say if "),t("code",[e._v("make check")]),e._v(" was successful or not (44\nfails, 67 unsupported, 16 xfail)")]),e._v(" "),t("li",[e._v("Install locales, timezones")]),e._v(" "),t("li",[e._v("Build Zlib")]),e._v(" "),t("li",[e._v("Build Bzip2")]),e._v(" "),t("li",[e._v("Build Xz")]),e._v(" "),t("li",[e._v("Build File")]),e._v(" "),t("li",[e._v("Build Readline")])]),e._v(" "),t("p",[e._v("page 116 (M4 is next)")])])}),[],!1,null,null,null);s.default=i.exports}}]);