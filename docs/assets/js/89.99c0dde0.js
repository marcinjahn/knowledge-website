(window.webpackJsonp=window.webpackJsonp||[]).push([[89],{535:function(t,n,e){"use strict";e.r(n);var s=e(31),a=Object(s.a)({},(function(){var t=this,n=t.$createElement,e=t._self._c||n;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"javascript-the-weird-parts"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#javascript-the-weird-parts"}},[t._v("#")]),t._v(" JavaScript - The Weird Parts")]),t._v(" "),e("h2",{attrs:{id:"videos"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#videos"}},[t._v("#")]),t._v(" Videos")]),t._v(" "),e("p",[e("a",{attrs:{href:"https://www.udemy.com/course/understand-javascript/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Udemy"),e("OutboundLink")],1),t._v(" "),e("a",{attrs:{href:"https://www.youtube.com/watch?v=Bv_5Zv5c-Ts",target:"_blank",rel:"noopener noreferrer"}},[t._v("YT"),e("OutboundLink")],1)]),t._v(" "),e("h2",{attrs:{id:"definitions"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#definitions"}},[t._v("#")]),t._v(" Definitions")]),t._v(" "),e("p",[e("strong",[t._v("Hoisting")]),t._v(" - before code in a file is executed, the engine looks at all\nfunctions and variables, and reserves space for them in the memory. That's why\nwe can call a function that has been defined later in the code. Variables\n("),e("code",[t._v("var")]),t._v(") get "),e("code",[t._v("undefined")]),t._v(" value during hoisting, even though they could have some\nproper assignments (i.e., "),e("code",[t._v("var a = 4")]),t._v(").")]),t._v(" "),e("p",[e("strong",[t._v("Execution Context")]),t._v(" - every code is executed in some Execution Context. There\nis a Global Exectuion Context, which has:")]),t._v(" "),e("ul",[e("li",[t._v("global object (i.e., "),e("code",[t._v("window")]),t._v(")")]),t._v(" "),e("li",[e("code",[t._v("this")]),t._v(" variable - set to the global object")]),t._v(" "),e("li",[t._v("outer object - for Global Execution Context, it's "),e("code",[t._v("null")]),t._v(".")])]),t._v(" "),e("p",[t._v("Each function call creates a new Execution Context, and it's put on top of the\nstack.")]),t._v(" "),e("p",[e("strong",[t._v("Lexical Environment")]),t._v(" - it depends from where a given code is placed. Is it a\nglobal (most outer) space? Is it in some function? Depending from it, the code\nmight work differently. I.e., if we want to use some variable that was not\ndefined in a current Execution Context, based on Lexical Environment, the outer\nreference is examined. I.e., if there is a function defined in the global space,\nthe global space could contain some variable that we're using in the function.\nThis creates a "),e("em",[t._v("Scope Chain")]),t._v(".")]),t._v(" "),e("p",[e("strong",[t._v("Scope Chain")]),t._v(" - a chain of outer references. If we have function defined in\nanother function - that creates another element in the chain.")]),t._v(" "),e("p",[t._v('Execution Context Stack will always be "linear" - one parent, one child.\nHowever, scope chain may have multiple contexts at the same level - i.e., all\nfunctions defined in global space (which is their Lexical Environment).')]),t._v(" "),e("p",[e("strong",[t._v("Event Queue")]),t._v(" - there is a queue of events that have some handlers attached\n(i.e. for clicks). This queue is handled by JS engine ONLY when the Execution\nContext Stack is empty. I.e., if some long function is running, no handlers will\nrun. However, the events get added to the Queue as they happen (asynchronously,\nand concurrently to the currently executing code).")]),t._v(" "),e("h2",{attrs:{id:"facts"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#facts"}},[t._v("#")]),t._v(" Facts")]),t._v(" "),e("p",[e("strong",[t._v("Default parameter value")]),t._v(" - if a function has some argument and we don't pass\nanything, the value of it will be "),e("code",[t._v("undefined")]),t._v(" in the function.")]),t._v(" "),e("p",[e("strong",[t._v("Operators return values")]),t._v(" - operators in JS act like functions. They do return\nvalues! Examples:")]),t._v(" "),e("ul",[e("li",[t._v("an assignment operator ("),e("code",[t._v("=")]),t._v(") returns the value that was assigned.")]),t._v(" "),e("li",[t._v("an OR operator ("),e("code",[t._v("||")]),t._v(") returns the first value (from left to right) that\ncoerces to "),e("code",[t._v("true")]),t._v(". I.e., "),e("code",[t._v('false || "hi"')]),t._v(" returns "),e("code",[t._v('"hi"')]),t._v(" "),e("code",[t._v('"Hello" || "Hi"')]),t._v("\nreturns "),e("code",[t._v('"Hello"')]),t._v(".")])]),t._v(" "),e("p",[t._v("The second one is useful for short conditionals:")]),t._v(" "),e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" a "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("getValueOrNot")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("||")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'default value'")]),t._v("\n")])])]),e("p",[t._v("In the above example, if "),e("code",[t._v("getValueOrNot()")]),t._v(" returns non-truthy value (like\n"),e("code",[t._v("null")]),t._v(", "),e("code",[t._v("undefined")]),t._v(", "),e("code",[t._v('""')]),t._v(", "),e("code",[t._v("0")]),t._v(" (!)) the "),e("code",[t._v("'default value'")]),t._v(" will be used instead.")]),t._v(" "),e("p",[e("strong",[t._v("Multiple script tags")]),t._v(" - if we have multiple JS scripts attached to HTML, all\nof them actually work in the same Global Context. It works as if all the files\nwere concatenated together into on file. If something gets set in the Global\nContext in one file, other files see it.")]),t._v(" "),e("h3",{attrs:{id:"this"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#this"}},[t._v("#")]),t._v(" this")]),t._v(" "),e("ul",[e("li",[e("p",[e("strong",[t._v("Global")])]),t._v(" "),e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[t._v("console"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),e("p",[t._v("Returns a "),e("code",[t._v("Window")]),t._v(".")])]),t._v(" "),e("li",[e("p",[e("strong",[t._v("in a function")])]),t._v(" "),e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[t._v("a")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("a")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    console"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),e("p",[t._v("Again, returns a "),e("code",[t._v("Window")]),t._v(".")])]),t._v(" "),e("li",[e("p",[e("strong",[t._v("in an object's method")])]),t._v(" "),e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" a "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    name"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"1"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("func")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        console"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\na"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("func")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),e("p",[t._v("Returns "),e("code",[t._v("a")]),t._v(". If "),e("code",[t._v("a")]),t._v(" became a prototype of some other object "),e("code",[t._v("b")]),t._v(", "),e("code",[t._v("this")]),t._v("\nwould refer to "),e("code",[t._v("b")]),t._v(" instead.")])]),t._v(" "),e("li",[e("p",[e("strong",[t._v("function defined in an object's method")])]),t._v(" "),e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" a "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    name"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"1"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("func")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("innerfunc")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            console"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("innerfunc")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\na"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("func")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),e("p",[t._v("Returns a "),e("code",[t._v("Window")]),t._v(" (!).")])])]),t._v(" "),e("h3",{attrs:{id:"iife"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#iife"}},[t._v("#")]),t._v(" IIFE")]),t._v(" "),e("p",[t._v("How IIFEs work:")]),t._v(" "),e("ol",[e("li",[e("p",[t._v("I can place any expression and JS will not complain. I.e.,")]),t._v(" "),e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[e("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'some string'")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    name"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"John"')]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])]),t._v(" "),e("li",[e("p",[t._v("I can't put a function EXPRESSION on its own, because it would be interpreted\nas a function STATEMENT:")]),t._v(" "),e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("name")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Do something")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),e("p",[t._v("This will throw an error:")]),t._v(" "),e("blockquote",[e("p",[t._v("Uncaught SyntaxError: Function statements require a function name")])])]),t._v(" "),e("li",[e("p",[t._v('To "trick" JS into interpreting it as a FUNCTION EXPRESSION, we wrap it in\nparentheses:')]),t._v(" "),e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("name")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Do something")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),e("p",[t._v("Now, since the line does not start from a "),e("code",[t._v("function")]),t._v(" keyword, JS interpreter\nno longer expects a FUNCTION STATEMENT.")])]),t._v(" "),e("li",[e("p",[t._v("To run our function expression immediately, we just add "),e("code",[t._v("()")]),t._v(" to invoke it:")]),t._v(" "),e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("name")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Do something")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),e("p",[t._v("The invocation can be done inside or outside of wrapping parentheses:")]),t._v(" "),e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("name")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Do something")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])])])]),t._v(" "),e("p",[t._v("The way it works is that function expression returns an object - a function\nitself. We can then execute it, like any function.")]),t._v(" "),e("p",[t._v("As a good practice, putting a semicolon before IIFE might help if some code\nloaded before our file does not use semicolons, causing interpreter to be\nconfused somehow.")]),t._v(" "),e("h3",{attrs:{id:"primitives-vs-objects"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#primitives-vs-objects"}},[t._v("#")]),t._v(" Primitives vs Objects")]),t._v(" "),e("p",[t._v("I can create a primitive like this: "),e("code",[t._v('a = "john"')]),t._v(". I can also create an object:\n"),e("code",[t._v('b = new String("John")')]),t._v(". The methods/properties of String are defined on\n"),e("code",[t._v("String.prototype")]),t._v(". So how are we able to invoke them on primitive (i.e.,\n"),e("code",[t._v("a.length")]),t._v(')? JS engine "boxes" the primitive into an object behind the scenes\nand then accesses the property/method (this happens only for strings and\narrays).')]),t._v(" "),e("h4",{attrs:{id:"new-vs"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#new-vs"}},[t._v("#")]),t._v(" new vs ...")]),t._v(" "),e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[t._v("a "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("Number")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"3"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("      "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// returns a primitive (USE THIS ONE)")]),t._v("\na "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Number")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"3"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// returns an object")]),t._v("\n")])])]),e("ul",[e("li",[e("strong",[t._v("null is object?")]),t._v(" - a bug in JS is that "),e("code",[t._v("typeof null")]),t._v(" returns "),e("code",[t._v('"object"')]),t._v(".")])])])}),[],!1,null,null,null);n.default=a.exports}}]);