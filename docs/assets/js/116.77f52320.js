(window.webpackJsonp=window.webpackJsonp||[]).push([[116],{608:function(e,a,t){"use strict";t.r(a);var s=t(22),r=Object(s.a)({},(function(){var e=this,a=e.$createElement,t=e._self._c||a;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h1",{attrs:{id:"cargo"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#cargo"}},[e._v("#")]),e._v(" Cargo")]),e._v(" "),t("p",[e._v("It's a "),t("strong",[e._v("build system")]),e._v(" (turns Rust code into executable binaries) and a\n"),t("strong",[e._v("package manager")]),e._v(" (downloads and compiles project's dependencies).")]),e._v(" "),t("p",[t("code",[e._v("cargo new")]),e._v(" creates a new project from a standard template. There's a\n"),t("code",[e._v("Cargo.toml")]),e._v(" file and the "),t("code",[e._v("src/")]),e._v(" directory.")]),e._v(" "),t("h2",{attrs:{id:"toml-file"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#toml-file"}},[e._v("#")]),e._v(" Toml file")]),e._v(" "),t("p",[e._v("The "),t("code",[e._v("Cargo.toml")]),e._v(" files contains project's metadata (like npm's "),t("code",[e._v("project.json")]),e._v(").\nAfter running the project, "),t("code",[e._v("Cargo.lock")]),e._v(" is created as well, which works like\n"),t("code",[e._v("project-lock.json")]),e._v(" of npm. It specifies the exact version numbers of all the\ndependencies. This way, future builds are reliable.")]),e._v(" "),t("h2",{attrs:{id:"running"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#running"}},[e._v("#")]),e._v(" Running")]),e._v(" "),t("p",[t("code",[e._v("cargo run")]),e._v(" does the following:")]),e._v(" "),t("ul",[t("li",[e._v("compiles the code in debug mode (for maximal error information) using "),t("code",[e._v("cargo build")])]),e._v(" "),t("li",[e._v("executes the binary")])]),e._v(" "),t("p",[e._v("Also, a lot of new files are added to the project. They are all managed by\n"),t("code",[e._v("cargo")]),e._v(".")]),e._v(" "),t("p",[t("code",[e._v("cargo run --release")]),e._v(" compiles a "),t("em",[e._v("release")]),e._v(" build.")]),e._v(" "),t("h2",{attrs:{id:"release-profiles"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#release-profiles"}},[e._v("#")]),e._v(" Release Profiles")]),e._v(" "),t("p",[e._v("Rust apps have two profiles:")]),e._v(" "),t("ul",[t("li",[t("strong",[e._v("dev")]),e._v(" (used with "),t("code",[e._v("cargo build")]),e._v(") - good defaults for development")]),e._v(" "),t("li",[t("strong",[e._v("release")]),e._v(" (used with "),t("code",[e._v("cargo build --release")]),e._v(") - good defaults for release\nbuilds")])]),e._v(" "),t("p",[e._v("These profiles can be customized in the "),t("code",[e._v("Cargo.toml")]),e._v(" file. Example:")]),e._v(" "),t("div",{staticClass:"language-toml extra-class"},[t("pre",{pre:!0,attrs:{class:"language-toml"}},[t("code",[t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),t("span",{pre:!0,attrs:{class:"token table class-name"}},[e._v("profile.dev")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token key property"}},[e._v("opt-level")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("=")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("0")]),e._v("\n\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),t("span",{pre:!0,attrs:{class:"token table class-name"}},[e._v("profile.release")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token key property"}},[e._v("opt-level")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("=")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[e._v("3")]),e._v("\n")])])]),t("p",[e._v("The "),t("code",[e._v("dev")]),e._v(" profile has 0 optimizations (because we want it to compile fast even\nthough the code runs slower).")]),e._v(" "),t("h2",{attrs:{id:"other-commands"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#other-commands"}},[e._v("#")]),e._v(" Other commands")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("cargo build")]),e._v(' - downloads dependencies and compiles the code. It uses the\n"rustc" compiler behind the scenes.')]),e._v(" "),t("li",[t("code",[e._v("cargo doc")]),e._v(" - builds HTML documentation for every dependency in the current\nproject.")]),e._v(" "),t("li",[t("code",[e._v("cargo init")]),e._v(" - initaites a Rust project with pre-existng files in it. "),t("code",[e._v("cargo create")]),e._v(" would create a project from scratch.")]),e._v(" "),t("li",[t("code",[e._v("cargo add")]),e._v(" - adds crates. This subcommand needs to be installed first with\n"),t("code",[e._v("cargo install cargo-edit")]),e._v(".")])]),e._v(" "),t("h2",{attrs:{id:"crates"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#crates"}},[e._v("#")]),e._v(" Crates")]),e._v(" "),t("p",[e._v("Packages are called "),t("em",[e._v("crates")]),e._v(". The open-source ones are shared at\nhttps://crates.io.")]),e._v(" "),t("h3",{attrs:{id:"binary-crates"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#binary-crates"}},[e._v("#")]),e._v(" Binary crates")]),e._v(" "),t("p",[e._v("Binary crates might be installed with "),t("code",[e._v("cargo install some-crate")]),e._v(". They will be\ninstalled in "),t("code",[e._v("$HOME/.cargo/bin")]),e._v(".")])])}),[],!1,null,null,null);a.default=r.exports}}]);