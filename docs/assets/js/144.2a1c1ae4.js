(window.webpackJsonp=window.webpackJsonp||[]).push([[144],{631:function(e,t,s){"use strict";s.r(t);var a=s(22),r=Object(a.a)({},(function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[s("h1",{attrs:{id:"system-calls"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#system-calls"}},[e._v("#")]),e._v(" System Calls")]),e._v(" "),s("p",[e._v("The boundary between user-space and kernel-space can be crossed using system\ncalls (aka "),s("em",[e._v("syscalls")]),e._v("). These are the functions that are supported by the\nkernel. They can be split into some categories:")]),e._v(" "),s("ul",[s("li",[e._v("filesystem management")]),e._v(" "),s("li",[e._v("processes management")]),e._v(" "),s("li",[e._v("other")])]),e._v(" "),s("p",[e._v("For example, to execute a binary file, the "),s("code",[e._v("execve")]),e._v(" syscall should be used.")]),e._v(" "),s("p",[e._v("We can see what system calls are invoked by any program by running "),s("code",[e._v("strace")]),e._v(". For\nexample, "),s("code",[e._v("strace ls")]),e._v(" will show the system calls invoked by the "),s("code",[e._v("ls")]),e._v(" program.")]),e._v(" "),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[e._v("ptrace")]),e._v(" "),s("p",[s("code",[e._v("strace")]),e._v(" uses a "),s("a",{attrs:{href:"https://linux.die.net/man/2/ptrace",target:"_blank",rel:"noopener noreferrer"}},[e._v("ptrace"),s("OutboundLink")],1),e._v(" system call to work.")])]),e._v(" "),s("h2",{attrs:{id:"libc"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#libc"}},[e._v("#")]),e._v(" libc")]),e._v(" "),s("p",[e._v("System calls are not C functions. They don't use the call stack. Instead, we run\nthem via interrupts on CPU. We have to set an appropriate number in registers,\nprovide required arguments, and then we can invoke the interrupt. Linux kernel\nregisters handler for that interrupt and it is able to act on the system call.\nThat execution is the kernel-mode operation.")]),e._v(" "),s("p",[e._v("User-space programs can invoke system calls via abstraction provided by the\nstandard C library (like "),s("a",{attrs:{href:"https://www.gnu.org/software/libc/",target:"_blank",rel:"noopener noreferrer"}},[e._v("glibc"),s("OutboundLink")],1),e._v(",\n"),s("a",{attrs:{href:"http://musl.libc.org/",target:"_blank",rel:"noopener noreferrer"}},[e._v("musl"),s("OutboundLink")],1),e._v(", or other). Such a library covers the whole\nspectrum of syscalls that the kernel supports.")]),e._v(" "),s("p",[e._v("We can see which libc functions are being used by a program by using "),s("code",[e._v("ltrace")]),e._v(". Example: "),s("code",[e._v("ltrace ls")]),e._v(".")]),e._v(" "),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[e._v("syscall function")]),e._v(" "),s("p",[e._v("libc implementations have a function "),s("code",[e._v("syscall")]),e._v(' which allows us to invoke the\nsyscall explicitly, without any additional "overhead". It could be useful if our\nkernel supports some system call not covered by our version of libc.')]),e._v(" "),s("p",[e._v("An alternative would be to write the assembly code to invoke that system call.")])]),e._v(" "),s("h2",{attrs:{id:"references"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#references"}},[e._v("#")]),e._v(" References")]),e._v(" "),s("ul",[s("li",[s("a",{attrs:{href:"https://opensource.com/article/19/10/strace#:~:text=A%20system%20call%20is%20a,processes%20and%20the%20Linux%20kernel.",target:"_blank",rel:"noopener noreferrer"}},[e._v("Understanding system calls on Linux with strace (opensource.com)"),s("OutboundLink")],1)])])])}),[],!1,null,null,null);t.default=r.exports}}]);