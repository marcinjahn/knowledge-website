(window.webpackJsonp=window.webpackJsonp||[]).push([[105],{479:function(e,t,a){"use strict";a.r(t);var o=a(22),s=function(e){e.options.__data__block__={mermaid_382ee1e3:"flowchart TD\n    Project --\x3e Application --\x3e ServiceA[Service A] & ServiceB[Service B]\n\n    ServiceA --\x3e v1.0[v1.0 - 50%] & v1.1[v1.1 - 50%]\n    ServiceB --\x3e v1.3[v1.3 - 80%] & v2.0-alpha[v2.0-alpha - 20%]\n\n    v1.0 --\x3e i1[Instance 1] & i2[Instance 2 ]\n    v1.1 --\x3e i3[Instance 1]\n    v1.3 --\x3e i4[Instance 1] & i5[Instance 2] & i6[Instance 3]\n    v2.0-alpha --\x3e i7[Instance 1]\n"}},n=Object(o.a)({},(function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h1",{attrs:{id:"google-cloud-overview"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#google-cloud-overview"}},[e._v("#")]),e._v(" Google Cloud Overview")]),e._v(" "),a("h2",{attrs:{id:"projects"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#projects"}},[e._v("#")]),e._v(" Projects")]),e._v(" "),a("p",[e._v("GCP is organized into "),a("strong",[e._v("Projects")]),e._v(". Projects may belong to some "),a("strong",[e._v("Organization")]),e._v("\nor not.")]),e._v(" "),a("p",[e._v("Different Projects may be used for Testing and Production. Projects have\nseparation of data. If we store data within the same Project (e.g. Firestore),\nthis data is hosted in the same space (instance?).")]),e._v(" "),a("p",[e._v("GCP Projects are a little bit like Resource Groups on Azure.")]),e._v(" "),a("h2",{attrs:{id:"cli"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#cli"}},[e._v("#")]),e._v(" CLI")]),e._v(" "),a("p",[a("a",{attrs:{href:"https://cloud.google.com/sdk/docs/install-sdk",target:"_blank",rel:"noopener noreferrer"}},[e._v("Google Cloud SDK"),a("OutboundLink")],1)]),e._v(" "),a("p",[e._v("The command is "),a("code",[e._v("gcloud")]),e._v(". After the installation, we should run "),a("code",[e._v("gcloud init")]),e._v(" to\nlog in.")]),e._v(" "),a("p",[e._v("Google Cloud Storage uses the "),a("code",[e._v("gsutil")]),e._v(".")]),e._v(" "),a("p",[a("code",[e._v("gcloud config")]),e._v(" allows us to manage the config of the CLI.")]),e._v(" "),a("h3",{attrs:{id:"cloud-shell"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#cloud-shell"}},[e._v("#")]),e._v(" Cloud Shell")]),e._v(" "),a("p",[e._v("Cloud Shell is available from the Web Console interface. Highlights:")]),e._v(" "),a("ul",[a("li",[e._v("has preinstalled SDKs (e.g. dotnet)")]),e._v(" "),a("li",[e._v("allows setting up a web server on some port and accessing it from the outside")])]),e._v(" "),a("h2",{attrs:{id:"app-engine"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#app-engine"}},[e._v("#")]),e._v(" App Engine")]),e._v(" "),a("p",[e._v("It's a GCP's version of Azure's App Service.")]),e._v(" "),a("p",[e._v("A single GCP project may have only one App Engine Application. However, an\nApplication may have multiple Services, where each service is a different app\n(very intuitive (not)).")]),e._v(" "),a("p",[e._v("A Service may have multiple versions, all of them running parallelly. The\ntraffic may be managed for specific versions (e.g., canary deployment). For\nexample, feature braches could be deployed as separate versions of a service.")]),e._v(" "),a("p",[e._v("Each version is scalable horizontally.")]),e._v(" "),a("Mermaid",{attrs:{id:"mermaid_382ee1e3",graph:e.$dataBlock.mermaid_382ee1e3}}),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[e._v("Default")]),e._v(" "),a("p",[e._v('By default, when deploying an app to the project, a "default" service name is\nchosen.')])]),e._v(" "),a("h3",{attrs:{id:"url-template"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#url-template"}},[e._v("#")]),e._v(" URL Template")]),e._v(" "),a("p",[e._v("Each service version can be reached independently:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("https://{VERSION_ID}-dot-{SERVICE_ID}-dot-{PROJECT_ID}.{REGION_ID}.r.appspot.com\n")])])]),a("p",[e._v("Support for .NET seems to be really bad. The "),a("a",{attrs:{href:"https://github.com/GoogleCloudPlatform/dotnet-docs-samples",target:"_blank",rel:"noopener noreferrer"}},[e._v("provided\nexamples"),a("OutboundLink")],1),e._v(' are for\n.NET Core 2.1. The best option for .NET apps seems to be the "custom" runtime,\nwhich is basically Docker containers.')]),e._v(" "),a("p",[e._v("Any app running on App Engine requires the "),a("code",[e._v("app.yaml")]),e._v(' file. Here\'s an example of\nit for the "custom" runtime:')]),e._v(" "),a("div",{staticClass:"language-yaml extra-class"},[a("pre",{pre:!0,attrs:{class:"language-yaml"}},[a("code",[a("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("runtime")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" custom\n"),a("span",{pre:!0,attrs:{class:"token key atrule"}},[e._v("env")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" flex\n")])])]),a("p",[e._v("Here's a full ASP.NET Core Web API project example:\n"),a("a",{attrs:{href:"https://github.com/marcinjahn/gcp-dotnet-example",target:"_blank",rel:"noopener noreferrer"}},[e._v("GitHub"),a("OutboundLink")],1),e._v(".")]),e._v(" "),a("p",[e._v("The app can be deployed with "),a("code",[e._v("gcloud app deploy app.yaml")])]),e._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[e._v("Port")]),e._v(" "),a("p",[e._v('Apps using runtimes other than "custom" are expected to listed on the port\nprovided in the '),a("code",[e._v("PORT")]),e._v(' environment variable. The "custom" Docker apps are\nexpected to listed on port '),a("code",[e._v("8080")]),e._v(".")])])],1)}),[],!1,null,null,null);"function"==typeof s&&s(n);t.default=n.exports}}]);